# format=pipe
ALLEGRO_UNSTABLE|||
ALLEGRO_INTERNAL_UNSTABLE|||
ALLEGRO_SRC|||
ALLEGRO_VERSION|||
ALLEGRO_SUB_VERSION|||
ALLEGRO_WIP_VERSION|||
ALLEGRO_UNSTABLE_BIT|||
ALLEGRO_RELEASE_NUMBER|||
ALLEGRO_VERSION_STR|||
ALLEGRO_DATE_STR|||
ALLEGRO_DATE|||
ALLEGRO_VERSION_INT|||
al_get_allegro_version|uint32_t|(void)|
al_run_main|int|(int argc, char **argv, int (*)(int, char **))|
ALLEGRO_PI|||
AL_ID||(a, b, c, d)|
ALLEGRO_TIMEOUT|||
al_get_time|double|(void)|
al_rest|void|(double seconds)|
al_init_timeout|void|(ALLEGRO_TIMEOUT *timeout, double seconds)|
ALLEGRO_BITMAP|||
ALLEGRO_MEMORY_BITMAP|||
_ALLEGRO_KEEP_BITMAP_FORMAT|||
ALLEGRO_FORCE_LOCKING|||
ALLEGRO_NO_PRESERVE_TEXTURE|||
_ALLEGRO_ALPHA_TEST|||
_ALLEGRO_INTERNAL_OPENGL|||
ALLEGRO_MIN_LINEAR|||
ALLEGRO_MAG_LINEAR|||
ALLEGRO_MIPMAP|||
_ALLEGRO_NO_PREMULTIPLIED_ALPHA|||
ALLEGRO_VIDEO_BITMAP|||
ALLEGRO_CONVERT_BITMAP|||
al_set_new_bitmap_format|void|(int format)|
al_set_new_bitmap_flags|void|(int flags)|
al_get_new_bitmap_format|int|(void)|
al_get_new_bitmap_flags|int|(void)|
al_add_new_bitmap_flag|void|(int flag)|
al_get_new_bitmap_depth|int|(void)|
al_set_new_bitmap_depth|void|(int depth)|
al_get_new_bitmap_samples|int|(void)|
al_set_new_bitmap_samples|void|(int samples)|
al_get_bitmap_width|int|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_height|int|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_format|int|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_flags|int|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_depth|int|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_samples|int|(ALLEGRO_BITMAP *bitmap)|
al_create_bitmap|ALLEGRO_BITMAP*|(int w, int h)|
al_destroy_bitmap|void|(ALLEGRO_BITMAP *bitmap)|
al_put_pixel|void|(int x, int y, ALLEGRO_COLOR color)|
al_put_blended_pixel|void|(int x, int y, ALLEGRO_COLOR color)|
al_get_pixel|ALLEGRO_COLOR|(ALLEGRO_BITMAP *bitmap, int x, int y)|
al_convert_mask_to_alpha|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR mask_color)|
al_get_bitmap_blend_color|ALLEGRO_COLOR|(void)|
al_get_bitmap_blender|void|(int *op, int *src, int *dst)|
al_get_separate_bitmap_blender|void|(int *op, int *src, int *dst, int *alpha_op, int *alpha_src, int *alpha_dst)|
al_set_bitmap_blend_color|void|(ALLEGRO_COLOR color)|
al_set_bitmap_blender|void|(int op, int src, int dst)|
al_set_separate_bitmap_blender|void|(int op, int src, int dst, int alpha_op, int alpha_src, int alpha_dst)|
al_reset_bitmap_blender|void|(void)|
al_set_clipping_rectangle|void|(int x, int y, int width, int height)|
al_reset_clipping_rectangle|void|(void)|
al_get_clipping_rectangle|void|(int *x, int *y, int *w, int *h)|
al_create_sub_bitmap|ALLEGRO_BITMAP *|(ALLEGRO_BITMAP *parent, int x, int y, int w, int h)|
al_is_sub_bitmap|bool|(ALLEGRO_BITMAP *bitmap)|
al_get_parent_bitmap|ALLEGRO_BITMAP *|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_x|int|(ALLEGRO_BITMAP *bitmap)|
al_get_bitmap_y|int|(ALLEGRO_BITMAP *bitmap)|
al_reparent_bitmap|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_BITMAP *parent, int x, int y, int w, int h)|
al_clone_bitmap|ALLEGRO_BITMAP *|(ALLEGRO_BITMAP *bitmap)|
al_convert_bitmap|void|(ALLEGRO_BITMAP *bitmap)|
al_convert_memory_bitmaps|void|(void)|
al_backup_dirty_bitmap|void|(ALLEGRO_BITMAP *bitmap)|
ALLEGRO_FLIP_HORIZONTAL|||
ALLEGRO_FLIP_VERTICAL|||
al_draw_bitmap|void|(ALLEGRO_BITMAP *bitmap, float dx, float dy, int flags)|
al_draw_bitmap_region|void|(ALLEGRO_BITMAP *bitmap, float sx, float sy, float sw, float sh, float dx, float dy, int flags)|
al_draw_scaled_bitmap|void|(ALLEGRO_BITMAP *bitmap, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags)|
al_draw_rotated_bitmap|void|(ALLEGRO_BITMAP *bitmap, float cx, float cy, float dx, float dy, float angle, int flags)|
al_draw_scaled_rotated_bitmap|void|(ALLEGRO_BITMAP *bitmap, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags)|
al_draw_tinted_bitmap|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float dx, float dy, int flags)|
al_draw_tinted_bitmap_region|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, int flags)|
al_draw_tinted_scaled_bitmap|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags)|
al_draw_tinted_rotated_bitmap|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float angle, int flags)|
al_draw_tinted_scaled_rotated_bitmap|void|(ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags)|
al_draw_tinted_scaled_rotated_bitmap_region|void|(ALLEGRO_BITMAP *bitmap, float sx, float sy, float sw, float sh, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags)|
ALLEGRO_KEEP_BITMAP_FORMAT|||
ALLEGRO_NO_PREMULTIPLIED_ALPHA|||
ALLEGRO_KEEP_INDEX|||
al_register_bitmap_loader|bool|(const char *ext, ALLEGRO_BITMAP *(*ALLEGRO_IIO_LOADER_FUNCTION)(const char *filename, int flags))|
al_register_bitmap_saver|bool|(const char *ext, bool (*ALLEGRO_IIO_SAVER_FUNCTION)(const char *filename, ALLEGRO_BITMAP *bitmap))|
al_register_bitmap_loader_f|bool|(const char *ext, ALLEGRO_BITMAP *(*ALLEGRO_IIO_FS_LOADER_FUNCTION)(ALLEGRO_FILE *fp, int flags))|
al_register_bitmap_saver_f|bool|(const char *ext, bool (*ALLEGRO_IIO_FS_SAVER_FUNCTION)(ALLEGRO_FILE *fp, ALLEGRO_BITMAP *bitmap))|
al_register_bitmap_identifier|bool|(const char *ext, bool (*ALLEGRO_IIO_IDENTIFIER_FUNCTION)(ALLEGRO_FILE *f))|
al_load_bitmap|ALLEGRO_BITMAP *|(const char *filename)|
al_load_bitmap_flags|ALLEGRO_BITMAP *|(const char *filename, int flags)|
al_load_bitmap_f|ALLEGRO_BITMAP *|(ALLEGRO_FILE *fp, const char *ident)|
al_load_bitmap_flags_f|ALLEGRO_BITMAP *|(ALLEGRO_FILE *fp, const char *ident, int flags)|
al_save_bitmap|bool|(const char *filename, ALLEGRO_BITMAP *bitmap)|
al_save_bitmap_f|bool|(ALLEGRO_FILE *fp, const char *ident, ALLEGRO_BITMAP *bitmap)|
al_identify_bitmap_f|char const *|(ALLEGRO_FILE *fp)|
al_identify_bitmap|char const *|(char const *filename)|
ALLEGRO_LOCK_READWRITE|||
ALLEGRO_LOCK_READONLY|||
ALLEGRO_LOCK_WRITEONLY|||
ALLEGRO_LOCKED_REGION|||
al_lock_bitmap|ALLEGRO_LOCKED_REGION*|(ALLEGRO_BITMAP *bitmap, int format, int flags)|
al_lock_bitmap_region|ALLEGRO_LOCKED_REGION*|(ALLEGRO_BITMAP *bitmap, int x, int y, int width, int height, int format, int flags)|
al_lock_bitmap_blocked|ALLEGRO_LOCKED_REGION*|(ALLEGRO_BITMAP *bitmap, int flags)|
al_lock_bitmap_region_blocked|ALLEGRO_LOCKED_REGION*|(ALLEGRO_BITMAP *bitmap, int x_block, int y_block, int width_block, int height_block, int flags)|
al_unlock_bitmap|void|(ALLEGRO_BITMAP *bitmap)|
al_is_bitmap_locked|bool|(ALLEGRO_BITMAP *bitmap)|
ALLEGRO_BLEND_MODE|||
ALLEGRO_ZERO|||
ALLEGRO_ONE|||
ALLEGRO_ALPHA|||
ALLEGRO_INVERSE_ALPHA|||
ALLEGRO_SRC_COLOR|||
ALLEGRO_DEST_COLOR|||
ALLEGRO_INVERSE_SRC_COLOR|||
ALLEGRO_INVERSE_DEST_COLOR|||
ALLEGRO_CONST_COLOR|||
ALLEGRO_INVERSE_CONST_COLOR|||
ALLEGRO_NUM_BLEND_MODES|||
ALLEGRO_BLEND_OPERATIONS|||
ALLEGRO_ADD|||
ALLEGRO_SRC_MINUS_DEST|||
ALLEGRO_DEST_MINUS_SRC|||
ALLEGRO_NUM_BLEND_OPERATIONS|||
al_set_blender|void|(int op, int source, int dest)|
al_set_blend_color|void|(ALLEGRO_COLOR color)|
al_get_blender|void|(int *op, int *source, int *dest)|
al_get_blend_color|ALLEGRO_COLOR|(void)|
al_set_separate_blender|void|(int op, int source, int dest, int alpha_op, int alpha_source, int alpha_dest)|
al_get_separate_blender|void|(int *op, int *source, int *dest, int *alpha_op, int *alpha_src, int *alpha_dest)|
al_get_clipboard_text|char *|(ALLEGRO_DISPLAY *display)|
al_set_clipboard_text|bool|(ALLEGRO_DISPLAY *display, const char *text)|
al_clipboard_has_text|bool|(ALLEGRO_DISPLAY *display)|
ALLEGRO_COLOR|||
ALLEGRO_PIXEL_FORMAT|||
ALLEGRO_PIXEL_FORMAT_ANY|||
ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA|||
ALLEGRO_PIXEL_FORMAT_ARGB_8888|||
ALLEGRO_PIXEL_FORMAT_RGBA_8888|||
ALLEGRO_PIXEL_FORMAT_ARGB_4444|||
ALLEGRO_PIXEL_FORMAT_RGB_888|||
ALLEGRO_PIXEL_FORMAT_RGB_565|||
ALLEGRO_PIXEL_FORMAT_RGB_555|||
ALLEGRO_PIXEL_FORMAT_RGBA_5551|||
ALLEGRO_PIXEL_FORMAT_ARGB_1555|||
ALLEGRO_PIXEL_FORMAT_ABGR_8888|||
ALLEGRO_PIXEL_FORMAT_XBGR_8888|||
ALLEGRO_PIXEL_FORMAT_BGR_888|||
ALLEGRO_PIXEL_FORMAT_BGR_565|||
ALLEGRO_PIXEL_FORMAT_BGR_555|||
ALLEGRO_PIXEL_FORMAT_RGBX_8888|||
ALLEGRO_PIXEL_FORMAT_XRGB_8888|||
ALLEGRO_PIXEL_FORMAT_ABGR_F32|||
ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE|||
ALLEGRO_PIXEL_FORMAT_RGBA_4444|||
ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8|||
ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1|||
ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3|||
ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5|||
ALLEGRO_NUM_PIXEL_FORMATS|||
al_map_rgb|ALLEGRO_COLOR|(unsigned char r, unsigned char g, unsigned char b)|
al_map_rgba|ALLEGRO_COLOR|(unsigned char r, unsigned char g, unsigned char b, unsigned char a)|
al_map_rgb_f|ALLEGRO_COLOR|(float r, float g, float b)|
al_map_rgba_f|ALLEGRO_COLOR|(float r, float g, float b, float a)|
al_premul_rgba|ALLEGRO_COLOR|(unsigned char r, unsigned char g, unsigned char b, unsigned char a)|
al_premul_rgba_f|ALLEGRO_COLOR|(float r, float g, float b, float a)|
al_unmap_rgb|void|(ALLEGRO_COLOR color, unsigned char *r, unsigned char *g, unsigned char *b)|
al_unmap_rgba|void|(ALLEGRO_COLOR color, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a)|
al_unmap_rgb_f|void|(ALLEGRO_COLOR color, float *r, float *g, float *b)|
al_unmap_rgba_f|void|(ALLEGRO_COLOR color, float *r, float *g, float *b, float *a)|
al_get_pixel_size|int|(int format)|
al_get_pixel_format_bits|int|(int format)|
al_get_pixel_block_size|int|(int format)|
al_get_pixel_block_width|int|(int format)|
al_get_pixel_block_height|int|(int format)|
ALLEGRO_CONFIG|||
ALLEGRO_CONFIG_SECTION|||
ALLEGRO_CONFIG_ENTRY|||
al_create_config|ALLEGRO_CONFIG *|(void)|
al_add_config_section|void|(ALLEGRO_CONFIG *config, const char *name)|
al_set_config_value|void|(ALLEGRO_CONFIG *config, const char *section, const char *key, const char *value)|
al_add_config_comment|void|(ALLEGRO_CONFIG *config, const char *section, const char *comment)|
al_get_config_value|const char*|(const ALLEGRO_CONFIG *config, const char *section, const char *key)|
al_load_config_file|ALLEGRO_CONFIG*|(const char *filename)|
al_load_config_file_f|ALLEGRO_CONFIG*|(ALLEGRO_FILE *filename)|
al_save_config_file|bool|(const char *filename, const ALLEGRO_CONFIG *config)|
al_save_config_file_f|bool|(ALLEGRO_FILE *file, const ALLEGRO_CONFIG *config)|
al_merge_config_into|void|(ALLEGRO_CONFIG *master, const ALLEGRO_CONFIG *add)|
al_merge_config|ALLEGRO_CONFIG *|(const ALLEGRO_CONFIG *cfg1, const ALLEGRO_CONFIG *cfg2)|
al_destroy_config|void|(ALLEGRO_CONFIG *config)|
al_remove_config_section|bool|(ALLEGRO_CONFIG *config, char const *section)|
al_remove_config_key|bool|(ALLEGRO_CONFIG *config, char const *section, char const *key)|
al_get_first_config_section|char const *|(ALLEGRO_CONFIG const *config, ALLEGRO_CONFIG_SECTION **iterator)|
al_get_next_config_section|char const *|(ALLEGRO_CONFIG_SECTION **iterator)|
al_get_first_config_entry|char const *|(ALLEGRO_CONFIG const *config, char const *section, ALLEGRO_CONFIG_ENTRY **iterator)|
al_get_next_config_entry|char const *|(ALLEGRO_CONFIG_ENTRY **iterator)|
al_get_cpu_count|int|(void)|
al_get_ram_size|int|(void)|
DEBUGMODE|||
ALLEGRO_CFG_RELEASE_LOGGING|||
ALLEGRO_TRACE_CHANNEL_LEVEL||(channel, x)|
ALLEGRO_DEBUG_CHANNEL||(x)|
ALLEGRO_TRACE_LEVEL||(x)|
ALLEGRO_DEBUG|||
ALLEGRO_INFO|||
ALLEGRO_WARN|||
ALLEGRO_ERROR|||
al_register_assert_handler|void|(void (*handler)(char const *expr, char const *file, int line, char const *func))|
al_register_trace_handler|void|(void (*handler)(char const *))|
ALLEGRO_ASSERT||(e)|
ALLEGRO_STATIC_ASSERT||(module, e)|
ALLEGRO_WINDOWED|||
ALLEGRO_FULLSCREEN|||
ALLEGRO_OPENGL|||
ALLEGRO_DIRECT3D_INTERNAL|||
ALLEGRO_RESIZABLE|||
ALLEGRO_FRAMELESS|||
ALLEGRO_NOFRAME|||
ALLEGRO_GENERATE_EXPOSE_EVENTS|||
ALLEGRO_OPENGL_3_0|||
ALLEGRO_OPENGL_FORWARD_COMPATIBLE|||
ALLEGRO_FULLSCREEN_WINDOW|||
ALLEGRO_MINIMIZED|||
ALLEGRO_PROGRAMMABLE_PIPELINE|||
ALLEGRO_GTK_TOPLEVEL_INTERNAL|||
ALLEGRO_MAXIMIZED|||
ALLEGRO_OPENGL_ES_PROFILE|||
ALLEGRO_DISPLAY_OPTIONS|||
ALLEGRO_RED_SIZE|||
ALLEGRO_GREEN_SIZE|||
ALLEGRO_BLUE_SIZE|||
ALLEGRO_ALPHA_SIZE|||
ALLEGRO_RED_SHIFT|||
ALLEGRO_GREEN_SHIFT|||
ALLEGRO_BLUE_SHIFT|||
ALLEGRO_ALPHA_SHIFT|||
ALLEGRO_ACC_RED_SIZE|||
ALLEGRO_ACC_GREEN_SIZE|||
ALLEGRO_ACC_BLUE_SIZE|||
ALLEGRO_ACC_ALPHA_SIZE|||
ALLEGRO_STEREO|||
ALLEGRO_AUX_BUFFERS|||
ALLEGRO_COLOR_SIZE|||
ALLEGRO_DEPTH_SIZE|||
ALLEGRO_STENCIL_SIZE|||
ALLEGRO_SAMPLE_BUFFERS|||
ALLEGRO_SAMPLES|||
ALLEGRO_RENDER_METHOD|||
ALLEGRO_FLOAT_COLOR|||
ALLEGRO_FLOAT_DEPTH|||
ALLEGRO_SINGLE_BUFFER|||
ALLEGRO_SWAP_METHOD|||
ALLEGRO_COMPATIBLE_DISPLAY|||
ALLEGRO_UPDATE_DISPLAY_REGION|||
ALLEGRO_VSYNC|||
ALLEGRO_MAX_BITMAP_SIZE|||
ALLEGRO_SUPPORT_NPOT_BITMAP|||
ALLEGRO_CAN_DRAW_INTO_BITMAP|||
ALLEGRO_SUPPORT_SEPARATE_ALPHA|||
ALLEGRO_AUTO_CONVERT_BITMAPS|||
ALLEGRO_SUPPORTED_ORIENTATIONS|||
ALLEGRO_OPENGL_MAJOR_VERSION|||
ALLEGRO_OPENGL_MINOR_VERSION|||
ALLEGRO_DISPLAY_OPTIONS_COUNT|||
ALLEGRO_DONTCARE|||
ALLEGRO_REQUIRE|||
ALLEGRO_SUGGEST|||
ALLEGRO_DISPLAY_ORIENTATION|||
ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN|||
ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES|||
ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES|||
ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES|||
ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES|||
ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT|||
ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE|||
ALLEGRO_DISPLAY_ORIENTATION_ALL|||
ALLEGRO_DISPLAY_ORIENTATION_FACE_UP|||
ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN|||
_ALLEGRO_PRIM_MAX_USER_ATTR|||
ALLEGRO_DISPLAY|||
ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE|||
al_set_new_display_refresh_rate|void|(int refresh_rate)|
al_set_new_display_flags|void|(int flags)|
al_get_new_display_refresh_rate|int|(void)|
al_get_new_display_flags|int|(void)|
al_set_new_window_title|void|(const char *title)|
al_get_new_window_title|const char *|(void)|
al_get_display_width|int|(ALLEGRO_DISPLAY *display)|
al_get_display_height|int|(ALLEGRO_DISPLAY *display)|
al_get_display_format|int|(ALLEGRO_DISPLAY *display)|
al_get_display_refresh_rate|int|(ALLEGRO_DISPLAY *display)|
al_get_display_flags|int|(ALLEGRO_DISPLAY *display)|
al_get_display_orientation|int|(ALLEGRO_DISPLAY* display)|
al_set_display_flag|bool|(ALLEGRO_DISPLAY *display, int flag, bool onoff)|
al_create_display|ALLEGRO_DISPLAY*|(int w, int h)|
al_destroy_display|void|(ALLEGRO_DISPLAY *display)|
al_get_current_display|ALLEGRO_DISPLAY*|(void)|
al_set_target_bitmap|void|(ALLEGRO_BITMAP *bitmap)|
al_set_target_backbuffer|void|(ALLEGRO_DISPLAY *display)|
al_get_backbuffer|ALLEGRO_BITMAP*|(ALLEGRO_DISPLAY *display)|
al_get_target_bitmap|ALLEGRO_BITMAP*|(void)|
al_acknowledge_resize|bool|(ALLEGRO_DISPLAY *display)|
al_resize_display|bool|(ALLEGRO_DISPLAY *display, int width, int height)|
al_flip_display|void|(void)|
al_update_display_region|void|(int x, int y, int width, int height)|
al_is_compatible_bitmap|bool|(ALLEGRO_BITMAP *bitmap)|
al_wait_for_vsync|bool|(void)|
al_get_display_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_DISPLAY *display)|
al_set_display_icon|void|(ALLEGRO_DISPLAY *display, ALLEGRO_BITMAP *icon)|
al_set_display_icons|void|(ALLEGRO_DISPLAY *display, int num_icons, ALLEGRO_BITMAP *icons[])|
al_get_new_display_adapter|int|(void)|
al_set_new_display_adapter|void|(int adapter)|
al_set_new_window_position|void|(int x, int y)|
al_get_new_window_position|void|(int *x, int *y)|
al_set_window_position|void|(ALLEGRO_DISPLAY *display, int x, int y)|
al_get_window_position|void|(ALLEGRO_DISPLAY *display, int *x, int *y)|
al_set_window_constraints|bool|(ALLEGRO_DISPLAY *display, int min_w, int min_h, int max_w, int max_h)|
al_get_window_constraints|bool|(ALLEGRO_DISPLAY *display, int *min_w, int *min_h, int *max_w, int *max_h)|
al_apply_window_constraints|void|(ALLEGRO_DISPLAY *display, bool onoff)|
al_set_window_title|void|(ALLEGRO_DISPLAY *display, const char *title)|
al_set_new_display_option|void|(int option, int value, int importance)|
al_get_new_display_option|int|(int option, int *importance)|
al_reset_new_display_options|void|(void)|
al_set_display_option|void|(ALLEGRO_DISPLAY *display, int option, int value)|
al_get_display_option|int|(ALLEGRO_DISPLAY *display, int option)|
al_hold_bitmap_drawing|void|(bool hold)|
al_is_bitmap_drawing_held|bool|(void)|
al_acknowledge_drawing_halt|void|(ALLEGRO_DISPLAY *display)|
al_acknowledge_drawing_resume|void|(ALLEGRO_DISPLAY *display)|
al_backup_dirty_bitmaps|void|(ALLEGRO_DISPLAY *display)|
al_clear_to_color|void|(ALLEGRO_COLOR color)|
al_clear_depth_buffer|void|(float x)|
al_draw_pixel|void|(float x, float y, ALLEGRO_COLOR color)|
al_get_errno|int|(void)|
al_set_errno|void|(int errnum)|
ALLEGRO_EVENT_TYPE|||
ALLEGRO_EVENT_JOYSTICK_AXIS|||
ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN|||
ALLEGRO_EVENT_JOYSTICK_BUTTON_UP|||
ALLEGRO_EVENT_JOYSTICK_CONFIGURATION|||
ALLEGRO_EVENT_KEY_DOWN|||
ALLEGRO_EVENT_KEY_CHAR|||
ALLEGRO_EVENT_KEY_UP|||
ALLEGRO_EVENT_MOUSE_AXES|||
ALLEGRO_EVENT_MOUSE_BUTTON_DOWN|||
ALLEGRO_EVENT_MOUSE_BUTTON_UP|||
ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY|||
ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY|||
ALLEGRO_EVENT_MOUSE_WARPED|||
ALLEGRO_EVENT_TIMER|||
ALLEGRO_EVENT_DISPLAY_EXPOSE|||
ALLEGRO_EVENT_DISPLAY_RESIZE|||
ALLEGRO_EVENT_DISPLAY_CLOSE|||
ALLEGRO_EVENT_DISPLAY_LOST|||
ALLEGRO_EVENT_DISPLAY_FOUND|||
ALLEGRO_EVENT_DISPLAY_SWITCH_IN|||
ALLEGRO_EVENT_DISPLAY_SWITCH_OUT|||
ALLEGRO_EVENT_DISPLAY_ORIENTATION|||
ALLEGRO_EVENT_DISPLAY_HALT_DRAWING|||
ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING|||
ALLEGRO_EVENT_TOUCH_BEGIN|||
ALLEGRO_EVENT_TOUCH_END|||
ALLEGRO_EVENT_TOUCH_MOVE|||
ALLEGRO_EVENT_TOUCH_CANCEL|||
ALLEGRO_EVENT_DISPLAY_CONNECTED|||
ALLEGRO_EVENT_DISPLAY_DISCONNECTED|||
ALLEGRO_EVENT_TYPE_IS_USER||(t)|
ALLEGRO_GET_EVENT_TYPE||(a, b, c, d)|
ALLEGRO_EVENT_SOURCE|||
ALLEGRO_ANY_EVENT|||
ALLEGRO_DISPLAY_EVENT|||
ALLEGRO_JOYSTICK_EVENT|||
ALLEGRO_KEYBOARD_EVENT|||
ALLEGRO_MOUSE_EVENT|||
ALLEGRO_TIMER_EVENT|||
ALLEGRO_TOUCH_EVENT|||
ALLEGRO_USER_EVENT|||
ALLEGRO_USER_EVENT_DESCRIPTOR|||
ALLEGRO_EVENT|||
al_init_user_event_source|void|(ALLEGRO_EVENT_SOURCE *)|
al_destroy_user_event_source|void|(ALLEGRO_EVENT_SOURCE *)|
al_emit_user_event|bool|(ALLEGRO_EVENT_SOURCE *, ALLEGRO_EVENT *, void (*dtor)(ALLEGRO_USER_EVENT *))|
al_unref_user_event|void|(ALLEGRO_USER_EVENT *)|
al_set_event_source_data|void|(ALLEGRO_EVENT_SOURCE*, intptr_t data)|
al_get_event_source_data|intptr_t|(const ALLEGRO_EVENT_SOURCE*)|
ALLEGRO_EVENT_QUEUE|||
al_create_event_queue|ALLEGRO_EVENT_QUEUE*|(void)|
al_destroy_event_queue|void|(ALLEGRO_EVENT_QUEUE*)|
al_is_event_source_registered|bool|(ALLEGRO_EVENT_QUEUE *, ALLEGRO_EVENT_SOURCE *)|
al_register_event_source|void|(ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT_SOURCE*)|
al_unregister_event_source|void|(ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT_SOURCE*)|
al_pause_event_queue|void|(ALLEGRO_EVENT_QUEUE*, bool)|
al_is_event_queue_paused|bool|(const ALLEGRO_EVENT_QUEUE*)|
al_is_event_queue_empty|bool|(ALLEGRO_EVENT_QUEUE*)|
al_get_next_event|bool|(ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event)|
al_peek_next_event|bool|(ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event)|
al_drop_next_event|bool|(ALLEGRO_EVENT_QUEUE*)|
al_flush_event_queue|void|(ALLEGRO_EVENT_QUEUE*)|
al_wait_for_event|void|(ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event)|
al_wait_for_event_timed|bool|(ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event, float secs)|
al_wait_for_event_until|bool|(ALLEGRO_EVENT_QUEUE *queue, ALLEGRO_EVENT *ret_event, ALLEGRO_TIMEOUT *timeout)|
ALLEGRO_FILE|||
ALLEGRO_FILE_INTERFACE|||
fi_fopen|void *|(const char *path, const char *mode)|
fi_fclose|bool|(ALLEGRO_FILE *handle)|
fi_fread|size_t|(ALLEGRO_FILE *f, void *ptr, size_t size)|
fi_fwrite|size_t|(ALLEGRO_FILE *f, const void *ptr, size_t size)|
fi_fflush|bool|(ALLEGRO_FILE *f)|
fi_ftell|int64_t|(ALLEGRO_FILE *f)|
fi_fseek|bool|(ALLEGRO_FILE *f, int64_t offset, int whence)|
fi_feof|bool|(ALLEGRO_FILE *f)|
fi_ferror|int|(ALLEGRO_FILE *f)|
fi_ferrmsg|const char *|(ALLEGRO_FILE *f)|
fi_fclearerr|void|(ALLEGRO_FILE *f)|
fi_fungetc|int|(ALLEGRO_FILE *f, int c)|
fi_fsize|off_t|(ALLEGRO_FILE *f)|
ALLEGRO_SEEK|||
ALLEGRO_SEEK_SET|||
ALLEGRO_SEEK_CUR|||
ALLEGRO_SEEK_END|||
al_fopen|ALLEGRO_FILE*|(const char *path, const char *mode)|
al_fopen_interface|ALLEGRO_FILE*|(const ALLEGRO_FILE_INTERFACE *vt, const char *path, const char *mode)|
al_create_file_handle|ALLEGRO_FILE*|(const ALLEGRO_FILE_INTERFACE *vt, void *userdata)|
al_fclose|bool|(ALLEGRO_FILE *f)|
al_fread|size_t|(ALLEGRO_FILE *f, void *ptr, size_t size)|
al_fwrite|size_t|(ALLEGRO_FILE *f, const void *ptr, size_t size)|
al_fflush|bool|(ALLEGRO_FILE *f)|
al_ftell|int64_t|(ALLEGRO_FILE *f)|
al_fseek|bool|(ALLEGRO_FILE *f, int64_t offset, int whence)|
al_feof|bool|(ALLEGRO_FILE *f)|
al_ferror|int|(ALLEGRO_FILE *f)|
al_ferrmsg|const char *|(ALLEGRO_FILE *f)|
al_fclearerr|void|(ALLEGRO_FILE *f)|
al_fungetc|int|(ALLEGRO_FILE *f, int c)|
al_fsize|int64_t|(ALLEGRO_FILE *f)|
al_fgetc|int|(ALLEGRO_FILE *f)|
al_fputc|int|(ALLEGRO_FILE *f, int c)|
al_fread16le|int16_t|(ALLEGRO_FILE *f)|
al_fread16be|int16_t|(ALLEGRO_FILE *f)|
al_fwrite16le|size_t|(ALLEGRO_FILE *f, int16_t w)|
al_fwrite16be|size_t|(ALLEGRO_FILE *f, int16_t w)|
al_fread32le|int32_t|(ALLEGRO_FILE *f)|
al_fread32be|int32_t|(ALLEGRO_FILE *f)|
al_fwrite32le|size_t|(ALLEGRO_FILE *f, int32_t l)|
al_fwrite32be|size_t|(ALLEGRO_FILE *f, int32_t l)|
al_fgets|char*|(ALLEGRO_FILE *f, char * const p, size_t max)|
al_fget_ustr|ALLEGRO_USTR *|(ALLEGRO_FILE *f)|
al_fputs|int|(ALLEGRO_FILE *f, const char *p)|
al_fprintf|int|(ALLEGRO_FILE *f, const char *format, ...)|
al_vfprintf|int|(ALLEGRO_FILE *f, const char* format, va_list args)|
al_fopen_fd|ALLEGRO_FILE*|(int fd, const char *mode)|
al_make_temp_file|ALLEGRO_FILE*|(const char *tmpl, ALLEGRO_PATH **ret_path)|
al_fopen_slice|ALLEGRO_FILE*|(ALLEGRO_FILE *fp, size_t initial_size, const char *mode)|
al_get_new_file_interface|const ALLEGRO_FILE_INTERFACE *|(void)|
al_set_new_file_interface|void|(const ALLEGRO_FILE_INTERFACE *file_interface)|
al_set_standard_file_interface|void|(void)|
al_get_file_userdata|void *|(ALLEGRO_FILE *f)|
al_fixed|||
al_fixtorad_r|||
al_radtofix_r|||
al_fixsqrt|al_fixed|(al_fixed x)|
al_fixhypot|al_fixed|(al_fixed x, al_fixed y)|
al_fixatan|al_fixed|(al_fixed x)|
al_fixatan2|al_fixed|(al_fixed y, al_fixed x)|
_al_fix_cos_tbl|||
_al_fix_tan_tbl|||
_al_fix_acos_tbl|||
off_t|||
ALLEGRO_FS_ENTRY|||
ALLEGRO_FILE_MODE|||
ALLEGRO_FILEMODE_READ|||
ALLEGRO_FILEMODE_WRITE|||
ALLEGRO_FILEMODE_EXECUTE|||
ALLEGRO_FILEMODE_HIDDEN|||
ALLEGRO_FILEMODE_ISFILE|||
ALLEGRO_FILEMODE_ISDIR|||
EOF|||
ALLEGRO_FS_INTERFACE|||
AL_METHOD(ALLEGRO_FS_ENTRY *, fs_create_entry,  (const char *path));
fs_destroy_entry|void|(ALLEGRO_FS_ENTRY *e)|
fs_entry_name|const char *|(ALLEGRO_FS_ENTRY *e)|
fs_update_entry|bool|(ALLEGRO_FS_ENTRY *e)|
fs_entry_mode|uint32_t|(ALLEGRO_FS_ENTRY *e)|
fs_entry_atime|time_t|(ALLEGRO_FS_ENTRY *e)|
fs_entry_mtime|time_t|(ALLEGRO_FS_ENTRY *e)|
fs_entry_ctime|time_t|(ALLEGRO_FS_ENTRY *e)|
fs_entry_size|off_t|(ALLEGRO_FS_ENTRY *e)|
fs_entry_exists|bool|(ALLEGRO_FS_ENTRY *e)|
fs_remove_entry|bool|(ALLEGRO_FS_ENTRY *e)|
fs_open_directory|bool|(ALLEGRO_FS_ENTRY *e)|
fs_read_directory|ALLEGRO_FS_ENTRY *|(ALLEGRO_FS_ENTRY *e)|
fs_close_directory|bool|(ALLEGRO_FS_ENTRY *e)|
fs_filename_exists|bool|(const char *path)|
fs_remove_filename|bool|(const char *path)|
fs_get_current_directory|char *|(void)|
fs_change_directory|bool|(const char *path)|
fs_make_directory|bool|(const char *path)|
fs_open_file|ALLEGRO_FILE *|(ALLEGRO_FS_ENTRY *e, const char *mode)|
al_create_fs_entry|ALLEGRO_FS_ENTRY *|(const char *path)|
al_destroy_fs_entry|void|(ALLEGRO_FS_ENTRY *e)|
al_get_fs_entry_name|const char *|(ALLEGRO_FS_ENTRY *e)|
al_update_fs_entry|bool|(ALLEGRO_FS_ENTRY *e)|
al_get_fs_entry_mode|uint32_t|(ALLEGRO_FS_ENTRY *e)|
al_get_fs_entry_atime|time_t|(ALLEGRO_FS_ENTRY *e)|
al_get_fs_entry_mtime|time_t|(ALLEGRO_FS_ENTRY *e)|
al_get_fs_entry_ctime|time_t|(ALLEGRO_FS_ENTRY *e)|
al_get_fs_entry_size|off_t|(ALLEGRO_FS_ENTRY *e)|
al_fs_entry_exists|bool|(ALLEGRO_FS_ENTRY *e)|
al_remove_fs_entry|bool|(ALLEGRO_FS_ENTRY *e)|
al_open_directory|bool|(ALLEGRO_FS_ENTRY *e)|
al_read_directory|ALLEGRO_FS_ENTRY *|(ALLEGRO_FS_ENTRY *e)|
al_close_directory|bool|(ALLEGRO_FS_ENTRY *e)|
al_filename_exists|bool|(const char *path)|
al_remove_filename|bool|(const char *path)|
al_get_current_directory|char *|(void)|
al_change_directory|bool|(const char *path)|
al_make_directory|bool|(const char *path)|
al_open_fs_entry|ALLEGRO_FILE *|(ALLEGRO_FS_ENTRY *e, const char *mode)|
ALLEGRO_FOR_EACH_FS_ENTRY_RESULT|||
ALLEGRO_FOR_EACH_FS_ENTRY_ERROR|||
ALLEGRO_FOR_EACH_FS_ENTRY_OK|||
ALLEGRO_FOR_EACH_FS_ENTRY_SKIP|||
ALLEGRO_FOR_EACH_FS_ENTRY_STOP|||
al_for_each_fs_entry|int|(ALLEGRO_FS_ENTRY *dir, int (*callback)(ALLEGRO_FS_ENTRY *entry, void *extra), void *extra)|
al_get_fs_interface|const ALLEGRO_FS_INTERFACE *|(void)|
al_set_fs_interface|void|(const ALLEGRO_FS_INTERFACE *vtable)|
al_set_standard_fs_interface|void|(void)|
ALLEGRO_DISPLAY_MODE|||
al_get_num_display_modes|int|(void)|
al_get_display_mode|ALLEGRO_DISPLAY_MODE*|(int index, ALLEGRO_DISPLAY_MODE *mode)|
ALLEGRO_HAPTIC_CONSTANTS|||
ALLEGRO_HAPTIC_RUMBLE|||
ALLEGRO_HAPTIC_PERIODIC|||
ALLEGRO_HAPTIC_CONSTANT|||
ALLEGRO_HAPTIC_SPRING|||
ALLEGRO_HAPTIC_FRICTION|||
ALLEGRO_HAPTIC_DAMPER|||
ALLEGRO_HAPTIC_INERTIA|||
ALLEGRO_HAPTIC_RAMP|||
ALLEGRO_HAPTIC_SQUARE|||
ALLEGRO_HAPTIC_TRIANGLE|||
ALLEGRO_HAPTIC_SINE|||
ALLEGRO_HAPTIC_SAW_UP|||
ALLEGRO_HAPTIC_SAW_DOWN|||
ALLEGRO_HAPTIC_CUSTOM|||
ALLEGRO_HAPTIC_GAIN|||
ALLEGRO_HAPTIC_ANGLE|||
ALLEGRO_HAPTIC_RADIUS|||
ALLEGRO_HAPTIC_AZIMUTH|||
ALLEGRO_HAPTIC_AUTOCENTER|||
ALLEGRO_HAPTIC|||
ALLEGRO_HAPTIC_DIRECTION|||
ALLEGRO_HAPTIC_REPLAY|||
ALLEGRO_HAPTIC_ENVELOPE|||
ALLEGRO_HAPTIC_CONSTANT_EFFECT|||
ALLEGRO_HAPTIC_RAMP_EFFECT|||
ALLEGRO_HAPTIC_CONDITION_EFFECT|||
ALLEGRO_HAPTIC_PERIODIC_EFFECT|||
ALLEGRO_HAPTIC_RUMBLE_EFFECT|||
ALLEGRO_HAPTIC_EFFECT_UNION|||
ALLEGRO_HAPTIC_EFFECT|||
ALLEGRO_HAPTIC_EFFECT_ID|||
al_install_haptic|bool|(void)|
al_uninstall_haptic|void|(void)|
al_is_haptic_installed|bool|(void)|
al_is_mouse_haptic|bool|(ALLEGRO_MOUSE *)|
al_is_joystick_haptic|bool|(ALLEGRO_JOYSTICK *)|
al_is_keyboard_haptic|bool|(ALLEGRO_KEYBOARD *)|
al_is_display_haptic|bool|(ALLEGRO_DISPLAY *)|
al_is_touch_input_haptic|bool|(ALLEGRO_TOUCH_INPUT *)|
al_get_haptic_from_mouse|ALLEGRO_HAPTIC *|(ALLEGRO_MOUSE *)|
al_get_haptic_from_joystick|ALLEGRO_HAPTIC *|(ALLEGRO_JOYSTICK *)|
al_get_haptic_from_keyboard|ALLEGRO_HAPTIC *|(ALLEGRO_KEYBOARD *)|
al_get_haptic_from_display|ALLEGRO_HAPTIC *|(ALLEGRO_DISPLAY *)|
al_get_haptic_from_touch_input|ALLEGRO_HAPTIC *|(ALLEGRO_TOUCH_INPUT *)|
al_release_haptic|bool|(ALLEGRO_HAPTIC *)|
al_is_haptic_active|bool|(ALLEGRO_HAPTIC *)|
al_get_haptic_capabilities|int|(ALLEGRO_HAPTIC *)|
al_is_haptic_capable|bool|(ALLEGRO_HAPTIC *, int)|
al_set_haptic_gain|bool|(ALLEGRO_HAPTIC *, double)|
al_get_haptic_gain|double|(ALLEGRO_HAPTIC *)|
al_set_haptic_autocenter|bool|(ALLEGRO_HAPTIC *, double)|
al_get_haptic_autocenter|double|(ALLEGRO_HAPTIC *)|
al_get_max_haptic_effects|int|(ALLEGRO_HAPTIC *)|
al_is_haptic_effect_ok|bool|(ALLEGRO_HAPTIC *, ALLEGRO_HAPTIC_EFFECT *)|
al_upload_haptic_effect|bool|(ALLEGRO_HAPTIC *, ALLEGRO_HAPTIC_EFFECT *, ALLEGRO_HAPTIC_EFFECT_ID *)|
al_play_haptic_effect|bool|(ALLEGRO_HAPTIC_EFFECT_ID *, int)|
al_upload_and_play_haptic_effect|bool|(ALLEGRO_HAPTIC *, ALLEGRO_HAPTIC_EFFECT *, ALLEGRO_HAPTIC_EFFECT_ID *, int)|
al_stop_haptic_effect|bool|(ALLEGRO_HAPTIC_EFFECT_ID *)|
al_is_haptic_effect_playing|bool|(ALLEGRO_HAPTIC_EFFECT_ID *)|
al_release_haptic_effect|bool|(ALLEGRO_HAPTIC_EFFECT_ID *)|
al_get_haptic_effect_duration|double|(ALLEGRO_HAPTIC_EFFECT *)|
al_rumble_haptic|bool|(ALLEGRO_HAPTIC *, double, double, ALLEGRO_HAPTIC_EFFECT_ID *)|
_AL_MAX_JOYSTICK_AXES|||
_AL_MAX_JOYSTICK_STICKS|||
_AL_MAX_JOYSTICK_BUTTONS|||
ALLEGRO_JOYSTICK|||
ALLEGRO_JOYSTICK_STATE|||
ALLEGRO_JOYFLAGS|||
ALLEGRO_JOYFLAG_DIGITAL|||
ALLEGRO_JOYFLAG_ANALOGUE|||
al_install_joystick|bool|(void)|
al_uninstall_joystick|void|(void)|
al_is_joystick_installed|bool|(void)|
al_reconfigure_joysticks|bool|(void)|
al_get_num_joysticks|int|(void)|
al_get_joystick|ALLEGRO_JOYSTICK *|(int joyn)|
al_release_joystick|void|(ALLEGRO_JOYSTICK *)|
al_get_joystick_active|bool|(ALLEGRO_JOYSTICK *)|
al_get_joystick_name|const char*|(ALLEGRO_JOYSTICK *)|
al_get_joystick_num_sticks|int|(ALLEGRO_JOYSTICK *)|
al_get_joystick_stick_flags|int|(ALLEGRO_JOYSTICK *, int stick)| /* junk? */
al_get_joystick_stick_name|const char*|(ALLEGRO_JOYSTICK *, int stick)|
al_get_joystick_num_axes|int|(ALLEGRO_JOYSTICK *, int stick)|
al_get_joystick_axis_name|const char*|(ALLEGRO_JOYSTICK *, int stick, int axis)|
al_get_joystick_num_buttons|int|(ALLEGRO_JOYSTICK *)|
al_get_joystick_button_name|const char*|(ALLEGRO_JOYSTICK *, int buttonn)|
al_get_joystick_state|void|(ALLEGRO_JOYSTICK *, ALLEGRO_JOYSTICK_STATE *ret_state)|
al_get_joystick_event_source|ALLEGRO_EVENT_SOURCE *|(void)|
ALLEGRO_KEYBOARD|||
ALLEGRO_KEYBOARD_STATE|||
al_is_keyboard_installed|bool|(void)|
al_install_keyboard|bool|(void)|
al_uninstall_keyboard|void|(void)|
al_set_keyboard_leds|bool|(int leds)|
al_keycode_to_name|const char *|(int keycode)|
al_get_keyboard_state|void|(ALLEGRO_KEYBOARD_STATE *ret_state)|
al_clear_keyboard_state|void|(ALLEGRO_DISPLAY *display)|
al_key_down|bool|(const ALLEGRO_KEYBOARD_STATE *, int keycode)|
al_get_keyboard_event_source|ALLEGRO_EVENT_SOURCE *|(void)|
ALLEGRO_KEY_A|||
ALLEGRO_KEY_B|||
ALLEGRO_KEY_C|||
ALLEGRO_KEY_D|||
ALLEGRO_KEY_E|||
ALLEGRO_KEY_F|||
ALLEGRO_KEY_G|||
ALLEGRO_KEY_H|||
ALLEGRO_KEY_I|||
ALLEGRO_KEY_J|||
ALLEGRO_KEY_K|||
ALLEGRO_KEY_L|||
ALLEGRO_KEY_M|||
ALLEGRO_KEY_N|||
ALLEGRO_KEY_O|||
ALLEGRO_KEY_P|||
ALLEGRO_KEY_Q|||
ALLEGRO_KEY_R|||
ALLEGRO_KEY_S|||
ALLEGRO_KEY_T|||
ALLEGRO_KEY_U|||
ALLEGRO_KEY_V|||
ALLEGRO_KEY_W|||
ALLEGRO_KEY_X|||
ALLEGRO_KEY_Y|||
ALLEGRO_KEY_Z|||
ALLEGRO_KEY_0|||
ALLEGRO_KEY_1|||
ALLEGRO_KEY_2|||
ALLEGRO_KEY_3|||
ALLEGRO_KEY_4|||
ALLEGRO_KEY_5|||
ALLEGRO_KEY_6|||
ALLEGRO_KEY_7|||
ALLEGRO_KEY_8|||
ALLEGRO_KEY_9|||
ALLEGRO_KEY_PAD_0|||
ALLEGRO_KEY_PAD_1|||
ALLEGRO_KEY_PAD_2|||
ALLEGRO_KEY_PAD_3|||
ALLEGRO_KEY_PAD_4|||
ALLEGRO_KEY_PAD_5|||
ALLEGRO_KEY_PAD_6|||
ALLEGRO_KEY_PAD_7|||
ALLEGRO_KEY_PAD_8|||
ALLEGRO_KEY_PAD_9|||
ALLEGRO_KEY_F1|||
ALLEGRO_KEY_F2|||
ALLEGRO_KEY_F3|||
ALLEGRO_KEY_F4|||
ALLEGRO_KEY_F5|||
ALLEGRO_KEY_F6|||
ALLEGRO_KEY_F7|||
ALLEGRO_KEY_F8|||
ALLEGRO_KEY_F9|||
ALLEGRO_KEY_F10|||
ALLEGRO_KEY_F11|||
ALLEGRO_KEY_F12|||
ALLEGRO_KEY_ESCAPE|||
ALLEGRO_KEY_TILDE|||
ALLEGRO_KEY_MINUS|||
ALLEGRO_KEY_EQUALS|||
ALLEGRO_KEY_BACKSPACE|||
ALLEGRO_KEY_TAB|||
ALLEGRO_KEY_OPENBRACE|||
ALLEGRO_KEY_CLOSEBRACE|||
ALLEGRO_KEY_ENTER|||
ALLEGRO_KEY_SEMICOLON|||
ALLEGRO_KEY_QUOTE|||
ALLEGRO_KEY_BACKSLASH|||
ALLEGRO_KEY_BACKSLASH2|||
ALLEGRO_KEY_COMMA|||
ALLEGRO_KEY_FULLSTOP|||
ALLEGRO_KEY_SLASH|||
ALLEGRO_KEY_SPACE|||
ALLEGRO_KEY_INSERT|||
ALLEGRO_KEY_DELETE|||
ALLEGRO_KEY_HOME|||
ALLEGRO_KEY_END|||
ALLEGRO_KEY_PGUP|||
ALLEGRO_KEY_PGDN|||
ALLEGRO_KEY_LEFT|||
ALLEGRO_KEY_RIGHT|||
ALLEGRO_KEY_UP|||
ALLEGRO_KEY_DOWN|||
ALLEGRO_KEY_PAD_SLASH|||
ALLEGRO_KEY_PAD_ASTERISK|||
ALLEGRO_KEY_PAD_MINUS|||
ALLEGRO_KEY_PAD_PLUS|||
ALLEGRO_KEY_PAD_DELETE|||
ALLEGRO_KEY_PAD_ENTER|||
ALLEGRO_KEY_PRINTSCREEN|||
ALLEGRO_KEY_PAUSE|||
ALLEGRO_KEY_ABNT_C1|||
ALLEGRO_KEY_YEN|||
ALLEGRO_KEY_KANA|||
ALLEGRO_KEY_CONVERT|||
ALLEGRO_KEY_NOCONVERT|||
ALLEGRO_KEY_AT|||
ALLEGRO_KEY_CIRCUMFLEX|||
ALLEGRO_KEY_COLON2|||
ALLEGRO_KEY_KANJI|||
ALLEGRO_KEY_PAD_EQUALS|||
ALLEGRO_KEY_BACKQUOTE|||
ALLEGRO_KEY_SEMICOLON2|||
ALLEGRO_KEY_COMMAND|||
ALLEGRO_KEY_BACK|||
ALLEGRO_KEY_VOLUME_UP|||
ALLEGRO_KEY_VOLUME_DOWN|||
ALLEGRO_KEY_SEARCH|||
ALLEGRO_KEY_DPAD_CENTER|||
ALLEGRO_KEY_BUTTON_X|||
ALLEGRO_KEY_BUTTON_Y|||
ALLEGRO_KEY_DPAD_UP|||
ALLEGRO_KEY_DPAD_DOWN|||
ALLEGRO_KEY_DPAD_LEFT|||
ALLEGRO_KEY_DPAD_RIGHT|||
ALLEGRO_KEY_SELECT|||
ALLEGRO_KEY_START|||
ALLEGRO_KEY_BUTTON_L1|||
ALLEGRO_KEY_BUTTON_R1|||
ALLEGRO_KEY_BUTTON_L2|||
ALLEGRO_KEY_BUTTON_R2|||
ALLEGRO_KEY_BUTTON_A|||
ALLEGRO_KEY_BUTTON_B|||
ALLEGRO_KEY_THUMBL|||
ALLEGRO_KEY_THUMBR|||
ALLEGRO_KEY_UNKNOWN|||
ALLEGRO_KEY_MODIFIERS|||
ALLEGRO_KEY_LSHIFT|||
ALLEGRO_KEY_RSHIFT|||
ALLEGRO_KEY_LCTRL|||
ALLEGRO_KEY_RCTRL|||
ALLEGRO_KEY_ALT|||
ALLEGRO_KEY_ALTGR|||
ALLEGRO_KEY_LWIN|||
ALLEGRO_KEY_RWIN|||
ALLEGRO_KEY_MENU|||
ALLEGRO_KEY_SCROLLLOCK|||
ALLEGRO_KEY_NUMLOCK|||
ALLEGRO_KEY_CAPSLOCK|||
ALLEGRO_KEY_MAX|||
ALLEGRO_KEYMOD_SHIFT|||
ALLEGRO_KEYMOD_CTRL|||
ALLEGRO_KEYMOD_ALT|||
ALLEGRO_KEYMOD_LWIN|||
ALLEGRO_KEYMOD_RWIN|||
ALLEGRO_KEYMOD_MENU|||
ALLEGRO_KEYMOD_ALTGR|||
ALLEGRO_KEYMOD_COMMAND|||
ALLEGRO_KEYMOD_SCROLLLOCK|||
ALLEGRO_KEYMOD_NUMLOCK|||
ALLEGRO_KEYMOD_CAPSLOCK|||
ALLEGRO_KEYMOD_INALTSEQ|||
ALLEGRO_KEYMOD_ACCENT1|||
ALLEGRO_KEYMOD_ACCENT2|||
ALLEGRO_KEYMOD_ACCENT3|||
ALLEGRO_KEYMOD_ACCENT4|||
ALLEGRO_MEMORY_INTERFACE|||
al_set_memory_interface|void|(ALLEGRO_MEMORY_INTERFACE *iface)|
al_malloc||(n)|
al_free||(p)|
al_realloc||(p, n)|
al_calloc||(c, n)|
al_malloc_with_context|void *|(size_t n, int line, const char *file, const char *func)|
al_free_with_context|void|(void *ptr, int line, const char *file, const char *func)|
al_realloc_with_context|void *|(void *ptr, size_t n, int line, const char *file, const char *func)|
al_calloc_with_context|void *|(size_t count, size_t n, int line, const char *file, const char *func)|
ALLEGRO_MONITOR_INFO|||
ALLEGRO_DEFAULT_DISPLAY_ADAPTER|||
al_get_num_video_adapters|int|(void)|
al_get_monitor_info|bool|(int adapter, ALLEGRO_MONITOR_INFO *info)|
al_get_monitor_dpi|int|(int adapter)|
ALLEGRO_MOUSE_MAX_EXTRA_AXES|||
ALLEGRO_MOUSE|||
ALLEGRO_MOUSE_STATE|||
al_is_mouse_installed|bool|(void)|
al_install_mouse|bool|(void)|
al_uninstall_mouse|void|(void)|
al_get_mouse_num_buttons|unsigned int|(void)|
al_get_mouse_num_axes|unsigned int|(void)|
al_set_mouse_xy|bool|(struct ALLEGRO_DISPLAY *display, int x, int y)|
al_set_mouse_z|bool|(int z)|
al_set_mouse_w|bool|(int w)|
al_set_mouse_axis|bool|(int axis, int value)|
al_get_mouse_state|void|(ALLEGRO_MOUSE_STATE *ret_state)|
al_mouse_button_down|bool|(const ALLEGRO_MOUSE_STATE *state, int button)|
al_get_mouse_state_axis|int|(const ALLEGRO_MOUSE_STATE *state, int axis)|
al_get_mouse_cursor_position|bool|(int *ret_x, int *ret_y)|
al_grab_mouse|bool|(struct ALLEGRO_DISPLAY *display)|
al_ungrab_mouse|bool|(void)|
al_set_mouse_wheel_precision|void|(int precision)|
al_get_mouse_wheel_precision|int|(void)|
al_get_mouse_event_source|ALLEGRO_EVENT_SOURCE *|(void)|
ALLEGRO_SYSTEM_MOUSE_CURSOR|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT|||
ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE|||
ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS|||
al_create_mouse_cursor|ALLEGRO_MOUSE_CURSOR *|(struct ALLEGRO_BITMAP *sprite, int xfocus, int yfocus)|
al_destroy_mouse_cursor|void|(ALLEGRO_MOUSE_CURSOR *)|
al_set_mouse_cursor|bool|(struct ALLEGRO_DISPLAY *display, ALLEGRO_MOUSE_CURSOR *cursor)|
al_set_system_mouse_cursor|bool|(struct ALLEGRO_DISPLAY *display, ALLEGRO_SYSTEM_MOUSE_CURSOR cursor_id)|
al_show_mouse_cursor|bool|(struct ALLEGRO_DISPLAY *display)|
al_hide_mouse_cursor|bool|(struct ALLEGRO_DISPLAY *display)|
ALLEGRO_NATIVE_PATH_SEP|||
ALLEGRO_NATIVE_DRIVE_SEP|||
ALLEGRO_PATH|||
al_create_path|ALLEGRO_PATH*|(const char *str)|
al_create_path_for_directory|ALLEGRO_PATH*|(const char *str)|
al_clone_path|ALLEGRO_PATH*|(const ALLEGRO_PATH *path)|
al_get_path_num_components|int|(const ALLEGRO_PATH *path)|
al_get_path_component|const char*|(const ALLEGRO_PATH *path, int i)|
al_replace_path_component|void|(ALLEGRO_PATH *path, int i, const char *s)|
al_remove_path_component|void|(ALLEGRO_PATH *path, int i)|
al_insert_path_component|void|(ALLEGRO_PATH *path, int i, const char *s)|
al_get_path_tail|const char*|(const ALLEGRO_PATH *path)|
al_drop_path_tail|void|(ALLEGRO_PATH *path)|
al_append_path_component|void|(ALLEGRO_PATH *path, const char *s)|
al_join_paths|bool|(ALLEGRO_PATH *path, const ALLEGRO_PATH *tail)|
al_rebase_path|bool|(const ALLEGRO_PATH *head, ALLEGRO_PATH *tail)|
al_path_cstr|const char*|(const ALLEGRO_PATH *path, char delim)|
al_path_ustr|const ALLEGRO_USTR*|(const ALLEGRO_PATH *path, char delim)|
al_destroy_path|void|(ALLEGRO_PATH *path)|
al_set_path_drive|void|(ALLEGRO_PATH *path, const char *drive)|
al_get_path_drive|const char*|(const ALLEGRO_PATH *path)|
al_set_path_filename|void|(ALLEGRO_PATH *path, const char *filename)|
al_get_path_filename|const char*|(const ALLEGRO_PATH *path)|
al_get_path_extension|const char*|(const ALLEGRO_PATH *path)|
al_set_path_extension|bool|(ALLEGRO_PATH *path, char const *extension)|
al_get_path_basename|const char*|(const ALLEGRO_PATH *path)|
al_make_path_canonical|bool|(ALLEGRO_PATH *path)|
ALLEGRO_RENDER_STATE|||
ALLEGRO_ALPHA_TEST|||
ALLEGRO_WRITE_MASK|||
ALLEGRO_DEPTH_TEST|||
ALLEGRO_DEPTH_FUNCTION|||
ALLEGRO_ALPHA_FUNCTION|||
ALLEGRO_ALPHA_TEST_VALUE|||
ALLEGRO_RENDER_FUNCTION|||
ALLEGRO_RENDER_NEVER|||
ALLEGRO_RENDER_ALWAYS|||
ALLEGRO_RENDER_LESS|||
ALLEGRO_RENDER_EQUAL|||
ALLEGRO_RENDER_LESS_EQUAL|||
ALLEGRO_RENDER_GREATER|||
ALLEGRO_RENDER_NOT_EQUAL|||
ALLEGRO_RENDER_GREATER_EQUAL|||
ALLEGRO_WRITE_MASK_FLAGS|||
ALLEGRO_MASK_RED|||
ALLEGRO_MASK_GREEN|||
ALLEGRO_MASK_BLUE|||
ALLEGRO_MASK_ALPHA|||
ALLEGRO_MASK_DEPTH|||
ALLEGRO_MASK_RGB|||
ALLEGRO_MASK_RGBA|||
al_set_render_state|void|(ALLEGRO_RENDER_STATE state, int value)|
ALLEGRO_SHADER|||
ALLEGRO_SHADER_TYPE|||
ALLEGRO_VERTEX_SHADER|||
ALLEGRO_PIXEL_SHADER|||
ALLEGRO_SHADER_PLATFORM|||
ALLEGRO_SHADER_AUTO|||
ALLEGRO_SHADER_GLSL|||
ALLEGRO_SHADER_HLSL|||
ALLEGRO_SHADER_VAR_COLOR|||
ALLEGRO_SHADER_VAR_POS|||
ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX|||
ALLEGRO_SHADER_VAR_TEX|||
ALLEGRO_SHADER_VAR_TEXCOORD|||
ALLEGRO_SHADER_VAR_TEX_MATRIX|||
ALLEGRO_SHADER_VAR_USER_ATTR|||
ALLEGRO_SHADER_VAR_USE_TEX|||
ALLEGRO_SHADER_VAR_USE_TEX_MATRIX|||
ALLEGRO_SHADER_VAR_ALPHA_TEST|||
ALLEGRO_SHADER_VAR_ALPHA_FUNCTION|||
ALLEGRO_SHADER_VAR_ALPHA_TEST_VALUE|||
al_create_shader|ALLEGRO_SHADER *|(ALLEGRO_SHADER_PLATFORM platform)|
al_attach_shader_source|bool|(ALLEGRO_SHADER *shader, ALLEGRO_SHADER_TYPE type, const char *source)|
al_attach_shader_source_file|bool|(ALLEGRO_SHADER *shader, ALLEGRO_SHADER_TYPE type, const char *filename)|
al_build_shader|bool|(ALLEGRO_SHADER *shader)|
al_get_shader_log|const char *|(ALLEGRO_SHADER *shader)|
al_get_shader_platform|ALLEGRO_SHADER_PLATFORM|(ALLEGRO_SHADER *shader)|
al_use_shader|bool|(ALLEGRO_SHADER *shader)|
al_destroy_shader|void|(ALLEGRO_SHADER *shader)|
al_set_shader_sampler|bool|(const char *name, ALLEGRO_BITMAP *bitmap, int unit)|
al_set_shader_matrix|bool|(const char *name, const ALLEGRO_TRANSFORM *matrix)|
al_set_shader_int|bool|(const char *name, int i)|
al_set_shader_float|bool|(const char *name, float f)|
al_set_shader_int_vector|bool|(const char *name, int num_components, const int *i, int num_elems)|
al_set_shader_float_vector|bool|(const char *name, int num_components, const float *f, int num_elems)|
al_set_shader_bool|bool|(const char *name, bool b)|
al_get_default_shader_source|char const *|(ALLEGRO_SHADER_PLATFORM platform, ALLEGRO_SHADER_TYPE type)|
ALLEGRO_SYSTEM_ID|||
ALLEGRO_SYSTEM_ID_UNKNOWN|||
ALLEGRO_SYSTEM_ID_XGLX|||
ALLEGRO_SYSTEM_ID_WINDOWS|||
ALLEGRO_SYSTEM_ID_MACOSX|||
ALLEGRO_SYSTEM_ID_ANDROID|||
ALLEGRO_SYSTEM_ID_IPHONE|||
ALLEGRO_SYSTEM_ID_GP2XWIZ|||
ALLEGRO_SYSTEM_ID_RASPBERRYPI|||
ALLEGRO_SYSTEM_ID_SDL|||
al_init|||
al_install_system|bool|(int version, int (*atexit_ptr)(void (*)(void)))|
al_uninstall_system|void|(void)|
al_is_system_installed|bool|(void)|
al_get_system_driver|ALLEGRO_SYSTEM *|(void)|
al_get_system_config|ALLEGRO_CONFIG *|(void)|
al_get_system_id|ALLEGRO_SYSTEM_ID|(void)|
ALLEGRO_RESOURCES_PATH|||
ALLEGRO_TEMP_PATH|||
ALLEGRO_USER_DATA_PATH|||
ALLEGRO_USER_HOME_PATH|||
ALLEGRO_USER_SETTINGS_PATH|||
ALLEGRO_USER_DOCUMENTS_PATH|||
ALLEGRO_EXENAME_PATH|||
ALLEGRO_LAST_PATH|||
al_get_standard_path|ALLEGRO_PATH *|(int id)|
al_set_exe_name|void|(char const *path)|
al_set_org_name|void|(const char *org_name)|
al_set_app_name|void|(const char *app_name)|
al_get_org_name|const char *|(void)|
al_get_app_name|const char *|(void)|
al_inhibit_screensaver|bool|(bool inhibit)|
ALLEGRO_THREAD|||
ALLEGRO_MUTEX|||
ALLEGRO_COND|||
al_create_thread|ALLEGRO_THREAD *|(void *(*proc)(ALLEGRO_THREAD *thread, void *arg), void *arg)|
al_create_thread_with_stacksize|ALLEGRO_THREAD *|(void *(*proc)(ALLEGRO_THREAD *thread, void *arg), void *arg, size_t stacksize)|
al_start_thread|void|(ALLEGRO_THREAD *outer)|
al_join_thread|void|(ALLEGRO_THREAD *outer, void **ret_value)|
al_set_thread_should_stop|void|(ALLEGRO_THREAD *outer)|
al_get_thread_should_stop|bool|(ALLEGRO_THREAD *outer)|
al_destroy_thread|void|(ALLEGRO_THREAD *thread)|
al_run_detached_thread|void|(void *(*proc)(void *arg), void *arg)|
al_create_mutex|ALLEGRO_MUTEX *|(void)|
al_create_mutex_recursive|ALLEGRO_MUTEX *|(void)|
al_lock_mutex|void|(ALLEGRO_MUTEX *mutex)|
al_unlock_mutex|void|(ALLEGRO_MUTEX *mutex)|
al_destroy_mutex|void|(ALLEGRO_MUTEX *mutex)|
al_create_cond|ALLEGRO_COND *|(void)|
al_destroy_cond|void|(ALLEGRO_COND *cond)|
al_wait_cond|void|(ALLEGRO_COND *cond, ALLEGRO_MUTEX *mutex)|
al_wait_cond_until|int|(ALLEGRO_COND *cond, ALLEGRO_MUTEX *mutex, const ALLEGRO_TIMEOUT *timeout)|
al_broadcast_cond|void|(ALLEGRO_COND *cond)|
al_signal_cond|void|(ALLEGRO_COND *cond)|
ALLEGRO_USECS_TO_SECS||(x)|
ALLEGRO_MSECS_TO_SECS||(x)|
ALLEGRO_BPS_TO_SECS||(x)|
ALLEGRO_BPM_TO_SECS||(x)|
ALLEGRO_TIMER|||
al_create_timer|ALLEGRO_TIMER*|(double speed_secs)|
al_destroy_timer|void|(ALLEGRO_TIMER *timer)|
al_start_timer|void|(ALLEGRO_TIMER *timer)|
al_stop_timer|void|(ALLEGRO_TIMER *timer)|
al_resume_timer|void|(ALLEGRO_TIMER *timer)|
al_get_timer_started|bool|(const ALLEGRO_TIMER *timer)|
al_get_timer_speed|double|(const ALLEGRO_TIMER *timer)|
al_set_timer_speed|void|(ALLEGRO_TIMER *timer, double speed_secs)|
al_get_timer_count|int64_t|(const ALLEGRO_TIMER *timer)|
al_set_timer_count|void|(ALLEGRO_TIMER *timer, int64_t count)|
al_add_timer_count|void|(ALLEGRO_TIMER *timer, int64_t diff)|
al_get_timer_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_TIMER *timer)|
ALLEGRO_STATE_FLAGS|||
ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS|||
ALLEGRO_STATE_NEW_BITMAP_PARAMETERS|||
ALLEGRO_STATE_DISPLAY|||
ALLEGRO_STATE_TARGET_BITMAP|||
ALLEGRO_STATE_BLENDER|||
ALLEGRO_STATE_NEW_FILE_INTERFACE|||
ALLEGRO_STATE_TRANSFORM|||
ALLEGRO_STATE_PROJECTION_TRANSFORM|||
ALLEGRO_STATE_BITMAP|||
ALLEGRO_STATE_ALL|||
ALLEGRO_STATE|||
al_store_state|void|(ALLEGRO_STATE *state, int flags)|
al_restore_state|void|(ALLEGRO_STATE const *state)|
ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT|||
ALLEGRO_TOUCH_INPUT|||
ALLEGRO_TOUCH_INPUT_STATE|||
ALLEGRO_TOUCH_STATE|||
ALLEGRO_MOUSE_EMULATION_MODE|||
ALLEGRO_MOUSE_EMULATION_NONE|||
ALLEGRO_MOUSE_EMULATION_TRANSPARENT|||
ALLEGRO_MOUSE_EMULATION_INCLUSIVE|||
ALLEGRO_MOUSE_EMULATION_EXCLUSIVE|||
ALLEGRO_MOUSE_EMULATION_5_0_x|||
al_is_touch_input_installed|bool|(void)|
al_install_touch_input|bool|(void)|
al_uninstall_touch_input|void|(void)|
al_get_touch_input_state|void|(ALLEGRO_TOUCH_INPUT_STATE *ret_state)|
al_get_touch_input_event_source|ALLEGRO_EVENT_SOURCE *|(void)|
al_set_mouse_emulation_mode|void|(int mode)|
al_get_mouse_emulation_mode|int|(void)|
al_get_touch_input_mouse_emulation_event_source|ALLEGRO_EVENT_SOURCE *|(void)|
ALLEGRO_TRANSFORM|||
al_use_transform|void|(const ALLEGRO_TRANSFORM* trans)|
al_use_projection_transform|void|(const ALLEGRO_TRANSFORM* trans)|
al_copy_transform|void|(ALLEGRO_TRANSFORM* dest, const ALLEGRO_TRANSFORM* src)|
al_identity_transform|void|(ALLEGRO_TRANSFORM* trans)|
al_build_transform|void|(ALLEGRO_TRANSFORM* trans, float x, float y, float sx, float sy, float theta)|
al_build_camera_transform|void|(ALLEGRO_TRANSFORM *trans, float position_x, float position_y, float position_z, float look_x, float look_y, float look_z, float up_x, float up_y, float up_z)|
al_translate_transform|void|(ALLEGRO_TRANSFORM* trans, float x, float y)|
al_translate_transform_3d|void|(ALLEGRO_TRANSFORM *trans, float x, float y, float z)|
al_rotate_transform|void|(ALLEGRO_TRANSFORM* trans, float theta)|
al_rotate_transform_3d|void|(ALLEGRO_TRANSFORM *trans, float x, float y, float z, float angle)|
al_scale_transform|void|(ALLEGRO_TRANSFORM* trans, float sx, float sy)|
al_scale_transform_3d|void|(ALLEGRO_TRANSFORM *trans, float sx, float sy, float sz)|
al_transform_coordinates|void|(const ALLEGRO_TRANSFORM* trans, float* x, float* y)|
al_transform_coordinates_3d|void|(const ALLEGRO_TRANSFORM *trans, float *x, float *y, float *z)|
al_transform_coordinates_4d|void|(const ALLEGRO_TRANSFORM *trans, float *x, float *y, float *z, float *w)|
al_transform_coordinates_3d_projective|void|(const ALLEGRO_TRANSFORM *trans, float *x, float *y, float *z)|
al_compose_transform|void|(ALLEGRO_TRANSFORM* trans, const ALLEGRO_TRANSFORM* other)|
al_get_current_transform|const ALLEGRO_TRANSFORM*|(void)|
al_get_current_inverse_transform|const ALLEGRO_TRANSFORM*|(void)|
al_get_current_projection_transform|const ALLEGRO_TRANSFORM *|(void)|
al_invert_transform|void|(ALLEGRO_TRANSFORM *trans)|
al_transpose_transform|void|(ALLEGRO_TRANSFORM *trans)|
al_check_inverse|int|(const ALLEGRO_TRANSFORM *trans, float tol)|
al_orthographic_transform|void|(ALLEGRO_TRANSFORM *trans, float left, float top, float n, float right, float bottom, float f)|
al_perspective_transform|void|(ALLEGRO_TRANSFORM *trans, float left, float top, float n, float right, float bottom, float f)|
al_horizontal_shear_transform|void|(ALLEGRO_TRANSFORM *trans, float theta)|
al_vertical_shear_transform|void|(ALLEGRO_TRANSFORM *trans, float theta)|
ALLEGRO_USTR|||
ALLEGRO_USTR_INFO|||
_al_tagbstring|||
al_ustr_new|ALLEGRO_USTR *|(const char *s)|
al_ustr_new_from_buffer|ALLEGRO_USTR *|(const char *s, size_t size)|
al_ustr_newf|ALLEGRO_USTR *|(const char *fmt, ...)|
al_ustr_free|void|(ALLEGRO_USTR *us)|
al_cstr|const char *|(const ALLEGRO_USTR *us)|
al_ustr_to_buffer|void|(const ALLEGRO_USTR *us, char *buffer, int size)|
al_cstr_dup|char *|(const ALLEGRO_USTR *us)|
al_ustr_dup|ALLEGRO_USTR *|(const ALLEGRO_USTR *us)|
al_ustr_dup_substr|ALLEGRO_USTR *|(const ALLEGRO_USTR *us, int start_pos, int end_pos)|
al_ustr_empty_string|const ALLEGRO_USTR *|(void)|
al_ref_cstr|const ALLEGRO_USTR *|(ALLEGRO_USTR_INFO *info, const char *s)|
al_ref_buffer|const ALLEGRO_USTR *|(ALLEGRO_USTR_INFO *info, const char *s, size_t size)|
al_ref_ustr|const ALLEGRO_USTR *|(ALLEGRO_USTR_INFO *info, const ALLEGRO_USTR *us, int start_pos, int end_pos)|
al_ustr_size|size_t|(const ALLEGRO_USTR *us)|
al_ustr_length|size_t|(const ALLEGRO_USTR *us)|
al_ustr_offset|int|(const ALLEGRO_USTR *us, int index)|
al_ustr_next|bool|(const ALLEGRO_USTR *us, int *pos)|
al_ustr_prev|bool|(const ALLEGRO_USTR *us, int *pos)|
al_ustr_get|int32_t|(const ALLEGRO_USTR *us, int pos)|
al_ustr_get_next|int32_t|(const ALLEGRO_USTR *us, int *pos)|
al_ustr_prev_get|int32_t|(const ALLEGRO_USTR *us, int *pos)|
al_ustr_insert|bool|(ALLEGRO_USTR *us1, int pos, const ALLEGRO_USTR *us2)|
al_ustr_insert_cstr|bool|(ALLEGRO_USTR *us, int pos, const char *us2)|
al_ustr_insert_chr|size_t|(ALLEGRO_USTR *us, int pos, int32_t c)|
al_ustr_append|bool|(ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2)|
al_ustr_append_cstr|bool|(ALLEGRO_USTR *us, const char *s)|
al_ustr_append_chr|size_t|(ALLEGRO_USTR *us, int32_t c)|
al_ustr_appendf|bool|(ALLEGRO_USTR *us, const char *fmt, ...)|
al_ustr_vappendf|bool|(ALLEGRO_USTR *us, const char *fmt, va_list ap)|
al_ustr_remove_chr|bool|(ALLEGRO_USTR *us, int pos)|
al_ustr_remove_range|bool|(ALLEGRO_USTR *us, int start_pos, int end_pos)|
al_ustr_truncate|bool|(ALLEGRO_USTR *us, int start_pos)|
al_ustr_ltrim_ws|bool|(ALLEGRO_USTR *us)|
al_ustr_rtrim_ws|bool|(ALLEGRO_USTR *us)|
al_ustr_trim_ws|bool|(ALLEGRO_USTR *us)|
al_ustr_assign|bool|(ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2)|
al_ustr_assign_substr|bool|(ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2, int start_pos, int end_pos)|
al_ustr_assign_cstr|bool|(ALLEGRO_USTR *us1, const char *s)|
al_ustr_set_chr|size_t|(ALLEGRO_USTR *us, int pos, int32_t c)|
al_ustr_replace_range|bool|(ALLEGRO_USTR *us1, int start_pos1, int end_pos1, const ALLEGRO_USTR *us2)|
al_ustr_find_chr|int|(const ALLEGRO_USTR *us, int start_pos, int32_t c)|
al_ustr_rfind_chr|int|(const ALLEGRO_USTR *us, int start_pos, int32_t c)|
al_ustr_find_set|int|(const ALLEGRO_USTR *us, int start_pos, const ALLEGRO_USTR *accept)|
al_ustr_find_set_cstr|int|(const ALLEGRO_USTR *us, int start_pos, const char *accept)|
al_ustr_find_cset|int|(const ALLEGRO_USTR *us, int start_pos, const ALLEGRO_USTR *reject)|
al_ustr_find_cset_cstr|int|(const ALLEGRO_USTR *us, int start_pos, const char *reject)|
al_ustr_find_str|int|(const ALLEGRO_USTR *haystack, int start_pos, const ALLEGRO_USTR *needle)|
al_ustr_find_cstr|int|(const ALLEGRO_USTR *haystack, int start_pos, const char *needle)|
al_ustr_rfind_str|int|(const ALLEGRO_USTR *haystack, int start_pos, const ALLEGRO_USTR *needle)|
al_ustr_rfind_cstr|int|(const ALLEGRO_USTR *haystack, int start_pos, const char *needle)|
al_ustr_find_replace|bool|(ALLEGRO_USTR *us, int start_pos, const ALLEGRO_USTR *find, const ALLEGRO_USTR *replace)|
al_ustr_find_replace_cstr|bool|(ALLEGRO_USTR *us, int start_pos, const char *find, const char *replace)|
al_ustr_equal|bool|(const ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2)|
al_ustr_compare|int|(const ALLEGRO_USTR *u, const ALLEGRO_USTR *v)|
al_ustr_ncompare|int|(const ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2, int n)|
al_ustr_has_prefix|bool|(const ALLEGRO_USTR *u, const ALLEGRO_USTR *v)|
al_ustr_has_prefix_cstr|bool|(const ALLEGRO_USTR *u, const char *s)|
al_ustr_has_suffix|bool|(const ALLEGRO_USTR *u, const ALLEGRO_USTR *v)|
al_ustr_has_suffix_cstr|bool|(const ALLEGRO_USTR *us1, const char *s)|
al_utf8_width|size_t|(int32_t c)|
al_utf8_encode|size_t|(char s[], int32_t c)|
al_ustr_new_from_utf16|ALLEGRO_USTR *|(uint16_t const *s)|
al_ustr_size_utf16|size_t|(const ALLEGRO_USTR *us)|
al_ustr_encode_utf16|size_t|(const ALLEGRO_USTR *us, uint16_t *s, size_t n)|
al_utf16_width|size_t|(int c)|
al_utf16_encode|size_t|(uint16_t s[], int32_t c)|
ALLEGRO_DST_COLOR|||
ALLEGRO_INVERSE_DST_COLOR|||
al_convert_bitmaps|||
al_current_time|||
al_event_queue_is_empty||(q)|
al_toggle_display_flag||(d, f, o)|
al_init_acodec_addon|bool|(void)|
al_is_acodec_addon_initialized|bool|(void)|
al_get_allegro_acodec_version|uint32_t|(void)|
ALLEGRO_KCM_AUDIO_SRC|||
ALLEGRO_AUDIO_EVENT_TYPE|||
_KCM_STREAM_FEEDER_QUIT_EVENT_TYPE|||
ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT|||
ALLEGRO_EVENT_AUDIO_STREAM_FINISHED|||
ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT|||
ALLEGRO_AUDIO_RECORDER_EVENT|||
ALLEGRO_AUDIO_DEPTH|||
ALLEGRO_AUDIO_DEPTH_INT8|||
ALLEGRO_AUDIO_DEPTH_INT16|||
ALLEGRO_AUDIO_DEPTH_INT24|||
ALLEGRO_AUDIO_DEPTH_FLOAT32|||
ALLEGRO_AUDIO_DEPTH_UNSIGNED|||
ALLEGRO_AUDIO_DEPTH_UINT8|||
ALLEGRO_AUDIO_DEPTH_UINT16|||
ALLEGRO_AUDIO_DEPTH_UINT24|||
ALLEGRO_CHANNEL_CONF|||
ALLEGRO_CHANNEL_CONF_1|||
ALLEGRO_CHANNEL_CONF_2|||
ALLEGRO_CHANNEL_CONF_3|||
ALLEGRO_CHANNEL_CONF_4|||
ALLEGRO_CHANNEL_CONF_5_1|||
ALLEGRO_CHANNEL_CONF_6_1|||
ALLEGRO_CHANNEL_CONF_7_1|||
ALLEGRO_MAX_CHANNELS|||
ALLEGRO_PLAYMODE|||
ALLEGRO_PLAYMODE_ONCE|||
ALLEGRO_PLAYMODE_LOOP|||
ALLEGRO_PLAYMODE_BIDIR|||
_ALLEGRO_PLAYMODE_STREAM_ONCE|||
_ALLEGRO_PLAYMODE_STREAM_ONEDIR|||
ALLEGRO_MIXER_QUALITY|||
ALLEGRO_MIXER_QUALITY_POINT|||
ALLEGRO_MIXER_QUALITY_LINEAR|||
ALLEGRO_MIXER_QUALITY_CUBIC|||
ALLEGRO_AUDIO_PAN_NONE|||
ALLEGRO_SAMPLE|||
ALLEGRO_SAMPLE_ID|||
ALLEGRO_SAMPLE_INSTANCE|||
ALLEGRO_AUDIO_STREAM|||
ALLEGRO_MIXER|||
ALLEGRO_VOICE|||
ALLEGRO_AUDIO_RECORDER|||
al_create_sample|ALLEGRO_SAMPLE *|(void *buf, unsigned int samples, unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf, bool free_buf)|
al_destroy_sample|void|(ALLEGRO_SAMPLE *spl)|
al_create_sample_instance|ALLEGRO_SAMPLE_INSTANCE*|(ALLEGRO_SAMPLE *data)|
al_destroy_sample_instance|void|(ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_frequency|unsigned int|(const ALLEGRO_SAMPLE *spl)|
al_get_sample_length|unsigned int|(const ALLEGRO_SAMPLE *spl)|
al_get_sample_depth|ALLEGRO_AUDIO_DEPTH|(const ALLEGRO_SAMPLE *spl)|
al_get_sample_channels|ALLEGRO_CHANNEL_CONF|(const ALLEGRO_SAMPLE *spl)|
al_get_sample_data|void *|(const ALLEGRO_SAMPLE *spl)|
al_get_sample_instance_frequency|unsigned int|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_length|unsigned int|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_position|unsigned int|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_speed|float|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_gain|float|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_pan|float|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_time|float|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_depth|ALLEGRO_AUDIO_DEPTH|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_channels|ALLEGRO_CHANNEL_CONF|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_playmode|ALLEGRO_PLAYMODE|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_playing|bool|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_get_sample_instance_attached|bool|(const ALLEGRO_SAMPLE_INSTANCE *spl)|
al_set_sample_instance_position|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, unsigned int val)|
al_set_sample_instance_length|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, unsigned int val)|
al_set_sample_instance_speed|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, float val)|
al_set_sample_instance_gain|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, float val)|
al_set_sample_instance_pan|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, float val)|
al_set_sample_instance_playmode|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, ALLEGRO_PLAYMODE val)|
al_set_sample_instance_playing|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, bool val)|
al_detach_sample_instance|bool|(ALLEGRO_SAMPLE_INSTANCE *spl)|
al_set_sample|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, ALLEGRO_SAMPLE *data)|
al_get_sample|ALLEGRO_SAMPLE *|(ALLEGRO_SAMPLE_INSTANCE *spl)|
al_play_sample_instance|bool|(ALLEGRO_SAMPLE_INSTANCE *spl)|
al_stop_sample_instance|bool|(ALLEGRO_SAMPLE_INSTANCE *spl)|
al_set_sample_instance_channel_matrix|bool|(ALLEGRO_SAMPLE_INSTANCE *spl, const float *matrix)|
al_create_audio_stream|ALLEGRO_AUDIO_STREAM*|(size_t buffer_count, unsigned int samples, unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf)|
al_destroy_audio_stream|void|(ALLEGRO_AUDIO_STREAM *stream)|
al_drain_audio_stream|void|(ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_frequency|unsigned int|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_length|unsigned int|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_fragments|unsigned int|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_available_audio_stream_fragments|unsigned int|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_speed|float|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_gain|float|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_pan|float|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_channels|ALLEGRO_CHANNEL_CONF|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_depth|ALLEGRO_AUDIO_DEPTH|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_playmode|ALLEGRO_PLAYMODE|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_playing|bool|(const ALLEGRO_AUDIO_STREAM *spl)|
al_get_audio_stream_attached|bool|(const ALLEGRO_AUDIO_STREAM *spl)|
al_get_audio_stream_played_samples|uint64_t|(const ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_fragment|void *|(const ALLEGRO_AUDIO_STREAM *stream)|
al_set_audio_stream_speed|bool|(ALLEGRO_AUDIO_STREAM *stream, float val)|
al_set_audio_stream_gain|bool|(ALLEGRO_AUDIO_STREAM *stream, float val)|
al_set_audio_stream_pan|bool|(ALLEGRO_AUDIO_STREAM *stream, float val)|
al_set_audio_stream_playmode|bool|(ALLEGRO_AUDIO_STREAM *stream, ALLEGRO_PLAYMODE val)|
al_set_audio_stream_playing|bool|(ALLEGRO_AUDIO_STREAM *stream, bool val)|
al_detach_audio_stream|bool|(ALLEGRO_AUDIO_STREAM *stream)|
al_set_audio_stream_fragment|bool|(ALLEGRO_AUDIO_STREAM *stream, void *val)|
al_rewind_audio_stream|bool|(ALLEGRO_AUDIO_STREAM *stream)|
al_seek_audio_stream_secs|bool|(ALLEGRO_AUDIO_STREAM *stream, double time)|
al_get_audio_stream_position_secs|double|(ALLEGRO_AUDIO_STREAM *stream)|
al_get_audio_stream_length_secs|double|(ALLEGRO_AUDIO_STREAM *stream)|
al_set_audio_stream_loop_secs|bool|(ALLEGRO_AUDIO_STREAM *stream, double start, double end)|
al_get_audio_stream_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_AUDIO_STREAM *stream)|
al_set_audio_stream_channel_matrix|bool|(ALLEGRO_AUDIO_STREAM *stream, const float *matrix)|
al_create_mixer|ALLEGRO_MIXER*|(unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf)|
al_destroy_mixer|void|(ALLEGRO_MIXER *mixer)|
al_attach_sample_instance_to_mixer|bool|(ALLEGRO_SAMPLE_INSTANCE *stream, ALLEGRO_MIXER *mixer)|
al_attach_audio_stream_to_mixer|bool|(ALLEGRO_AUDIO_STREAM *stream, ALLEGRO_MIXER *mixer)|
al_attach_mixer_to_mixer|bool|(ALLEGRO_MIXER *stream, ALLEGRO_MIXER *mixer)|
al_set_mixer_postprocess_callback|bool|(ALLEGRO_MIXER *mixer, void (*cb)(void *buf, unsigned int samples, void *data), void *data)|
al_get_mixer_frequency|unsigned int|(const ALLEGRO_MIXER *mixer)|
al_get_mixer_channels|ALLEGRO_CHANNEL_CONF|(const ALLEGRO_MIXER *mixer)|
al_get_mixer_depth|ALLEGRO_AUDIO_DEPTH|(const ALLEGRO_MIXER *mixer)|
al_get_mixer_quality|ALLEGRO_MIXER_QUALITY|(const ALLEGRO_MIXER *mixer)|
al_get_mixer_gain|float|(const ALLEGRO_MIXER *mixer)|
al_get_mixer_playing|bool|(const ALLEGRO_MIXER *mixer)|
al_get_mixer_attached|bool|(const ALLEGRO_MIXER *mixer)|
al_set_mixer_frequency|bool|(ALLEGRO_MIXER *mixer, unsigned int val)|
al_set_mixer_quality|bool|(ALLEGRO_MIXER *mixer, ALLEGRO_MIXER_QUALITY val)|
al_set_mixer_gain|bool|(ALLEGRO_MIXER *mixer, float gain)|
al_set_mixer_playing|bool|(ALLEGRO_MIXER *mixer, bool val)|
al_detach_mixer|bool|(ALLEGRO_MIXER *mixer)|
al_create_voice|ALLEGRO_VOICE*|(unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf)|
al_destroy_voice|void|(ALLEGRO_VOICE *voice)|
al_attach_sample_instance_to_voice|bool|(ALLEGRO_SAMPLE_INSTANCE *stream, ALLEGRO_VOICE *voice)|
al_attach_audio_stream_to_voice|bool|(ALLEGRO_AUDIO_STREAM *stream, ALLEGRO_VOICE *voice )|
al_attach_mixer_to_voice|bool|(ALLEGRO_MIXER *mixer, ALLEGRO_VOICE *voice)|
al_detach_voice|void|(ALLEGRO_VOICE *voice)|
al_get_voice_frequency|unsigned int|(const ALLEGRO_VOICE *voice)|
al_get_voice_position|unsigned int|(const ALLEGRO_VOICE *voice)|
al_get_voice_channels|ALLEGRO_CHANNEL_CONF|(const ALLEGRO_VOICE *voice)|
al_get_voice_depth|ALLEGRO_AUDIO_DEPTH|(const ALLEGRO_VOICE *voice)|
al_get_voice_playing|bool|(const ALLEGRO_VOICE *voice)|
al_set_voice_position|bool|(ALLEGRO_VOICE *voice, unsigned int val)|
al_set_voice_playing|bool|(ALLEGRO_VOICE *voice, bool val)|
al_install_audio|bool|(void)|
al_uninstall_audio|void|(void)|
al_is_audio_installed|bool|(void)|
al_get_allegro_audio_version|uint32_t|(void)|
al_get_channel_count|size_t|(ALLEGRO_CHANNEL_CONF conf)|
al_get_audio_depth_size|size_t|(ALLEGRO_AUDIO_DEPTH conf)|
al_fill_silence|void|(void *buf, unsigned int samples, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf)|
al_reserve_samples|bool|(int reserve_samples)|
al_get_default_mixer|ALLEGRO_MIXER *|(void)|
al_set_default_mixer|bool|(ALLEGRO_MIXER *mixer)|
al_restore_default_mixer|bool|(void)|
al_play_sample|bool|(ALLEGRO_SAMPLE *data, float gain, float pan, float speed, ALLEGRO_PLAYMODE loop, ALLEGRO_SAMPLE_ID *ret_id)|
al_stop_sample|void|(ALLEGRO_SAMPLE_ID *spl_id)|
al_stop_samples|void|(void)|
al_get_default_voice|ALLEGRO_VOICE *|(void)|
al_set_default_voice|void|(ALLEGRO_VOICE *voice)|
al_lock_sample_id|ALLEGRO_SAMPLE_INSTANCE*|(ALLEGRO_SAMPLE_ID *spl_id)|
al_unlock_sample_id|void|(ALLEGRO_SAMPLE_ID *spl_id)|
al_register_sample_loader|bool|(const char *ext, ALLEGRO_SAMPLE *(*loader)(const char *filename))|
al_register_sample_saver|bool|(const char *ext, bool (*saver)(const char *filename, ALLEGRO_SAMPLE *spl))|
al_register_audio_stream_loader|bool|(const char *ext, ALLEGRO_AUDIO_STREAM *(*stream_loader)(const char *filename, size_t buffer_count, unsigned int samples))|
al_register_sample_loader_f|bool|(const char *ext, ALLEGRO_SAMPLE *(*loader)(ALLEGRO_FILE *fp))|
al_register_sample_saver_f|bool|(const char *ext, bool (*saver)(ALLEGRO_FILE *fp, ALLEGRO_SAMPLE *spl))|
al_register_audio_stream_loader_f|bool|(const char *ext, ALLEGRO_AUDIO_STREAM *(*stream_loader)(ALLEGRO_FILE *fp, size_t buffer_count, unsigned int samples))|
al_load_sample|ALLEGRO_SAMPLE *|(const char *filename)|
al_save_sample|bool|(const char *filename, ALLEGRO_SAMPLE *spl)|
al_load_audio_stream|ALLEGRO_AUDIO_STREAM *|(const char *filename, size_t buffer_count, unsigned int samples)|
al_load_sample_f|ALLEGRO_SAMPLE *|(ALLEGRO_FILE* fp, const char *ident)|
al_save_sample_f|bool|(ALLEGRO_FILE* fp, const char *ident, ALLEGRO_SAMPLE *spl)|
al_load_audio_stream_f|ALLEGRO_AUDIO_STREAM *|(ALLEGRO_FILE* fp, const char *ident, size_t buffer_count, unsigned int samples)|
al_create_audio_recorder|ALLEGRO_AUDIO_RECORDER *|(size_t fragment_count, unsigned int samples, unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf)|
al_start_audio_recorder|bool|(ALLEGRO_AUDIO_RECORDER *r)|
al_stop_audio_recorder|void|(ALLEGRO_AUDIO_RECORDER *r)|
al_is_audio_recorder_recording|bool|(ALLEGRO_AUDIO_RECORDER *r)|
al_get_audio_recorder_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_AUDIO_RECORDER *r)|
al_get_audio_recorder_event|ALLEGRO_AUDIO_RECORDER_EVENT *|(ALLEGRO_EVENT *event)|
al_destroy_audio_recorder|void|(ALLEGRO_AUDIO_RECORDER *r)|
ALLEGRO_COLOR_SRC|||
al_get_allegro_color_version|uint32_t|(void)|
al_color_hsv_to_rgb|void|(float hue, float saturation, float value, float *red, float *green, float *blue)|
al_color_rgb_to_hsl|void|(float red, float green, float blue, float *hue, float *saturation, float *lightness)|
al_color_rgb_to_hsv|void|(float red, float green, float blue, float *hue, float *saturation, float *value)|
al_color_hsl_to_rgb|void|(float hue, float saturation, float lightness, float *red, float *green, float *blue)|
al_color_name_to_rgb|bool|(char const *name, float *r, float *g, float *b)|
al_color_rgb_to_name|const char*|(float r, float g, float b)|
al_color_cmyk_to_rgb|void|(float cyan, float magenta, float yellow, float key, float *red, float *green, float *blue)|
al_color_rgb_to_cmyk|void|(float red, float green, float blue, float *cyan, float *magenta, float *yellow, float *key)|
al_color_yuv_to_rgb|void|(float y, float u, float v, float *red, float *green, float *blue)|
al_color_rgb_to_yuv|void|(float red, float green, float blue, float *y, float *u, float *v)|
al_color_rgb_to_html|void|(float red, float green, float blue, char *string)|
al_color_html_to_rgb|bool|(char const *string, float *red, float *green, float *blue)|
al_color_yuv|ALLEGRO_COLOR|(float y, float u, float v)|
al_color_cmyk|ALLEGRO_COLOR|(float c, float m, float y, float k)|
al_color_hsl|ALLEGRO_COLOR|(float h, float s, float l)|
al_color_hsv|ALLEGRO_COLOR|(float h, float s, float v)|
al_color_name|ALLEGRO_COLOR|(char const *name)|
al_color_html|ALLEGRO_COLOR|(char const *string)|
al_color_xyz_to_rgb|void|(float x, float y, float z, float *red, float *green, float *blue)|
al_color_rgb_to_xyz|void|(float red, float green, float blue, float *x, float *y, float *z)|
al_color_xyz|ALLEGRO_COLOR|(float x, float y, float z)|
al_color_lab_to_rgb|void|(float l, float a, float b, float *red, float *green, float *blue)|
al_color_rgb_to_lab|void|(float red, float green, float blue, float *l, float *a, float *b)|
al_color_lab|ALLEGRO_COLOR|(float l, float a, float b)|
al_color_xyy_to_rgb|void|(float x, float y, float y2, float *red, float *green, float *blue)|
al_color_rgb_to_xyy|void|(float red, float green, float blue, float *x, float *y, float *y2)|
al_color_xyy|ALLEGRO_COLOR|(float x, float y, float y2)|
al_color_distance_ciede2000|double|(ALLEGRO_COLOR c1, ALLEGRO_COLOR c2)|
al_color_lch_to_rgb|void|(float l, float c, float h, float *red, float *green, float *blue)|
al_color_rgb_to_lch|void|(float red, float green, float blue, float *l, float *c, float *h)|
al_color_lch|ALLEGRO_COLOR|(float l, float c, float h)|
al_is_color_valid|bool|(ALLEGRO_COLOR color)|
ALLEGRO_DIRECT3D|||
al_get_d3d_device|LPDIRECT3DDEVICE9|(ALLEGRO_DISPLAY *)|
al_get_d3d_system_texture|LPDIRECT3DTEXTURE9|(ALLEGRO_BITMAP *)|
al_get_d3d_video_texture|LPDIRECT3DTEXTURE9|(ALLEGRO_BITMAP *)|
al_have_d3d_non_pow2_texture_support|bool|(void)|
al_have_d3d_non_square_texture_support|bool|(void)|
al_get_d3d_texture_position|void|(ALLEGRO_BITMAP *bitmap, int *u, int *v)|
al_get_d3d_texture_size|bool|(ALLEGRO_BITMAP *bitmap, int *width, int *height)|
al_is_d3d_device_lost|bool|(ALLEGRO_DISPLAY *display)|
al_set_d3d_device_release_callback|void|(void (*callback)(ALLEGRO_DISPLAY *display))|
al_set_d3d_device_restore_callback|void|(void (*callback)(ALLEGRO_DISPLAY *display))|
ALLEGRO_FONT_SRC|||
ALLEGRO_FONT|||
ALLEGRO_GLYPH|||
ALLEGRO_NO_KERNING|||
ALLEGRO_ALIGN_LEFT|||
ALLEGRO_ALIGN_CENTRE|||
ALLEGRO_ALIGN_CENTER|||
ALLEGRO_ALIGN_RIGHT|||
ALLEGRO_ALIGN_INTEGER|||
ALLEGRO_FONT_FUNC(bool, al_register_font_loader, (const char *ext, ALLEGRO_FONT *(*load)(const char *filename, int size, int flags)));
al_load_bitmap_font|ALLEGRO_FONT *|(const char *filename)|
al_load_bitmap_font_flags|ALLEGRO_FONT *|(const char *filename, int flags)|
al_load_font|ALLEGRO_FONT *|(const char *filename, int size, int flags)|
al_grab_font_from_bitmap|ALLEGRO_FONT *|(ALLEGRO_BITMAP *bmp, int n, const int ranges[])|
al_create_builtin_font|ALLEGRO_FONT *|(void)|
al_draw_ustr|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int flags, ALLEGRO_USTR const *ustr)|
al_draw_text|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int flags, char const *text)|
al_draw_justified_text|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x1, float x2, float y, float diff, int flags, char const *text)|
al_draw_justified_ustr|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x1, float x2, float y, float diff, int flags, ALLEGRO_USTR const *text)|
al_draw_textf|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int flags, char const *format, ...)|
al_draw_justified_textf|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x1, float x2, float y, float diff, int flags, char const *format, ...)|
al_get_text_width|int|(const ALLEGRO_FONT *f, const char *str)|
al_get_ustr_width|int|(const ALLEGRO_FONT *f, const ALLEGRO_USTR *ustr)|
al_get_font_line_height|int|(const ALLEGRO_FONT *f)|
al_get_font_ascent|int|(const ALLEGRO_FONT *f)|
al_get_font_descent|int|(const ALLEGRO_FONT *f)|
al_destroy_font|void|(ALLEGRO_FONT *f)|
al_get_ustr_dimensions|void|(const ALLEGRO_FONT *f, ALLEGRO_USTR const *text, int *bbx, int *bby, int *bbw, int *bbh)|
al_get_text_dimensions|void|(const ALLEGRO_FONT *f, char const *text, int *bbx, int *bby, int *bbw, int *bbh)|
al_init_font_addon|bool|(void)|
al_is_font_addon_initialized|bool|(void)|
al_shutdown_font_addon|void|(void)|
al_get_allegro_font_version|uint32_t|(void)|
al_get_font_ranges|int|(ALLEGRO_FONT *font, int ranges_count, int *ranges)|
al_draw_glyph|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int codepoint)|
al_get_glyph_width|int|(const ALLEGRO_FONT *f, int codepoint)|
al_get_glyph_dimensions|bool|(const ALLEGRO_FONT *f, int codepoint, int *bbx, int *bby, int *bbw, int *bbh)|
al_get_glyph_advance|int|(const ALLEGRO_FONT *f, int codepoint1, int codepoint2)|
al_get_glyph|bool|(const ALLEGRO_FONT *f, int prev_codepoint, int codepoint, ALLEGRO_GLYPH *glyph)|
al_draw_multiline_text|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, float max_width, float line_height, int flags, const char *text)|
al_draw_multiline_textf|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, float max_width, float line_height, int flags, const char *format, ...)|
al_draw_multiline_ustr|void|(const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, float max_width, float line_height, int flags, const ALLEGRO_USTR *text)|
al_do_multiline_text|void|(const ALLEGRO_FONT *font, float max_width, const char *text, bool (*cb)(int line_num, const char *line, int size, void *extra), void *extra)|
al_do_multiline_ustr|void|(const ALLEGRO_FONT *font, float max_width, const ALLEGRO_USTR *ustr, bool (*cb)(int line_num, const ALLEGRO_USTR *line, void *extra), void *extra)|
al_set_fallback_font|void|(ALLEGRO_FONT *font, ALLEGRO_FONT *fallback)|
al_get_fallback_font|ALLEGRO_FONT *|(ALLEGRO_FONT *font)|
al_init_image_addon|bool|(void)|
al_is_image_addon_initialized|bool|(void)|
al_shutdown_image_addon|void|(void)|
al_get_allegro_image_version|uint32_t|(void)|
al_open_memfile|ALLEGRO_FILE *|(void *mem, int64_t size, const char *mode)|
al_get_allegro_memfile_version|uint32_t|(void)|
ALLEGRO_NATIVE_DIALOG_SRC|||
ALLEGRO_GTK_TOPLEVEL|||
ALLEGRO_FILECHOOSER|||
ALLEGRO_TEXTLOG|||
ALLEGRO_MENU|||
ALLEGRO_MENU_INFO|||
ALLEGRO_MENU_SEPARATOR|||
ALLEGRO_START_OF_MENU|||
ALLEGRO_END_OF_MENU|||
al_init_native_dialog_addon|bool|(void)|
al_is_native_dialog_addon_initialized|bool|(void)|
al_shutdown_native_dialog_addon|void|(void)|
al_create_native_file_dialog|ALLEGRO_FILECHOOSER *|(char const *initial_path, char const *title, char const *patterns, int mode)|
al_show_native_file_dialog|bool|(ALLEGRO_DISPLAY *display, ALLEGRO_FILECHOOSER *dialog)|
al_get_native_file_dialog_count|int|(const ALLEGRO_FILECHOOSER *dialog)|
al_get_native_file_dialog_path|const char *|(const ALLEGRO_FILECHOOSER *dialog, size_t index)|
al_destroy_native_file_dialog|void|(ALLEGRO_FILECHOOSER *dialog)|
al_show_native_message_box|int|(ALLEGRO_DISPLAY *display, char const *title, char const *heading, char const *text, char const *buttons, int flags)|
al_open_native_text_log|ALLEGRO_TEXTLOG *|(char const *title, int flags)|
al_close_native_text_log|void|(ALLEGRO_TEXTLOG *textlog)|
al_append_native_text_log|void|(ALLEGRO_TEXTLOG *textlog, char const *format, ...)|
al_get_native_text_log_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_TEXTLOG *textlog)|
al_create_menu|ALLEGRO_MENU *|(void)|
al_create_popup_menu|ALLEGRO_MENU *|(void)|
al_build_menu|ALLEGRO_MENU *|(ALLEGRO_MENU_INFO *info)|
al_append_menu_item|int|(ALLEGRO_MENU *parent, char const *title, uint16_t id, int flags, ALLEGRO_BITMAP *icon, ALLEGRO_MENU *submenu)|
al_insert_menu_item|int|(ALLEGRO_MENU *parent, int pos, char const *title, uint16_t id, int flags, ALLEGRO_BITMAP *icon, ALLEGRO_MENU *submenu)|
al_remove_menu_item|bool|(ALLEGRO_MENU *menu, int pos)|
al_clone_menu|ALLEGRO_MENU *|(ALLEGRO_MENU *menu)|
al_clone_menu_for_popup|ALLEGRO_MENU *|(ALLEGRO_MENU *menu)|
al_destroy_menu|void|(ALLEGRO_MENU *menu)|
al_get_menu_item_caption|const char *|(ALLEGRO_MENU *menu, int pos)|
al_set_menu_item_caption|void|(ALLEGRO_MENU *menu, int pos, const char *caption)|
al_get_menu_item_flags|int|(ALLEGRO_MENU *menu, int pos)|
al_set_menu_item_flags|void|(ALLEGRO_MENU *menu, int pos, int flags)|
al_get_menu_item_icon|ALLEGRO_BITMAP *|(ALLEGRO_MENU *menu, int pos)|
al_set_menu_item_icon|void|(ALLEGRO_MENU *menu, int pos, ALLEGRO_BITMAP *icon)|
al_toggle_menu_item_flags|int|(ALLEGRO_MENU *menu, int pos, int flags)|
al_find_menu|ALLEGRO_MENU *|(ALLEGRO_MENU *haystack, uint16_t id)|
al_find_menu_item|bool|(ALLEGRO_MENU *haystack, uint16_t id, ALLEGRO_MENU **menu, int *index)|
al_get_default_menu_event_source|ALLEGRO_EVENT_SOURCE *|(void)|
al_enable_menu_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_MENU *menu)|
al_disable_menu_event_source|void|(ALLEGRO_MENU *menu)|
al_get_display_menu|ALLEGRO_MENU *|(ALLEGRO_DISPLAY *display)|
al_set_display_menu|bool|(ALLEGRO_DISPLAY *display, ALLEGRO_MENU *menu)|
al_popup_menu|bool|(ALLEGRO_MENU *popup, ALLEGRO_DISPLAY *display)|
al_remove_display_menu|ALLEGRO_MENU *|(ALLEGRO_DISPLAY *display)|
al_get_allegro_native_dialog_version|uint32_t|(void)|
ALLEGRO_FILECHOOSER_FILE_MUST_EXIST|||
ALLEGRO_FILECHOOSER_SAVE|||
ALLEGRO_FILECHOOSER_FOLDER|||
ALLEGRO_FILECHOOSER_PICTURES|||
ALLEGRO_FILECHOOSER_SHOW_HIDDEN|||
ALLEGRO_FILECHOOSER_MULTIPLE|||
ALLEGRO_MESSAGEBOX_WARN|||
ALLEGRO_MESSAGEBOX_ERROR|||
ALLEGRO_MESSAGEBOX_OK_CANCEL|||
ALLEGRO_MESSAGEBOX_YES_NO|||
ALLEGRO_MESSAGEBOX_QUESTION|||
ALLEGRO_TEXTLOG_NO_CLOSE|||
ALLEGRO_TEXTLOG_MONOSPACE|||
ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE|||
ALLEGRO_EVENT_MENU_CLICK|||
ALLEGRO_MENU_ITEM_ENABLED|||
ALLEGRO_MENU_ITEM_CHECKBOX|||
ALLEGRO_MENU_ITEM_CHECKED|||
ALLEGRO_MENU_ITEM_DISABLED|||
ALLEGRO_OPENGL_VARIANT|||
ALLEGRO_DESKTOP_OPENGL|||
ALLEGRO_OPENGL_ES|||
al_get_opengl_version|uint32_t|(void)|
al_have_opengl_extension|bool|(const char *extension)|
al_get_opengl_proc_address|void*|(const char *name)|
al_get_opengl_extension_list|ALLEGRO_OGL_EXT_LIST*|(void)|
al_get_opengl_texture|GLuint|(ALLEGRO_BITMAP *bitmap)|
al_remove_opengl_fbo|void|(ALLEGRO_BITMAP *bitmap)|
al_get_opengl_fbo|GLuint|(ALLEGRO_BITMAP *bitmap)|
al_get_opengl_texture_size|bool|(ALLEGRO_BITMAP *bitmap, int *w, int *h)|
al_get_opengl_texture_position|void|(ALLEGRO_BITMAP *bitmap, int *u, int *v)|
al_get_opengl_program_object|GLuint|(ALLEGRO_SHADER *shader)|
al_set_current_opengl_context|void|(ALLEGRO_DISPLAY *display)|
al_get_opengl_variant|int|(void)|
ALLEGRO_PHYSFS_SRC|||
al_set_physfs_file_interface|void|(void)|
al_get_allegro_physfs_version|uint32_t|(void)|
ALLEGRO_PRIMITIVES_SRC|||
ALLEGRO_PRIM_TYPE|||
ALLEGRO_PRIM_LINE_LIST|||
ALLEGRO_PRIM_LINE_STRIP|||
ALLEGRO_PRIM_LINE_LOOP|||
ALLEGRO_PRIM_TRIANGLE_LIST|||
ALLEGRO_PRIM_TRIANGLE_STRIP|||
ALLEGRO_PRIM_TRIANGLE_FAN|||
ALLEGRO_PRIM_POINT_LIST|||
ALLEGRO_PRIM_NUM_TYPES|||
ALLEGRO_PRIM_MAX_USER_ATTR|||
ALLEGRO_PRIM_ATTR|||
ALLEGRO_PRIM_POSITION|||
ALLEGRO_PRIM_COLOR_ATTR|||
ALLEGRO_PRIM_TEX_COORD|||
ALLEGRO_PRIM_TEX_COORD_PIXEL|||
ALLEGRO_PRIM_USER_ATTR|||
ALLEGRO_PRIM_ATTR_NUM|||
ALLEGRO_PRIM_STORAGE|||
ALLEGRO_PRIM_FLOAT_2|||
ALLEGRO_PRIM_FLOAT_3|||
ALLEGRO_PRIM_SHORT_2|||
ALLEGRO_PRIM_FLOAT_1|||
ALLEGRO_PRIM_FLOAT_4|||
ALLEGRO_PRIM_UBYTE_4|||
ALLEGRO_PRIM_SHORT_4|||
ALLEGRO_PRIM_NORMALIZED_UBYTE_4|||
ALLEGRO_PRIM_NORMALIZED_SHORT_2|||
ALLEGRO_PRIM_NORMALIZED_SHORT_4|||
ALLEGRO_PRIM_NORMALIZED_USHORT_2|||
ALLEGRO_PRIM_NORMALIZED_USHORT_4|||
ALLEGRO_PRIM_HALF_FLOAT_2|||
ALLEGRO_PRIM_HALF_FLOAT_4|||
ALLEGRO_LINE_JOIN|||
ALLEGRO_LINE_JOIN_NONE|||
ALLEGRO_LINE_JOIN_BEVEL|||
ALLEGRO_LINE_JOIN_ROUND|||
ALLEGRO_LINE_JOIN_MITER|||
ALLEGRO_LINE_JOIN_MITRE|||
ALLEGRO_LINE_CAP|||
ALLEGRO_LINE_CAP_NONE|||
ALLEGRO_LINE_CAP_SQUARE|||
ALLEGRO_LINE_CAP_ROUND|||
ALLEGRO_LINE_CAP_TRIANGLE|||
ALLEGRO_LINE_CAP_CLOSED|||
ALLEGRO_PRIM_BUFFER_FLAGS|||
ALLEGRO_PRIM_BUFFER_STREAM|||
ALLEGRO_PRIM_BUFFER_STATIC|||
ALLEGRO_PRIM_BUFFER_DYNAMIC|||
ALLEGRO_PRIM_BUFFER_READWRITE|||
ALLEGRO_VERTEX_CACHE_SIZE|||
ALLEGRO_PRIM_QUALITY|||
ALLEGRO_VERTEX_ELEMENT|||
ALLEGRO_VERTEX_DECL|||
ALLEGRO_VERTEX|||
ALLEGRO_VERTEX_BUFFER|||
ALLEGRO_INDEX_BUFFER|||
al_get_allegro_primitives_version|uint32_t|(void)|
al_init_primitives_addon|bool|(void)|
al_is_primitives_addon_initialized|bool|(void)|
al_shutdown_primitives_addon|void|(void)|
al_draw_prim|int|(const void* vtxs, const ALLEGRO_VERTEX_DECL* decl, ALLEGRO_BITMAP* texture, int start, int end, int type)|
al_draw_indexed_prim|int|(const void* vtxs, const ALLEGRO_VERTEX_DECL* decl, ALLEGRO_BITMAP* texture, const int* indices, int num_vtx, int type)|
al_draw_vertex_buffer|int|(ALLEGRO_VERTEX_BUFFER* vertex_buffer, ALLEGRO_BITMAP* texture, int start, int end, int type)|
al_draw_indexed_buffer|int|(ALLEGRO_VERTEX_BUFFER* vertex_buffer, ALLEGRO_BITMAP* texture, ALLEGRO_INDEX_BUFFER* index_buffer, int start, int end, int type)|
al_create_vertex_decl|ALLEGRO_VERTEX_DECL*|(const ALLEGRO_VERTEX_ELEMENT* elements, int stride)|
al_destroy_vertex_decl|void|(ALLEGRO_VERTEX_DECL* decl)|
al_create_vertex_buffer|ALLEGRO_VERTEX_BUFFER*|(ALLEGRO_VERTEX_DECL* decl, const void* initial_data, int num_vertices, int flags)|
al_destroy_vertex_buffer|void|(ALLEGRO_VERTEX_BUFFER* buffer)|
al_lock_vertex_buffer|void*|(ALLEGRO_VERTEX_BUFFER* buffer, int offset, int length, int flags)|
al_unlock_vertex_buffer|void|(ALLEGRO_VERTEX_BUFFER* buffer)|
al_get_vertex_buffer_size|int|(ALLEGRO_VERTEX_BUFFER* buffer)|
al_create_index_buffer|ALLEGRO_INDEX_BUFFER*|(int index_size, const void* initial_data, int num_indices, int flags)|
al_destroy_index_buffer|void|(ALLEGRO_INDEX_BUFFER* buffer)|
al_lock_index_buffer|void*|(ALLEGRO_INDEX_BUFFER* buffer, int offset, int length, int flags)|
al_unlock_index_buffer|void|(ALLEGRO_INDEX_BUFFER* buffer)|
al_get_index_buffer_size|int|(ALLEGRO_INDEX_BUFFER* buffer)|
al_triangulate_polygon|bool|(const float* vertices, size_t vertex_stride, const int* vertex_counts, void (*emit_triangle)(int, int, int, void*), void* userdata)|
al_draw_soft_triangle|void|(ALLEGRO_VERTEX* v1, ALLEGRO_VERTEX* v2, ALLEGRO_VERTEX* v3, uintptr_t state, void (*init)(uintptr_t, ALLEGRO_VERTEX*, ALLEGRO_VERTEX*, ALLEGRO_VERTEX*), void (*first)(uintptr_t, int, int, int, int), void (*step)(uintptr_t, int), void (*draw)(uintptr_t, int, int, int))|
al_draw_soft_line|void|(ALLEGRO_VERTEX* v1, ALLEGRO_VERTEX* v2, uintptr_t state, void (*first)(uintptr_t, int, int, ALLEGRO_VERTEX*, ALLEGRO_VERTEX*), void (*step)(uintptr_t, int), void (*draw)(uintptr_t, int, int))|
al_draw_line|void|(float x1, float y1, float x2, float y2, ALLEGRO_COLOR color, float thickness)|
al_draw_triangle|void|(float x1, float y1, float x2, float y2, float x3, float y3, ALLEGRO_COLOR color, float thickness)|
al_draw_rectangle|void|(float x1, float y1, float x2, float y2, ALLEGRO_COLOR color, float thickness)|
al_draw_rounded_rectangle|void|(float x1, float y1, float x2, float y2, float rx, float ry, ALLEGRO_COLOR color, float thickness)|
al_calculate_arc|void|(float* dest, int stride, float cx, float cy, float rx, float ry, float start_theta, float delta_theta, float thickness, int num_points)|
al_draw_circle|void|(float cx, float cy, float r, ALLEGRO_COLOR color, float thickness)|
al_draw_ellipse|void|(float cx, float cy, float rx, float ry, ALLEGRO_COLOR color, float thickness)|
al_draw_arc|void|(float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness)|
al_draw_elliptical_arc|void|(float cx, float cy, float rx, float ry, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness)|
al_draw_pieslice|void|(float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness)|
al_calculate_spline|void|(float* dest, int stride, float points[8], float thickness, int num_segments)|
al_draw_spline|void|(float points[8], ALLEGRO_COLOR color, float thickness)|
al_calculate_ribbon|void|(float* dest, int dest_stride, const float *points, int points_stride, float thickness, int num_segments)|
al_draw_ribbon|void|(const float *points, int points_stride, ALLEGRO_COLOR color, float thickness, int num_segments)|
al_draw_filled_triangle|void|(float x1, float y1, float x2, float y2, float x3, float y3, ALLEGRO_COLOR color)|
al_draw_filled_rectangle|void|(float x1, float y1, float x2, float y2, ALLEGRO_COLOR color)|
al_draw_filled_ellipse|void|(float cx, float cy, float rx, float ry, ALLEGRO_COLOR color)|
al_draw_filled_circle|void|(float cx, float cy, float r, ALLEGRO_COLOR color)|
al_draw_filled_pieslice|void|(float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color)|
al_draw_filled_rounded_rectangle|void|(float x1, float y1, float x2, float y2, float rx, float ry, ALLEGRO_COLOR color)|
al_draw_polyline|void|(const float* vertices, int vertex_stride, int vertex_count, int join_style, int cap_style, ALLEGRO_COLOR color, float thickness, float miter_limit)|
al_draw_polygon|void|(const float* vertices, int vertex_count, int join_style, ALLEGRO_COLOR color, float thickness, float miter_limit)|
al_draw_filled_polygon|void|(const float* vertices, int vertex_count, ALLEGRO_COLOR color)|
al_draw_filled_polygon_with_holes|void|(const float* vertices, const int* vertex_counts, ALLEGRO_COLOR color)|
ALLEGRO_TTF_NO_KERNING|||
ALLEGRO_TTF_MONOCHROME|||
ALLEGRO_TTF_NO_AUTOHINT|||
ALLEGRO_TTF_SRC|||
al_load_ttf_font|ALLEGRO_FONT *|(char const *filename, int size, int flags)|
al_load_ttf_font_f|ALLEGRO_FONT *|(ALLEGRO_FILE *file, char const *filename, int size, int flags)|
al_load_ttf_font_stretch|ALLEGRO_FONT *|(char const *filename, int w, int h, int flags)|
al_load_ttf_font_stretch_f|ALLEGRO_FONT *|(ALLEGRO_FILE *file, char const *filename, int w, int h, int flags)|
al_init_ttf_addon|bool|(void)|
al_is_ttf_addon_initialized|bool|(void)|
al_shutdown_ttf_addon|void|(void)|
al_get_allegro_ttf_version|uint32_t|(void)|
ALLEGRO_VIDEO_SRC|||
ALLEGRO_VIDEO_EVENT_TYPE|||
ALLEGRO_EVENT_VIDEO_FRAME_SHOW|||
ALLEGRO_EVENT_VIDEO_FINISHED|||
_ALLEGRO_EVENT_VIDEO_SEEK|||
ALLEGRO_VIDEO_POSITION_TYPE|||
ALLEGRO_VIDEO_POSITION_ACTUAL|||
ALLEGRO_VIDEO_POSITION_VIDEO_DECODE|||
ALLEGRO_VIDEO_POSITION_AUDIO_DECODE|||
ALLEGRO_VIDEO_POSITION_TYPE|||
ALLEGRO_VIDEO|||
al_open_video|ALLEGRO_VIDEO *|(char const *filename)|
al_close_video|void|(ALLEGRO_VIDEO *video)|
al_start_video|void|(ALLEGRO_VIDEO *video, ALLEGRO_MIXER *mixer)|
al_start_video_with_voice|void|(ALLEGRO_VIDEO *video, ALLEGRO_VOICE *voice)|
al_get_video_event_source|ALLEGRO_EVENT_SOURCE *|(ALLEGRO_VIDEO *video)|
al_set_video_playing|void|(ALLEGRO_VIDEO *video, bool playing)|
al_is_video_playing|bool|(ALLEGRO_VIDEO *video)|
al_get_video_audio_rate|double|(ALLEGRO_VIDEO *video)|
al_get_video_fps|double|(ALLEGRO_VIDEO *video)|
al_get_video_scaled_width|float|(ALLEGRO_VIDEO *video)|
al_get_video_scaled_height|float|(ALLEGRO_VIDEO *video)|
al_get_video_frame|ALLEGRO_BITMAP *|(ALLEGRO_VIDEO *video)|
al_get_video_position|double|(ALLEGRO_VIDEO *video, ALLEGRO_VIDEO_POSITION_TYPE which)|
al_seek_video|bool|(ALLEGRO_VIDEO *video, double pos_in_seconds)|
al_init_video_addon|bool|(void)|
al_is_video_addon_initialized|bool|(void)|
al_shutdown_video_addon|void|(void)|
al_get_allegro_video_version|uint32_t|(void)|
al_get_win_window_handle|HWND|(ALLEGRO_DISPLAY *display)|
al_win_add_window_callback|bool|(ALLEGRO_DISPLAY *display, bool (*callback)(ALLEGRO_DISPLAY *display, UINT message, WPARAM wparam, LPARAM lparam, LRESULT *result, void *userdata), void *userdata)|
al_win_remove_window_callback|bool|(ALLEGRO_DISPLAY *display, bool (*callback)(ALLEGRO_DISPLAY *display, UINT message, WPARAM wparam, LPARAM lparam, LRESULT *result, void *userdata), void *userdata)|
al_ftofix|al_fixed|(double x)|
al_fixtof|double|(al_fixed x)|
al_fixadd|al_fixed|(al_fixed x, al_fixed y)|
al_fixsub|al_fixed|(al_fixed x, al_fixed y)|
al_fixmul|al_fixed|(al_fixed x, al_fixed y)|
al_fixdiv|al_fixed|(al_fixed x, al_fixed y)|
al_fixfloor|int|(al_fixed x)|
al_fixceil|int|(al_fixed x)|
al_itofix|al_fixed|(int x)|
al_fixtoi|int|(al_fixed x)|
al_fixcos|al_fixed|(al_fixed x)|
al_fixsin|al_fixed|(al_fixed x)|
al_fixtan|al_fixed|(al_fixed x)|
al_fixacos|al_fixed|(al_fixed x)|
al_fixasin|al_fixed|(al_fixed x)|
ALLEGRO_MINGW32|||
ALLEGRO_UNIX|||
ALLEGRO_MSVC|||
ALLEGRO_MACOSX|||
ALLEGRO_BCC32|||
ALLEGRO_IPHONE|||
ALLEGRO_ANDROID|||
ALLEGRO_RASPBERRYPI|||
ALLEGRO_CFG_NO_FPU|||
ALLEGRO_CFG_DLL_TLS|||
ALLEGRO_CFG_PTHREADS_TLS|||
ALLEGRO_CFG_D3D|||
ALLEGRO_CFG_D3D9EX|||
ALLEGRO_CFG_D3DX9|||
ALLEGRO_CFG_XINPUT|||
ALLEGRO_CFG_OPENGL|||
ALLEGRO_CFG_OPENGLES|||
ALLEGRO_CFG_OPENGLES1|||
ALLEGRO_CFG_OPENGLES2|||
ALLEGRO_CFG_OPENGLES3|||
ALLEGRO_CFG_OPENGL_FIXED_FUNCTION|||
ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE|||
ALLEGRO_CFG_SHADER_GLSL|||
ALLEGRO_CFG_SHADER_HLSL|||
ALLEGRO_CFG_ANDROID_LEGACY|||
ALLEGRO_HAVE_DIRENT_H|||
ALLEGRO_HAVE_INTTYPES_H|||
ALLEGRO_HAVE_LINUX_AWE_VOICE_H|||
ALLEGRO_HAVE_LINUX_INPUT_H|||
ALLEGRO_HAVE_LINUX_SOUNDCARD_H|||
ALLEGRO_HAVE_MACHINE_SOUNDCARD_H|||
ALLEGRO_HAVE_SOUNDCARD_H|||
ALLEGRO_HAVE_STDBOOL_H|||
ALLEGRO_HAVE_STDINT_H|||
ALLEGRO_HAVE_SV_PROCFS_H|||
ALLEGRO_HAVE_SYS_IO_H|||
ALLEGRO_HAVE_SYS_SOUNDCARD_H|||
ALLEGRO_HAVE_SYS_STAT_H|||
ALLEGRO_HAVE_SYS_TIME_H|||
ALLEGRO_HAVE_TIME_H|||
ALLEGRO_HAVE_SYS_UTSNAME_H|||
ALLEGRO_HAVE_SYS_TYPES_H|||
ALLEGRO_HAVE_OSATOMIC_H|||
ALLEGRO_HAVE_SYS_INOTIFY_H|||
ALLEGRO_HAVE_SAL_H|||
ALLEGRO_HAVE_GETEXECNAME|||
ALLEGRO_HAVE_MKSTEMP|||
ALLEGRO_HAVE_MMAP|||
ALLEGRO_HAVE_MPROTECT|||
ALLEGRO_HAVE_SCHED_YIELD|||
ALLEGRO_HAVE_SYSCONF|||
ALLEGRO_HAVE_SYSCTL|||
ALLEGRO_HAVE_FSEEKO|||
ALLEGRO_HAVE_FTELLO|||
ALLEGRO_HAVE_STRERROR_R|||
ALLEGRO_HAVE_STRERROR_S|||
ALLEGRO_HAVE_VA_COPY|||
ALLEGRO_HAVE_FTELLI64|||
ALLEGRO_HAVE_FSEEKI64|||
ALLEGRO_HAVE_PROCFS_ARGCV|||
ALLEGRO_LITTLE_ENDIAN|||
ALLEGRO_BIG_ENDIAN|||
ALLEGRO_DARWIN|||
ALLEGRO_WITH_XWINDOWS|||
ALLEGRO_XWINDOWS_WITH_XCURSOR|||
ALLEGRO_XWINDOWS_WITH_XF86VIDMODE|||
ALLEGRO_XWINDOWS_WITH_XINERAMA|||
ALLEGRO_XWINDOWS_WITH_XRANDR|||
ALLEGRO_XWINDOWS_WITH_XSCREENSAVER|||
ALLEGRO_XWINDOWS_WITH_XIM|||
ALLEGRO_XWINDOWS_WITH_XINPUT2|||
ALLEGRO_XWINDOWS_WITH_XPM|||
ALLEGRO_LINUX|||
ALLEGRO_SDL|||
ALLEGRO_PLATFORM_STR|||
ALLEGRO_EXCLUDE_GLX|||
ALLEGRO_WINDOWS|||
ALLEGRO_I386|||
ALLEGRO_GUESS_INTTYPES_OK|||
ALLEGRO_USE_CONSOLE|||
ALLEGRO_NO_MAGIC_MAIN|||
KEYBOARD_MACOSX|||
ALLEGRO_GLX|||
ALLEGRO_DOS|||
_WinMain|int|(void *_main, void *hInst, void *hPrev, char *Cmd, int nShow)|
AL_JOY_TYPE_DIRECTX|||
AL_JOY_TYPE_XINPUT|||
AL_JOY_TYPE_WINDOWS_ALL|||
ALLEGRO_JOYSTICK_DRIVER|||
AL_HAPTIC_TYPE_DIRECTX|||
AL_HAPTIC_TYPE_XINPUT|||
AL_HAPTIC_TYPE_WINDOWS_ALL|||
ALLEGRO_HAPTIC_DRIVER|||
