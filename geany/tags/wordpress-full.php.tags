# format=pipe
# Full wordpress tags based on phpdoc site
# Based on Wordpress 3.2 documentation (http://phpdoc.wordpress.org/branches/3.2/) and Erik Johansson wordpress simple tag file
PclZipUtilCopyBlock||void( $p_src, $p_dest, $p_size,[ $p_mode=0])|
PclZipUtilOptionText||void( $p_option)|
PclZipUtilPathInclusion||void( $p_dir, $p_path)|
PclZipUtilPathReduction||void( $p_dir)|
PclZipUtilRename||void( $p_src, $p_dest)|
PclZipUtilTranslateWinPath||void( $p_path,[ $p_remove_disk_letter=true])|
WP_Filesystem|Initialises and connects the WordPress Filesystem Abstraction classes.|boolean([array $args=false],[string $context=false])|
__|Retrieves the translation of $text. If there is no translation, or  the domain isn't loaded the original text is returned.|string(string $text,[string $domain=&#039;default&#039;])|
__clear_multi_author_cache|Helper function to clear the cache for number of authors.|void()|
__ngettext|Retrieve the plural or single form based on the amount.|void()|
__ngettext_noop|Register plural strings in POT file, but don't translate them.|void()|
__return_empty_array|Returns an empty array|array()|
__return_false|Returns false|bool()|
__return_true|Returns true|bool()|
__return_zero|Returns 0|int()|
_access_denied_splash||void()|
_add_themes_utility_last||void()|
_admin_bar_bump_cb|Default admin bar callback.|void()|
_admin_notice_post_locked|Outputs the notice message to say that someone else is editing this post at the moment.|none()|
_admin_search_query|Display the search query.|void()|
_c|Retrieve translated string with vertical bar context|string(string $text,[string $domain=&#039;default&#039;])|
_cleanup_header_comment|Strip close comment and close php tags from file headers used by WP  See http://core.trac.wordpress.org/ticket/8497|string(string $str)|
_crop_image_resource||void( $img, $x, $y, $w, $h)|
_custom_background_cb|Default custom background callback.|void()|
_draft_or_post_title|Get the post title.|string([int $post_id=0])|
_e|Displays the returned translated text from translate().|void(string $text,[string $domain=&#039;default&#039;])|
_edit_attachments_query_helper||void( $where)|
_ex|Displays translated string with gettext context|string(string $text,string $context,[string $domain=&#039;default&#039;])|
_fill_many_users|Take an array of user objects, fill them with metas, and cache them.|void( &$users,array $users)|
_fill_single_user|Unserialize user metadata, fill $user object, then cache everything.|void( &$user, &$metavalues,object $user,array $metavalues)|
_fix_attachment_links_replace_cb||void( $match)|
_flip_image_resource||void( $img, $horz, $vert)|
_get_dropins|Returns drop-ins that WordPress uses.|array()|
_get_meta_table|Retrieve the name of the metadata table for the specified object type.|mixed(string $type)|
_get_plugin_data_markup_translate||void( $plugin_file, $plugin_data,[ $markup=true],[ $translate=true])|
_get_widget_id_base|Private|void( $id)|
_http_build_query||void( $data,[ $prefix=null],[ $sep=null],[ $key=&#039;&#039;],[ $urlencode=true])|
_image_get_preview_ratio||void( $w, $h)|
_insert_into_post_button||void( $type)|
_list_meta_row||unknown(unknown_type $entry, &$count,unknown_type $count)|
_maybe_update_core||void()|
_media_button||void( $title, $icon, $type)|
_media_states||void( $post)|
_n|Retrieve the plural or single form based on the amount.|string(string $single,string $plural,int $number,[string $domain=&#039;default&#039;])|
_n_noop|Register plural strings in POT file, but don't translate them.|array(string $singular,string $plural)|
_nc|A version of _n(), which supports contexts.|void( $single, $plural, $number,[ $domain=&#039;default&#039;])|
_nx|A hybrid of _n() and _x(). It supports contexts and plurals.|void( $single, $plural, $number, $context,[ $domain=&#039;default&#039;])|
_nx_noop|Register plural strings with context in POT file, but don't translate them.|void( $singular, $plural, $context)|
_page_traverse_name|function to traverse and return all the nested children post names of a root page.|void( $page_id, &$children, &$result)|
_post_states||void( $post)|
_print_scripts||void()|
_register_widget_form_callback||void( $id, $name, $form_callback,[ $options=array()])|
_register_widget_update_callback||void( $id_base, $update_callback,[ $options=array()])|
_rotate_image_resource||void( $img, $angle)|
_set_preview||void( $post)|
_show_post_preview||void()|
_wp_ajax_add_hierarchical_term||void()|
_wp_ajax_delete_comment_response|Sends back current comment total and new page links if they need to be updated.|die(int $comment_id,[ $delta=-1])|
_wp_ajax_menu_quick_search|Prints the appropriate response to a menu quick search.|void([array $request=array()])|
_wp_credits_add_css||void()|
_wp_credits_add_profile_link||void( &$display_name, $username, $profiles)|
_wp_credits_build_object_link||void( &$data)|
_wp_dashboard_control_callback||void( $dashboard, $meta_box)|
_wp_dashboard_recent_comments_row||void( &$comment,[ $show_date=true])|
_wp_get_post_autosave_hack|Internally used to hack WP_Query into submission.|void(object $query)|
_wp_mysql_week|Returns a MySQL expression for selecting the week number based on the start_of_week option.|string(string $column)|
_wp_post_thumbnail_class_filter|Adds a 'wp-post-image' class to post thumbnail thumbnails  Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to  dynamically add/remove itself so as to only filter post thumbnail thumbnails|array(array $attr)|
_wp_post_thumbnail_class_filter_add|Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter|void( $attr)|
_wp_post_thumbnail_class_filter_remove|Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter|void( $attr)|
_wp_post_thumbnail_html|Output HTML for the post thumbnail meta-box.|string([int $thumbnail_id=NULL])|
_wp_put_post_revision|Inserts post data into the posts table as a post revision.|mixed([int|object|array $post=null],[bool $autosave=false])|
_wp_relative_upload_path|Return relative path to an uploaded file.|string(string $path)|
_wp_specialchars|Converts a number of special characters into their HTML entities.|string(string $string,[mixed $quote_style=ENT_NOQUOTES],[string $charset=false],[boolean $double_encode=false])|
_wp_timezone_choice_usort_callback||int(unknown_type $a,unknown_type $b)|
_wp_translate_postdata|Rename $_POST data from form names to DB post columns.|object|bool([bool $update=false],[array $post_data=null])|
_x|Retrieve translated string with gettext context|string(string $text,string $context,[string $domain=&#039;default&#039;])|
absint|Converts value to nonnegative integer.|int(mixed $maybeint)|
activate_plugin|Attempts activation of plugin in a &quot;sandbox&quot; and redirects on success.|WP_Error|null(string $plugin,[string $redirect=&#039;&#039;],[bool $network_wide=false],[bool $silent=false])|
activate_plugins|Activate multiple plugins.|bool|WP_Error(string|array $plugins,[string $redirect=&#039;&#039;],[bool $network_wide=false],[bool $silent=false])|
activate_sitewide_plugin||void()|
add_action|Hooks a function on to a specific action.|void(string $tag,callback $function_to_add,[int $priority=10],[int $accepted_args=1])|
add_blog_option|Add an option for a particular blog.|void(int $id,string $key,mixed $value)|
add_clean_index||bool(string $table,string $index)|
add_comment_meta|Add meta data field to a comment.|bool(int $comment_id,string $meta_key,mixed $meta_value,[bool $unique=false])|
add_comments_page|Add sub menu page to the comments main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_contextual_help|Add contextual help text for a page|void(string $screen,string $help)|
add_cssclass|Build Administration Menu.|void( $add, $class)|
add_custom_background|Add callbacks for background image display.|void([callback $header_callback=&#039;&#039;],[callback $admin_header_callback=&#039;&#039;],[callback $admin_image_div_callback=&#039;&#039;])|
add_custom_image_header|Add callbacks for image header display.|void(callback $header_callback,callback $admin_header_callback,[callback $admin_image_div_callback=&#039;&#039;])|
add_dashboard_page|Add sub menu page to the Dashboard main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_editor_style|Add callback for custom TinyMCE editor stylesheets.|void([mixed $stylesheet=&#039;editor-style.css&#039;])|
add_existing_user_to_blog|Add a user to a blog based on details from maybe_add_existing_user_to_blog().|void([array $details=false])|
add_feed|Add a new feed type like /atom1/.|string(string $feedname,callback $function)|
add_filter|Hooks a function or method to a specific filter action.|boolean(string $tag,callback $function_to_add,[int $priority=10],[int $accepted_args=1])|
add_image_size|Registers a new image size|void( $name,[ $width=0],[ $height=0],[ $crop=false])|
add_link|Add a link to using values provided in $_POST.|int|WP_Error()|
add_links_page|Add sub menu page to the links main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_magic_quotes|Walks the array while sanitizing the contents.|array(array $array)|
add_management_page|Add sub menu page to the tools main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_media_page|Add sub menu page to the media main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_menu_classes||void( $menu)|
add_menu_page|Add a top level menu page|string(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;],[string $icon_url=&#039;&#039;],[int $position=NULL])|
add_meta||unknown(unknown_type $post_ID)|
add_meta_box|Add a meta box to an edit form.|void(string $id,string $title,string $callback,string $page,[string $context=&#039;advanced&#039;],[string $priority=&#039;default&#039;],[ $callback_args=null])|
add_metadata|Add metadata for the specified object.|bool(string $meta_type,int $object_id,string $meta_key,string $meta_value,[bool $unique=false])|
add_new_user_to_blog|Add a newly created user to the appropriate blog|void(int $user_id,string $email,array $meta)|
add_object_page|Add a top level menu page in the 'objects' section|string(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;],[string $icon_url=&#039;&#039;])|
add_option|Add a new option.|null(string $option,[mixed $value=&#039;&#039;],[mixed $deprecated=&#039;&#039;],[bool $autoload=&#039;yes&#039;])|
add_option_update_handler|Register a setting and its sanitization callback|unknown(string $option_group,string $option_name,[unknown_type $sanitize_callback=&#039;&#039;])|
add_option_whitelist||unknown(unknown_type $new_options,[unknown_type $options=&#039;&#039;])|
add_options_page|Add sub menu page to the options main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_pages_page|Add sub menu page to the pages main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_permastruct|Add permalink structure.|void(string $name,string $struct,[bool $with_front=true],[ $ep_mask=EP_NONE])|
add_ping|Add a URL to those already pung.|int(int $post_id,string $uri)|
add_plugins_page|Add sub menu page to the plugins main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_post_meta|Add meta data field to a post.|bool(int $post_id,string $meta_key,mixed $meta_value,[bool $unique=false])|
add_post_type_support|Register support of certain features for a post type.|void(string $post_type,string|array $feature)|
add_posts_page|Add sub menu page to the posts main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_query_arg|Retrieve a modified URL query string.|string(mixed $param1,mixed $param2,mixed $param3)|
add_rewrite_endpoint|Add an endpoint, like /trackback/.|void(unknown_type $name,unknown_type $places)|
add_rewrite_rule|Add a straight rewrite rule.|void(string $regex,string $redirect,[string $after=&#039;bottom&#039;])|
add_rewrite_tag|Add a new tag (like %postname%).|void(string $tagname,string $regex)|
add_role|Add role, if it does not exist.|null|WP_Role(string $role,string $display_name,[array $capabilities=array()])|
add_screen_option|Register and configure an admin screen option|void(string $option,[mixed $args=array()])|
add_settings_error|Register a settings error to be displayed to the user|void(string $setting,string $code,string $message,[string $type=&#039;error&#039;])|
add_settings_field|Add a new field to a section of a settings page|void(string $id,string $title,string $callback,string $page,[string $section=&#039;default&#039;],[array $args=array()])|
add_settings_section|Add a new section to a settings page.|void(string $id,string $title,string $callback,string $page)|
add_shortcode|Add hook for shortcode tag.|void(string $tag,callable $func)|
add_site_option|Add a new site option.|bool(string $option,mixed $value)|
add_submenu_page|Add a sub menu page|string|bool(string $parent_slug,string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_theme_page|Add sub menu page to the themes main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_theme_support|Allows a theme to register its support of a certain feature|void(string $feature)|
add_thickbox|Enqueues the default ThickBox js and css.|void()|
add_user|Creates a new user from the &quot;Users&quot; form using $_POST information.|null|WP_Error|int([int $user_id=Optional.UserID.])|
add_user_meta|Add meta data field to a user.|bool(int $user_id,string $meta_key,mixed $meta_value,[bool $unique=false])|
add_user_to_blog|Add a user to a blog.|bool(int $blog_id,int $user_id,string $role)|
add_users_page|Add sub menu page to the Users/Profile main menu.|string|bool(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;])|
add_utility_page|Add a top level menu page in the 'utility' section|string(string $page_title,string $menu_title,string $capability,string $menu_slug,[callback $function=&#039;&#039;],[string $icon_url=&#039;&#039;])|
addslashes_gpc|Adds slashes to escape strings.|string(string $gpc)|
adjacent_image_link|Display next or previous image link that has the same post parent.|void([bool $prev=true],[ $size=&#039;thumbnail&#039;],[ $text=false])|
adjacent_post_link|Display adjacent post link.|void(string $format,string $link,[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;],[bool $previous=true])|
adjacent_posts_rel_link|Display relational links for the posts adjacent to the current post.|void([string $title=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
adjacent_posts_rel_link_wp_head|Display relational links for the posts adjacent to the current post for single post pages.|void()|
admin_color_scheme_picker|Display the default admin color scheme picker (Used in user-edit.php)|void()|
admin_created_user_email||void( $text)|
admin_created_user_subject||void( $text)|
admin_url|Retrieve the url to the admin area for the current site.|string([string $path=&#039;&#039;],[string $scheme=&#039;admin&#039;])|
allow_subdirectory_install|Allow subdirectory install|bool()|
allow_subdomain_install|Allow subdomain install|bool()|
allowed_tags|Display all of the allowed tags in HTML format with attributes.|string()|
antispambot|Converts email addresses characters to HTML entities to block spam bots.|string(string $emailaddy,[int $mailto=0])|
apache_mod_loaded|Does the specified module exist in the apache config?|bool(string $mod,[bool $default=false])|
apply_filters|Call the functions added to a filter hook.|mixed(string $tag,mixed $value,mixed $var,...)|
apply_filters_ref_array|Execute functions hooked on a specific filter hook, specifying arguments in an array.|mixed(string $tag,array $args)|
atom_enclosure|Display the atom enclosure for the current post.|void()|
attribute_escape|Escaping for HTML attributes.|string(string $text)|
auth_redirect|Checks if a user is logged in, if not it redirects them to the login page.|void()|
author_can|Whether author of supplied post has capability or role.|bool(int|object $post,string $capability)|
automatic_feed_links|Enable/disable automatic general feed link outputting.|void([boolean $add=true])|
avoid_blog_page_permalink_collision||void( $data, $postarr)|
background_color|Display background color value.|void()|
background_image|Display background image path.|void()|
backslashit|Adds backslashes before letters and before a number at the start of a string.|string(string $string)|
balanceTags|Will only balance the tags if forced to and the option is set to balance tags.|string(string $text,[bool $force=false])|
before_last_bar||void( $string)|
bloginfo|Display information about the blog.|void([string $show=&#039;&#039;])|
bloginfo_rss|Display RSS container for the bloginfo function.|void([string $show=&#039;&#039;])|
body_class|Display the classes for the body element.|void([string|array $class=&#039;&#039;])|
bool_from_yn|Whether input is yes or no. Must be 'y' to be true.|bool(string $yn)|
build_query|Build URL query based on an associative and, or indexed array.|string(array $data)|
bulk_edit_posts|Process the post data for the bulk editing of posts.|array([array $post_data=null])|
cache_javascript_headers|Set the headers for caching for 10 days with JavaScript content type.|void()|
cache_users|Retrieve info for user lists to prevent multiple queries by get_userdata()|void(array $users)|
calendar_week_mod|Get number of days since the start of the week.|int(int $num)|
can_edit_network|Whether or not we can edit this network from this page|void(integer $site_id)|
cancel_comment_reply_link|Display HTML content for cancel comment reply link.|void([string $text=&#039;&#039;])|
capital_P_dangit|Forever eliminate &quot;Wordpress&quot; from the planet (or at least the little bit we can influence).|void( $text)|
cat_is_ancestor_of|Check if a category is an ancestor of another category.|bool(int|object $cat1,int|object $cat2)|
category_description|Retrieve category description.|string([int $category=0])|
category_exists||unknown(unknown_type $cat_name,[ $parent=0])|
check_admin_referer|Makes sure that a user was referred from another admin page.|void([string $action=-1],[string $query_arg=&#039;_wpnonce&#039;])|
check_ajax_referer|Verifies the AJAX request to prevent processing requests external of the blog.|void([string $action=-1],[string $query_arg=false],[ $die=true])|
check_and_publish_future_post|Publish future post and make sure post ID has future post status.|null(int $post_id)|
check_column|Check column matches criteria.|bool(string $table_name,string $col_name,string $col_type,[bool $is_null=null],[mixed $key=null],[mixed $default=null],[mixed $extra=null])|
check_comment|Checks whether a comment passes internal checks to be allowed to add.|bool(string $author,string $email,string $url,string $comment,string $user_ip,string $user_agent,string $comment_type)|
check_comment_flood_db|Check whether comment flooding is occurring.|void(string $ip,string $email,string $date)|
check_import_new_users||void( $permission)|
check_password_reset_key|Retrieves a user row based on password reset key and login|object|WP_Error(string $key,string $login)|
check_upload_mimes|Check an array of MIME types against a whitelist.|array(array $mimes)|
check_upload_size|Determine if uploaded file exceeds space quota.|array(array $file)|
checked|Outputs the html checked attribute.|string(mixed $checked,[mixed $current=true],[bool $echo=true])|
choose_primary_blog||void()|
clean_attachment_cache|Will clean the attachment in the cache.|void(int $id,[bool $clean_terms=false])|
clean_bookmark_cache|Deletes bookmark cache|void( $bookmark_id)|
clean_category_cache|Remove the category cache data based on ID.|void(int $id)|
clean_comment_cache|Removes comment ID from the comment cache.|void(int|array $ids)|
clean_object_term_cache|Removes the taxonomy relationship to terms from the cache.|void(int|array $object_ids,array|string $object_type)|
clean_page_cache|Will clean the page in the cache.|void(int $id)|
clean_post_cache|Will clean the post in the cache.|void(int $id)|
clean_pre|Accepts matches array from preg_replace_callback in wpautop() or a string.|string(array|string $matches)|
clean_term_cache|Will remove all of the term ids from the cache.|void(int|array $ids,[string $taxonomy=&#039;&#039;],[bool $clean_taxonomy=true])|
clean_url|Checks and cleans a URL.|string(string $url,[array $protocols=null],[string $context=&#039;display&#039;])|
clean_user_cache|Clean all user caches|void(int $id)|
clear_global_post_cache||void( $post_id)|
codepress_footer_js|Adds Javascript required to make CodePress work on the theme/plugin editors.|void()|
codepress_get_lang|Determines the language to use for CodePress syntax highlighting.|void(string $filename)|
comment_ID|Displays the comment id of the current comment.|void()|
comment_author|Displays the author of the current comment.|void([int $comment_ID=0])|
comment_author_IP|Display the IP address of the author of the current comment.|void([int $comment_ID=0])|
comment_author_email|Display the email of the author of the current global $comment.|void([int $comment_ID=0])|
comment_author_email_link|Display the html email link to the author of the current comment.|void([string $linktext=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;])|
comment_author_link|Display the html link to the url of the author of the current comment.|void([int $comment_ID=0])|
comment_author_rss|Display the current comment author in the feed.|void()|
comment_author_url|Display the url of the author of the current comment.|void([int $comment_ID=0])|
comment_author_url_link|Displays the HTML link of the url of the author of the current comment.|void([string $linktext=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;])|
comment_class|Generates semantic classes for each comment element|void([string|array $class=&#039;&#039;],[int $comment_id=null],[int $post_id=null],[bool $echo=true])|
comment_date|Display the comment date of the current comment.|void([string $d=&#039;&#039;],[int $comment_ID=0])|
comment_excerpt|Display the excerpt of the current comment.|void([int $comment_ID=0])|
comment_exists||mixed(string $comment_author,string $comment_date)|
comment_footer_die|Display error message at bottom of comments.|void(string $msg)|
comment_form|Outputs a complete commenting form for use within a template.|void([array $args=array()],[mixed $post_id=null])|
comment_form_title|Display text based on comment reply status. Only affects users with Javascript disabled.|void([string $noreplytext=false],[string $replytext=false],[string $linktoparent=TRUE])|
comment_guid|Display the feed GUID for the current comment.|void([int|object $comment_id=null])|
comment_id_fields|Output hidden input HTML for replying to comments.|void([ $id=0])|
comment_link|Display the link to the comments.|void()|
comment_reply_link|Displays the HTML content for reply to comment link.|string|bool|null([array $args=array()],[int $comment=null],[int $post=null])|
comment_text|Displays the text of the current comment.|void([int $comment_ID=0])|
comment_text_rss|Display the current comment content for use in the feeds.|void()|
comment_time|Display the comment time of the current comment.|void([string $d=&#039;&#039;])|
comment_type|Display the comment type of the current comment.|void([string $commenttxt=false],[string $trackbacktxt=false],[string $pingbacktxt=false])|
comments_link|Displays the link to the current post comments.|void([string $deprecated=&#039;&#039;],[bool $deprecated_2=&#039;&#039;])|
comments_link_feed|Outputs the link to the comments for the current post in an xml safe way|none()|
comments_number|Display the language string for the number of comments the current post has.|void([string $zero=false],[string $one=false],[string $more=false],[string $deprecated=&#039;&#039;])|
comments_open|Whether the current post is open for comments.|bool([int $post_id=NULL])|
comments_popup_link|Displays the link to the comments popup window for the current post ID.|null([string $zero=false],[string $one=false],[string $more=false],[string $css_class=&#039;&#039;],[string $none=false])|
comments_popup_script|Displays the JS popup script to show a comment.|void([int $width=400],[int $height=400],[string $file=&#039;&#039;])|
comments_rss|Return link to the post RSS feed.|string()|
comments_rss_link|Print RSS comment feed link.|void([string $link_text=&#039;CommentsRSS&#039;])|
comments_template|Loads the comment template specified in $file.|null([string $file=&#039;/comments.php&#039;],[bool $separate_comments=false])|
compression_test|Test support for compressing JavaScript from PHP|void()|
confirm_another_blog_signup||void( $domain, $path, $blog_title, $user_name,[ $user_email=&#039;&#039;],[ $meta=&#039;&#039;])|
confirm_blog_signup||void( $domain, $path, $blog_title,[ $user_name=&#039;&#039;],[ $user_email=&#039;&#039;], $meta)|
confirm_delete_users||void( $users)|
confirm_user_signup||void( $user_name, $user_email)|
content_url|Retrieve the url to the content directory.|string([string $path=&#039;&#039;])|
convert_chars|Converts a number of characters from a string.|string(string $content,[string $deprecated=&#039;&#039;])|
convert_smilies|Convert text equivalent of smilies to images.|string(string $text)|
convert_to_screen|Convert a screen string to a screen object|objectconvert_to_screen(string $screen)|
copy_dir|Copies a directory from one location to another via the WordPress Filesystem Abstraction.|mixed(string $from,string $to,[array $skip_list=array()])|
core_update_footer||void([ $msg=&#039;&#039;])|
core_upgrade_preamble|Display upgrade WordPress for downloading latest or upgrading automatically form.|null()|
count_many_users_posts|Number of posts written by a list of users.|array( $users,[string|array $post_type=&#039;post&#039;],array $user_ids)|
count_user_posts|Number of posts user has written.|int(int $userid)|
count_users|Count number of users who have each of the user roles.|array([string $strategy=&#039;time&#039;])|
create_empty_blog|Create an empty blog.|int(string $domain,string $path, $weblog_title,[ $site_id=1],string $string,int $site)|
create_initial_post_types|Creates the initial post types when 'init' action is fired.|void()|
create_initial_taxonomies|Creates the initial taxonomies when 'init' action is fired.|void()|
create_user|An alias of wp_create_user().|int(string $username,string $password,string $email)|
current_filter|Retrieve the name of the current filter or action.|string()|
current_theme_info||unknown()|
current_theme_supports|Checks a theme's support for a given feature|boolean(string $feature)|
current_time|Retrieve the current time based on specified type.|int|string(string $type,[int|bool $gmt=0])|
current_user_can|Whether current user has capability or role.|bool(string $capability)|
current_user_can_for_blog|Whether current user has a capability or role for a given blog.|bool(int $blog_id,string $capability)|
dashboard_browser_nag_class||void( $classes)|
date_i18n|Retrieve the date in localized format, based on timestamp.|string(string $dateformatstring,[int $unixtimestamp=false],[bool $gmt=false])|
dbDelta||unknown(unknown_type $queries,[unknown_type $execute=true])|
deactivate_plugins|Deactivate a single plugin or multiple plugins.|void(string|array $plugins,[bool $silent=false])|
deactivate_sitewide_plugin||void([ $plugin=false])|
dead_db|Load custom DB error or display WordPress DB error.|void()|
debug_fclose|Close the debugging file handle.|void(resource $fp)|
debug_fopen|Open the file handle for debugging.|bool|resource(string $filename,string $mode)|
debug_fwrite|Write contents to the file used for debugging.|void(resource $fp,string $string)|
default_password_nag||void()|
default_password_nag_edit_user||void( $user_ID, $old_data)|
default_password_nag_handler||void([ $errors=false])|
default_topic_count_scale|Default topic count scaling for tag links|integer(integer $count)|
default_topic_count_text|Default text for tooltip for tag links|string(integer $count)|
delete_all_user_settings|Delete the user settings of the current user.|void()|
delete_blog_option|Delete an option for a particular blog.|void(int $id,string $key)|
delete_comment_meta|Remove metadata matching criteria from a comment.|bool(int $comment_id,string $meta_key,[mixed $meta_value=&#039;&#039;])|
delete_get_calendar_cache|Purge the cached results of get_calendar.|void()|
delete_meta||unknown(unknown_type $mid)|
delete_metadata|Delete metadata for the specified object.|bool(string $meta_type,int $object_id,string $meta_key,[string $meta_value=&#039;&#039;],[bool $delete_all=false])|
delete_option|Removes option by name. Prevents removal of protected WordPress options.|bool(string $option)|
delete_plugins|Remove directory and files of a plugin for a single or list of plugin(s).|mixed(array $plugins,[string $redirect=&#039;&#039;])|
delete_post_meta|Remove metadata matching criteria from a post.|bool(int $post_id,string $meta_key,[mixed $meta_value=&#039;&#039;])|
delete_post_meta_by_key|Delete everything from post meta matching meta key.|bool(string $post_meta_key)|
delete_site_option|Removes site option by name.|bool(string $option)|
delete_site_transient|Delete a site transient|bool(string $transient)|
delete_theme|Remove a theme|mixed(string $template,[string $redirect=&#039;&#039;])|
delete_transient|Delete a transient|bool(string $transient)|
delete_user_meta|Remove metadata matching criteria from a user.|bool(int $user_id,string $meta_key,[mixed $meta_value=&#039;&#039;])|
delete_user_option|Delete user option with global blog capability.|unknown(int $user_id,string $option_name,[bool $global=false])|
delete_user_setting|Delete user interface settings.|bool(mixed $names)|
delete_usermeta|Remove user meta data.|bool(int $user_id,string $meta_key,[mixed $meta_value=&#039;&#039;])|
deslash||string(string $content)|
did_action|Retrieve the number times an action is fired.|int(string $tag)|
disabled|Outputs the html disabled attribute.|string(mixed $disabled,[mixed $current=true],[bool $echo=true])|
discover_pingback_server_uri|Finds a pingback server URI based on the given URL.|bool|string(string $url,[int $deprecated=&#039;&#039;])|
dismiss_core_update||void( $update)|
dismissed_updates||void()|
display_header|Display install header.|void()|
display_plugins_table|Display plugin content based on plugin list.|void()|
display_setup_form|Display installer setup form.|void([ $error=null])|
display_space_usage||void()|
display_theme||void( $theme,[ $actions=null],[ $show_details=true])|
display_themes|Display theme content based on theme list.|void()|
do_action|Execute functions hooked on a specific action hook.|null(string $tag,[ $arg=&#039;&#039;],mixed $arg,...)|
do_action_ref_array|Execute functions hooked on a specific action hook, specifying arguments in an array.|null(string $tag,array $args)|
do_activate_header||void()|
do_all_pings|Perform all pingbacks, enclosures, trackbacks, and send to pingback services.|void()|
do_core_upgrade|Upgrade WordPress core display.|null([ $reinstall=false])|
do_dismiss_core_update||void()|
do_enclose|Check content for video and audio links to add as enclosures.|void(string $content,int $post_ID)|
do_feed|Loads the feed template from the use of an action hook.|void()|
do_feed_atom|Load either Atom comment feed or Atom posts feed.|void(bool $for_comments)|
do_feed_rdf|Load the RDF RSS 0.91 Feed template.|void()|
do_feed_rss|Load the RSS 1.0 Feed Template|void()|
do_feed_rss2|Load either the RSS2 comment feed or the RSS2 posts feed.|void(bool $for_comments)|
do_meta_boxes|Meta-Box template function|int(string $page,string $context,mixed $object)|
do_robots|Display the robot.txt file content.|void()|
do_settings_fields|Print out the settings fields for a particular settings section|void(string $page,section $section)|
do_settings_sections|Prints out all settings sections added to a particular settings page|void(string $page)|
do_shortcode|Search content for shortcodes and filter shortcodes through their hooks.|string(string $content)|
do_signup_header||void()|
do_trackbacks|Perform trackbacks.|void(int $post_id)|
do_undismiss_core_update||void()|
documentation_link|Unused Admin function.|void()|
domain_exists|Check whether a blogname is already taken.|int(string $domain,string $path,[int $site_id=1])|
download_url|Downloads a url to a local temporary file using the WordPress HTTP Class.|mixed(string $url,[int $timeout=300])|
drop_index||bool(string $table,string $index)|
dropdown_categories||void([unknown_type $default=0],[unknown_type $parent=0],[unknown_type $popular_ids=array()])|
dropdown_cats||unknown([int $optionall=1],[string $all=&#039;All&#039;],[string $orderby=&#039;ID&#039;],[string $order=&#039;asc&#039;],[int $show_last_update=0],[int $show_count=0],[int $hide_empty=1],[bool $optionnone=false],[int $selected=0],[int $exclude=0])|
dropdown_link_categories||void([unknown_type $default=0])|
dynamic_sidebar|Display dynamic sidebar.|bool([int|string $index=1])|
edit_bookmark_link|Display edit bookmark (literally a URL external to blog) link anchor content.|void([string $link=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[int $bookmark=null])|
edit_comment|Update a comment with values provided in $_POST.|void()|
edit_comment_link|Display or retrieve edit comment link with formatting.|string|null([string $link=null],[string $before=&#039;&#039;],[string $after=&#039;&#039;])|
edit_link|Update or insert a link using values provided in $_POST.|int|WP_Error([int $link_id=0])|
edit_post|Update an existing post with values provided in $_POST.|int([array $post_data=null])|
edit_post_link|Display edit post link for post.|void([string $link=null],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[int $id=0])|
edit_tag_link|Display or retrieve edit tag link with formatting.|string([string $link=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[int|object $tag=null])|
edit_term_link|Display or retrieve edit term link with formatting.|string([string $link=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[object $term=null],[ $echo=true])|
edit_user|Edit user settings based on contents of $_POST|int([int $user_id=0])|
email_exists|Checks whether the given email exists.|bool|int(string $email)|
enqueue_comment_hotkeys_js||void()|
ent2ncr|Converts named entities into numbered entities.|string(string $text)|
esc_attr|Escaping for HTML attributes.|string(string $text)|
esc_attr__|Retrieves the translation of $text and escapes it for safe use in an attribute.|string(string $text,[string $domain=&#039;default&#039;])|
esc_attr_e|Displays translated text that has been escaped for safe use in an attribute.|void(string $text,[string $domain=&#039;default&#039;])|
esc_attr_x||void( $single, $context,[ $domain=&#039;default&#039;])|
esc_html|Escaping for HTML blocks.|string(string $text)|
esc_html__|Retrieves the translation of $text and escapes it for safe use in HTML output.|string(string $text,[string $domain=&#039;default&#039;])|
esc_html_e|Displays translated text that has been escaped for safe use in HTML output.|void(string $text,[string $domain=&#039;default&#039;])|
esc_html_x||void( $single, $context,[ $domain=&#039;default&#039;])|
esc_js|Escape single quotes, htmlspecialchar &quot; &lt; &gt; &amp;, and fix line endings.|string(string $text)|
esc_sql|Escapes data for use in a MySQL query|string(string $sql)|
esc_textarea|Escaping for textarea values.|string(string $text)|
esc_url|Checks and cleans a URL.|string(string $url,[array $protocols=null],[string $_context=&#039;display&#039;])|
esc_url_raw|Performs esc_url() for database usage.|string(string $url,[array $protocols=null])|
export_date_options||void()|
export_wp|Generates the WXR export file for download|void([array $args=array()])|
extract_from_markers||array(unknown_type $filename,unknown_type $marker)|
favorite_actions||void([ $screen=null])|
feed_content_type|Return the content type for specified feed type.|void([ $type=&#039;&#039;])|
feed_links|Display the links to the general feeds.|void([array $args=array()])|
feed_links_extra|Display the links to the extra feeds such as category feeds.|void([array $args=array()])|
fetch_feed|Build SimplePie object based on RSS or Atom feed from URL.|WP_Error|SimplePie(string $url)|
file_is_displayable_image|Validate that file is suitable for displaying within a web page.|bool(string $path)|
file_is_valid_image|Validate that file is an image.|bool(string $path)|
filter_SSL|Formats an String URL to use HTTPS if HTTP is found.|void( $url)|
find_core_update||void( $version, $locale)|
find_posts_div||void([unknown_type $found_action=&#039;&#039;])|
fix_import_form_size|Get the remaining upload space for this blog.|int(int $size)|
fix_phpmailer_messageid|Correct From host on outgoing mail to match the site domain|void( $phpmailer)|
floated_admin_avatar|Add avatars to relevant places in admin, or try to.|string(string $name)|
flush_rewrite_rules|Remove rewrite rules and then recreate rewrite rules.|void([bool $hard=true])|
force_balance_tags|Balances tags of string using a modified stack.|string(string $text)|
force_ssl_admin|Whether to force SSL used for the Administration Screens.|bool([string|bool $force=null])|
force_ssl_content|Whether to force SSL on content.|bool([string|bool $force=&#039;&#039;])|
force_ssl_login|Whether SSL login should be forced.|bool([string|bool $force=null])|
form_option|Print option value after sanitizing for forms.|void(string $option)|
format_code_lang||void([ $code=&#039;&#039;])|
format_to_edit|Acts on text which is about to be edited.|string(string $content,[bool $richedit=false])|
format_to_post|Holder for the 'format_to_post' filter.|string(string $content)|
funky_javascript_fix|Fixes javascript bugs in browsers.|string(string $text)|
gallery_shortcode|The Gallery shortcode.|string(array $attr)|
gd_edit_image_support|Check if the installed version of GD supports particular image type|bool(string $mime_type)|
generate_random_password||void([ $len=8])|
generic_ping|Sends pings to all of the ping site services.|int([int $post_id=0])|
get_404_template|Retrieve path of 404 template in current or parent template.|string()|
get_active_blog_for_user|Get one of a user's active blogs|objectget_active_blog_for_user(int $user_id)|
get_adjacent_post|Retrieve adjacent post.|mixed([bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;],[bool $previous=true])|
get_adjacent_post_rel_link|Get adjacent post relational link.|string([string $title=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;],[bool $previous=true])|
get_admin_page_parent||void([ $parent=&#039;&#039;])|
get_admin_page_title||void()|
get_admin_url|Retrieve the url to the admin area for a given site.|string([int $blog_id=null],[string $path=&#039;&#039;],[string $scheme=&#039;admin&#039;])|
get_admin_users_for_domain|Get the admin for a domain/path combination.|array([string $sitedomain=&#039;&#039;],[string $path=&#039;&#039;])|
get_all_category_ids|Retrieves all category IDs.|objectget_all_category_ids()|
get_all_page_ids|Get a list of page IDs.|array()|
get_all_user_settings|Retrieve all user interface settings.|array()|
get_alloptions|Retrieve all autoload options, or all options if no autoloaded ones exist.|array()|
get_alloptions_110|Retrieve all options as it was for 1.2.|array()|
get_allowed_mime_types|Retrieve list of allowed mime types and file extensions.|array()|
get_allowed_themes|Get the allowed themes for the current blog.|array()|
get_ancestors|Get an array of ancestor IDs for a given object.|array([int $object_id=0],[string $object_type=&#039;&#039;])|
get_approved_comments|Retrieve the approved comments for post $post_id.|array(int $post_id)|
get_archive_template|Retrieve path of archive template in current or parent template.|string()|
get_archives||unknown([string $type=&#039;&#039;],[string $limit=&#039;&#039;],[string $format=&#039;html&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[bool $show_post_count=false])|
get_archives_link|Retrieve archive link content based on predefined or custom code.|string(string $url,string $text,[string $format=&#039;html&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;])|
get_attached_file|Retrieve attached file path based on attachment ID.|string(int $attachment_id,[bool $unfiltered=false])|
get_attachment_fields_to_edit||unknown(unknown_type $post,[unknown_type $errors=null])|
get_attachment_icon|Retrieve HTML content of icon attachment image element.|string([int $id=0],[bool $fullsize=false],[array $max_dims=false])|
get_attachment_icon_src|Retrieve icon URL and Path.|array([int $id=0],[bool $fullsize=false])|
get_attachment_innerHTML|Retrieve HTML content of image element.|string([int $id=0],[bool $fullsize=false],[array $max_dims=false])|
get_attachment_link|Retrieve permalink for attachment.|string([int $id=false])|
get_attachment_taxonomies|Retrieve taxonomies attached to the attachment.|array(int|array|object $attachment)|
get_attachment_template|Retrieve path of attachment template in current or parent template.|string()|
get_author_feed_link|Retrieve the feed link for a given author.|string(int $author_id,[string $feed=&#039;&#039;])|
get_author_link|Returns or Prints link to the author's posts.|string|null([bool $echo=false],int $author_id,[string $author_nicename=&#039;&#039;])|
get_author_name|Retrieve the specified author's preferred display name.|string([int $auth_id=false])|
get_author_posts_url|Retrieve the URL to the author page for the user with the ID provided.|string( $author_id,[ $author_nicename=&#039;&#039;])|
get_author_rss_link|Print/Return link to author RSS feed.|string|null([bool $echo=false],[int $author_id=1])|
get_author_template|Retrieve path of author template in current or parent template.|string()|
get_author_user_ids||array()|
get_autotoggle|Gets the auto_toggle setting.|int([int $id=0])|
get_available_languages|Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR.|array([string $dir=null])|
get_available_post_mime_types||unknown([unknown_type $type=&#039;attachment&#039;])|
get_available_post_statuses|Get all the possible statuses for a post_type|array([string $type=&#039;post&#039;])|
get_avatar|Retrieve the avatar for a user who provided a user ID or email address.|string(int|string|object $id_or_email,[int $size=&#039;96&#039;],[string $default=&#039;&#039;],[string $alt=false])|
get_background_color|Retrieve value for custom background color.|string()|
get_background_image|Retrieve background image for custom background.|string()|
get_blog_count|The number of active sites on your installation.|int([int $id=0])|
get_blog_details|Retrieve the details for a blog from the blogs table and blog options.|objectget_blog_details(int|string|array $fields,[bool $get_all=true])|
get_blog_id_from_url|Get a blog's numeric ID from its URL.|int(string $domain,[string $path=&#039;/&#039;])|
get_blog_list||void([ $start=0],[ $num=10],[ $deprecated=&#039;&#039;])|
get_blog_option|Retrieve option value based on setting name and blog_id.|mixed(int $blog_id,string $setting,[string $default=false])|
get_blog_permalink|Get the permalink for a post on another blog.|string(int $_blog_id,int $post_id)|
get_blog_post|Get a blog post from any site on the network.|objectget_blog_post(int $blog_id,int $post_id)|
get_blog_status|Get a blog details field.|bool(int $id,string $pref)|
get_blogaddress_by_domain|Get a full blog URL, given a domain and a path.|string(string $domain,string $path)|
get_blogaddress_by_id|Get a full blog URL, given a blog id.|string(int $blog_id)|
get_blogaddress_by_name|Get a full blog URL, given a blog name.|string(string $blogname)|
get_bloginfo|Retrieve information about the blog.|string([string $show=&#039;&#039;],[string $filter=&#039;raw&#039;])|
get_bloginfo_rss|RSS container for the bloginfo function.|string([string $show=&#039;&#039;])|
get_blogs_of_user|Get the blogs a user belongs to.|array(int $id,[bool $all=false])|
get_body_class|Retrieve the classes for the body element as an array.|array([string|array $class=&#039;&#039;])|
get_bookmark|Retrieve Bookmark data|array|objectget_bookmark(mixed $bookmark,[string $output=OBJECT],[string $filter=&#039;raw&#039;])|
get_bookmark_field|Retrieve single bookmark data item or field.|string(string $field,int $bookmark,[string $context=&#039;display&#039;])|
get_bookmarks|Retrieves the list of bookmarks|array([string|array $args=&#039;&#039;])|
get_boundary_post|Retrieve boundary post.|object([bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;],[bool $start=true])|
get_boundary_post_rel_link|Get boundary post relational link.|string([string $title=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;],[bool $start=true])|
get_broken_themes||unknown()|
get_calendar|Display calendar with days that have posts as links.|void([bool $initial=true],[bool $echo=true])|
get_cancel_comment_reply_link|Retrieve HTML content for cancel comment reply link.|void([string $text=&#039;&#039;])|
get_cat_ID|Retrieve the ID of a category from its name.|int([string $cat_name=&#039;General&#039;])|
get_cat_name|Retrieve the name of a category from its ID.|string(int $cat_id)|
get_categories|Retrieve list of category objects.|array([string|array $args=&#039;&#039;])|
get_category|Retrieves category data given a category ID or category object.|mixed(int|object $category,[string $output=OBJECT],[string $filter=&#039;raw&#039;])|
get_category_by_path|Retrieve category based on URL containing the category slug.|null|object|array(string $category_path,[bool $full_match=true],[string $output=OBJECT])|
get_category_by_slug|Retrieve category object by category slug.|objectget_category_by_slug(string $slug)|
get_category_children|Retrieve category children list separated before and after the term IDs.|string(int $id,[string $before=&#039;/&#039;],[string $after=&#039;&#039;],[array $visited=array()])|
get_category_feed_link|Retrieve the feed link for a category.|string(int $cat_id,[string $feed=&#039;&#039;])|
get_category_link|Retrieve category link URL.|string(int|object $category)|
get_category_parents|Retrieve category parents with separator.|string(int $id,[bool $link=false],[string $separator=&#039;/&#039;],[bool $nicename=false],[array $visited=array()])|
get_category_rss_link|Print/Return link to category RSS2 feed.|string|null([bool $echo=false],[int $cat_ID=1])|
get_category_template|Retrieve path of category template in current or parent template.|string()|
get_category_to_edit||unknown(unknown_type $id)|
get_catname|Retrieve the category name by the category ID.|string(int $cat_ID)|
get_children|Retrieve all children of the post parent ID.|array|bool([mixed $args=&#039;&#039;],[string $output=OBJECT])|
get_clean_basedomain|Get base domain of network.|string()|
get_cli_args|Returns value of command line params.|mixed(string $param,[bool $required=false])|
get_column_headers|Get the column headers for a screen|array(string|object $screen)|
get_comment|Retrieves comment data given a comment ID or comment object.|object|array|null( &$comment,[string $output=OBJECT],object|string|int $comment)|
get_comment_ID|Retrieve the comment id of the current comment.|int()|
get_comment_author|Retrieve the author of the current comment.|string([int $comment_ID=0])|
get_comment_author_IP|Retrieve the IP address of the author of the current comment.|string([int $comment_ID=0])|
get_comment_author_email|Retrieve the email of the author of the current comment.|string([int $comment_ID=0])|
get_comment_author_email_link|Return the html email link to the author of the current comment.|void([string $linktext=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;])|
get_comment_author_link|Retrieve the html link to the url of the author of the current comment.|string([int $comment_ID=0])|
get_comment_author_rss|Retrieve the current comment author for use in the feeds.|string()|
get_comment_author_url|Retrieve the url of the author of the current comment.|string([int $comment_ID=0])|
get_comment_author_url_link|Retrieves the HTML link of the url of the author of the current comment.|string([string $linktext=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;])|
get_comment_class|Returns the classes for the comment div as an array|array([string|array $class=&#039;&#039;],[int $comment_id=null],[int $post_id=null])|
get_comment_count|The amount of comments in a post or total comments.|array([int $post_id=0])|
get_comment_date|Retrieve the comment date of the current comment.|string([string $d=&#039;&#039;],[int $comment_ID=0])|
get_comment_excerpt|Retrieve the excerpt of the current comment.|string([int $comment_ID=0])|
get_comment_guid|Retrieve the feed GUID for the current comment.|bool|string([int|object $comment_id=null])|
get_comment_id_fields|Retrieve hidden input HTML for replying to comments.|string([ $id=0])|
get_comment_link|Retrieve the link to a given comment.|string([object|string|int $comment=null],[array $args=array()])|
get_comment_meta|Retrieve comment meta field for a comment.|mixed(int $comment_id,string $key,[bool $single=false])|
get_comment_pages_count|Calculate the total number of comment pages.|int([array $comments=null],[int $per_page=null],[boolean $threaded=null])|
get_comment_reply_link|Retrieve HTML content for reply to comment link.|string|bool|null([array $args=array()],[int $comment=null],[int $post=null])|
get_comment_statuses|Retrieve all of the WordPress supported comment statuses.|array()|
get_comment_text|Retrieve the text of the current comment.|string([int $comment_ID=0])|
get_comment_time|Retrieve the comment time of the current comment.|string([string $d=&#039;&#039;],[bool $gmt=false],[bool $translate=true])|
get_comment_to_edit||bool|objectget_comment_to_edit(int $id)|
get_comment_type|Retrieve the comment type of the current comment.|string([int $comment_ID=0])|
get_commentdata|Retrieve an array of comment data about comment $comment_ID.|array(int $comment_ID,[int $no_cache=0],[bool $include_unapproved=false])|
get_comments|Retrieve a list of comments.|array([mixed $args=&#039;&#039;])|
get_comments_link|Retrieves the link to the current post comments.|string([int $post_id=0])|
get_comments_number|Retrieve the amount of comments a post has.|int([int $post_id=0])|
get_comments_pagenum_link|Retrieve page numbers links.|string([int $pagenum=1],[ $max_page=0])|
get_comments_popup_template|Retrieve path of comment popup template in current or parent template.|string()|
get_core_updates|Get available core updates|array([array $options=array()])|
get_current_blog_id|Retrieve the current blog id|int()|
get_current_screen|Get the current screen object|objectget_current_screen()|
get_current_site|Get the current site info.|object()|
get_current_theme|Retrieve current theme display name.|string()|
get_current_user_id|Get the current user's ID|int()|
get_currentuserinfo|Populate global variables with information about the currently logged in user.|bool|null()|
get_dashboard_blog|Get the &quot;dashboard blog&quot;, the blog where users without a blog edit their profile data.|int()|
get_dashboard_url|Get the URL to the user's dashboard.|string(int $user_id,[string $path=&#039;&#039;],[string $scheme=&#039;admin&#039;])|
get_date_from_gmt|Converts a GMT date into the correct format for the blog.|string(string $string,[string $format=&#039;Y-m-dH:i:s&#039;])|
get_date_template|Retrieve path of date template in current or parent template.|string()|
get_day_link|Retrieve the permalink for the day archives with year and month.|string(bool|int $year,bool|int $month,bool|int $day)|
get_default_feed|Retrieve the default feed.|string()|
get_default_link_to_edit|Retrieve the default link for editing.|objectget_default_link_to_edit()|
get_default_page_to_edit|Get the default page information to use.|objectget_default_page_to_edit()|
get_default_post_to_edit|Default post information to use when populating the &quot;Write Post&quot; form.|objectget_default_post_to_edit([string $post_type=&#039;post&#039;],[ $create_in_db=false])|
get_delete_post_link|Retrieve delete posts link for post.|string([int $id=0],[string $deprecated=&#039;&#039;],[bool $force_delete=false])|
get_dirsize|Get the size of a directory.|int(string $directory)|
get_dropins|Check the wp-content directory and retrieve all drop-ins with any plugin data.|array()|
get_edit_bookmark_link|Display edit bookmark (literally a URL external to blog) link.|string([int $link=0])|
get_edit_comment_link|Retrieve edit comment link.|string([int $comment_id=0])|
get_edit_post_link|Retrieve edit posts link for post.|string([int $id=0],[string $context=&#039;display&#039;])|
get_edit_profile_url|Get the URL to the user's profile editor.|string(int $user,[string $scheme=&#039;admin&#039;])|
get_edit_tag_link|Retrieve edit tag link.|string(int $tag_id,[string $taxonomy=&#039;post_tag&#039;])|
get_edit_term_link|Retrieve edit term url.|string(int $term_id,string $taxonomy,[string $object_type=&#039;&#039;])|
get_editable_authors||array|bool(int $user_id)|
get_editable_roles|Fetch a filtered list of user roles that the current user is  allowed to edit.|unknown()|
get_editable_user_ids||unknown(int $user_id,[bool $exclude_zeros=true],[ $post_type=&#039;post&#039;])|
get_enclosed|Retrieve enclosures already enclosed for a post.|array(int $post_id)|
get_extended|Get extended entry info (&lt;!--more--&gt;).|array(string $post)|
get_feed_link|Retrieve the permalink for the feed type.|string([string $feed=&#039;&#039;])|
get_file_data|Retrieve metadata from a file.|void(string $file,array $default_headers,[string $context=&#039;&#039;])|
get_file_description|Get the description for standard WordPress theme files and other various standard  WordPress files|string(string $file)|
get_filesystem_method|Determines which Filesystem Method to use.|string([array $args=array()],[string $context=false])|
get_footer|Load footer template.|void([string $name=null])|
get_front_page_template|Retrieve path of front-page template in current or parent template.|string()|
get_gmt_from_date|Returns a date in the GMT equivalent.|string(string $string,[string $format=&#039;Y-m-dH:i:s&#039;])|
get_header|Load header template.|void([string $name=null])|
get_header_image|Retrieve header image for custom header.|string()|
get_header_textcolor|Retrieve text color for custom header.|string()|
get_hidden_columns|Get a list of hidden columns.|array(string|object $screen)|
get_hidden_meta_boxes|Get Hidden Meta Boxes|array(string|object $screen)|
get_home_path|Get the absolute filesystem path to the root of the WordPress installation|string()|
get_home_template|Retrieve path of home template in current or parent template.|string()|
get_home_url|Retrieve the home url for a given site.|string([int $blog_id=null],[string $path=&#039;&#039;],[string $scheme=null])|
get_id_from_blogname|Given a blog's (subdomain or directory) name, retrieve it's id.|int(string $name)|
get_image_send_to_editor||unknown(unknown_type $id, $caption,unknown_type $title,unknown_type $align,[unknown_type $url=&#039;&#039;],[unknown_type $rel=false],[unknown_type $size=&#039;medium&#039;],[unknown_type $alt=&#039;&#039;])|
get_image_tag|An &lt;img src /&gt; tag for an image attachment, scaling it down if requested.|string(int $id,string $alt,string $title,string $align,[string $size=&#039;medium&#039;])|
get_images_from_uri|Retrieve all image URLs from given URI.|string(string $uri)|
get_importers|Retrieve list of importers.|array()|
get_index_rel_link|Get site index relational link.|string()|
get_index_template|Retrieve path of index template in current or parent template.|string()|
get_inline_data||void(unknown_type $post)|
get_intermediate_image_sizes|Get the available image sizes|array()|
get_last_updated|Get a list of most recently updated blogs.|array([mixed $deprecated=&#039;&#039;],[int $start=0],[int $quantity=40])|
get_lastcommentmodified|The date the last comment was modified.|string([string $timezone=&#039;server&#039;])|
get_lastpostdate|Retrieve the date that the last post was published.|string([string $timezone=&#039;server&#039;])|
get_lastpostmodified|Retrieve last post modified date depending on timezone.|string([string $timezone=&#039;server&#039;])|
get_link|Retrieve bookmark data based on ID.|object|array(int $bookmark_id,[string $output=OBJECT],[ $filter=&#039;raw&#039;])|
get_link_to_edit|Retrieve link data based on ID.|objectget_link_to_edit(int $link_id)|
get_linkcatname|Gets the name of category by id.|string([int $id=0])|
get_linkobjects|Gets an array of link objects associated with category n.|unknown([int $category=0],[string $orderby=&#039;name&#039;],[int $limit=0])|
get_linkobjectsbyname|Gets an array of link objects associated with category $cat_name.|unknown([string $cat_name=&quot;noname&quot;],[string $orderby=&#039;name&#039;],[int $limit=-1])|
get_linkrating||unknown(object $link)|
get_links|Gets the links associated with category by id.|null|string([int $category=-1],[string $before=&#039;&#039;],[string $after=&#039;&lt;br/&gt;&#039;],[string $between=&#039;&#039;],[bool $show_images=true],[string $orderby=&#039;name&#039;],[bool $show_description=true],[bool $show_rating=false],[int $limit=-1],[int $show_updated=1],[bool $echo=true])|
get_links_list|Output entire list of links by category.|void([string $order=&#039;name&#039;])|
get_links_withrating|Gets the links associated with category n and display rating stars/chars.|void([int $category=-1],[string $before=&#039;&#039;],[string $after=&#039;&lt;br/&gt;&#039;],[string $between=&quot;&quot;],[bool $show_images=true],[string $orderby=&#039;id&#039;],[bool $show_description=true],[string $limit=-1],[int $show_updated=0])|
get_linksbyname|Gets the links associated with category $cat_name.|void([string $cat_name=&quot;noname&quot;],[string $before=&#039;&#039;],[string $after=&#039;&lt;br/&gt;&#039;],[string $between=&quot;&quot;],[bool $show_images=true],[string $orderby=&#039;id&#039;],[bool $show_description=true],[bool $show_rating=false],[int $limit=-1],[int $show_updated=0])|
get_linksbyname_withrating|Gets the links associated with category 'cat_name' and display rating stars/chars.|void([string $cat_name=&quot;noname&quot;],[string $before=&#039;&#039;],[string $after=&#039;&lt;br/&gt;&#039;],[string $between=&quot;&quot;],[bool $show_images=true],[string $orderby=&#039;id&#039;],[bool $show_description=true],[int $limit=-1],[int $show_updated=0])|
get_locale|Gets the current locale.|string()|
get_locale_stylesheet_uri|Retrieve localized stylesheet URI.|string()|
get_manifest|Retrieve list of all cacheable WP files|void()|
get_media_item|Retrieve HTML form for modifying the image attachment.|string(int $attachment_id,[string|array $args=null])|
get_media_items|Retrieve HTML for media items of post gallery.|string(int $post_id,array $errors)|
get_meta_keys|Get a list of previously defined keys.|unknown()|
get_meta_sql|Given a meta query, generates SQL clauses to be appended to a main query|array(([array $meta_query=false],string $type,string $primary_table,string $primary_id_column,[object $context=null])|
get_metadata|Retrieve metadata for the specified object.|string|array(string $meta_type,int $object_id,[string $meta_key=&#039;&#039;],[bool $single=false])|
get_month_link|Retrieve the permalink for the month archives with year.|string(bool|int $year,bool|int $month)|
get_most_active_blogs||void([ $num=10],[ $display=true])|
get_most_recent_post_of_user|Get a user's most recent post.|array(int $user_id)|
get_mu_plugins|Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data.|array()|
get_nav_menu_locations|Returns an array with the registered navigation menu locations and the menu assigned to it|array()|
get_next_comments_link|Return the link to next comments pages.|string|null([string $label=&#039;&#039;],[int $max_page=0])|
get_next_post|Retrieve next post that is adjacent to current post.|mixed([bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
get_next_posts_link|Return the next posts pages link.|string|null([string $label=null],[int $max_page=0])|
get_next_posts_page_link|Retrieve next posts pages link.|string([int $max_page=0])|
get_nonauthor_user_ids||void()|
get_num_queries|Retrieve the number of database queries during the WordPress execution.|int()|
get_object_taxonomies|Return all of the taxonomy names that are of $object_type.|array(array|string|object $object,[string $output=&#039;names&#039;])|
get_object_term_cache|Retrieves the taxonomy relationship to the term object id.|bool|array(int|array $id,string $taxonomy)|
get_objects_in_term|Retrieve object_ids of valid taxonomy and term.|WP_Error|array(int|array $term_ids,string|array $taxonomies,[array|string $args=array()])|
get_option|Retrieve option value based on name of option.|mixed(string $option,[ $default=false])|
get_others_drafts|Retrieve drafts from other users.|array(int $user_id)|
get_others_pending|Retrieve pending review posts from other users.|array(int $user_id)|
get_others_unpublished_posts|Retrieve editable posts from other users.|array(int $user_id,[string $type=&#039;any&#039;])|
get_page|Retrieves page data given a page ID or page object.|mixed( &$page,[string $output=OBJECT],[string $filter=&#039;raw&#039;],mixed $page)|
get_page_by_path|Retrieves a page given its path.|mixed(string $page_path,[string $output=OBJECT],[string $post_type=&#039;page&#039;])|
get_page_by_title|Retrieve a page given its title.|mixed(string $page_title,[string $output=OBJECT],[string $post_type=&#039;page&#039;])|
get_page_children|Retrieve child pages from list of pages matching page ID.|array(int $page_id,array $pages)|
get_page_hierarchy|Order the pages with children under parents in a flat list.|array( &$pages,[int $page_id=0],array $pages)|
get_page_link|Retrieve the permalink for current page or page ID.|string([int $id=false],[bool $leavename=false],[bool $sample=false])|
get_page_of_comment|Calculate what page number a comment will appear on for comment paging.|int|null(int $comment_ID,[array $args=array()])|
get_page_statuses|Retrieve all of the WordPress support page statuses.|array()|
get_page_template|Retrieve path of page template in current or parent template.|string()|
get_page_templates|Get the Page Templates available in this theme|array()|
get_page_uri|Builds URI for a page.|string(mixed $page)|
get_paged_template|Retrieve path of paged template in current or parent template.|string()|
get_pagenum_link|Retrieve get links for page numbers.|string([int $pagenum=1])|
get_pages|Retrieve a list of pages.|array([mixed $args=&#039;&#039;])|
get_parent_post_rel_link|Get parent post relational link.|string([string $title=&#039;%title&#039;])|
get_pending_comments_num|Get the number of pending comments on a post or posts|int|array(int|array $post_id)|
get_permalink|Retrieve full permalink for current post or post ID.|string([int $id=0],[bool $leavename=false])|
get_plugin_data|Parse the plugin contents to retrieve plugin's metadata.|array(string $plugin_file,[bool $markup=true],[bool $translate=true])|
get_plugin_files|Get a list of a plugin's files.|array(string $plugin)|
get_plugin_page_hook||void( $plugin_page, $parent_page)|
get_plugin_page_hookname||void( $plugin_page, $parent_page)|
get_plugin_updates||void()|
get_plugins|Check the plugins directory and retrieve all plugin files with plugin data.|array([string $plugin_folder=&#039;&#039;])|
get_post|Retrieves post data given a post ID or post object.|mixed( &$post,[string $output=OBJECT],[string $filter=&#039;raw&#039;],int|object $post)|
get_post_ancestors|Retrieve ancestors of a post.|array(int|object $post)|
get_post_class|Retrieve the classes for the post div as an array.|array([string|array $class=&#039;&#039;],[int $post_id=null])|
get_post_comments_feed_link|Retrieve the permalink for the post comments feed.|string([int $post_id=0],[string $feed=&#039;&#039;])|
get_post_custom|Retrieve post meta fields, based on post ID.|array([int $post_id=0])|
get_post_custom_keys|Retrieve meta field names for a post.|array|null([int $post_id=0])|
get_post_custom_values|Retrieve values for a custom post field.|array([string $key=&#039;&#039;],[int $post_id=0])|
get_post_field|Retrieve data from a post field based on Post ID.|WP_Error|string(string $field,id $post,[string $context=&#039;display&#039;])|
get_post_format|Retrieve the format slug for a post|mixed([int|object $post=null])|
get_post_format_link|Returns a link to a post format index.|string($format $format)|
get_post_format_slugs|Retrieves an array of post format slugs.|array()|
get_post_format_string|Returns a pretty, translated version of a post format slug|string(string $slug)|
get_post_format_strings|Returns an array of post format slugs to their translated and pretty display versions|array()|
get_post_meta|Retrieve post meta field for a post.|mixed(int $post_id,string $key,[bool $single=false])|
get_post_meta_by_id||unknown(unknown_type $mid)|
get_post_mime_type|Retrieve the mime type of an attachment based on the ID.|bool|string([int $ID=&#039;&#039;])|
get_post_mime_types|Get default post mime types|array()|
get_post_modified_time|Retrieve the time at which the post was last modified.|string([string $d=&#039;U&#039;],[bool $gmt=false],[int|object $post=null],[bool $translate=false])|
get_post_permalink|Retrieve the permalink for a post with a custom post type.|string([int $id=0],[bool $leavename=false],[bool $sample=false])|
get_post_reply_link|Retrieve HTML content for reply to post link.|string|bool|null([array $args=array()],[int|object $post=null])|
get_post_stati|Get a list of all registered post status objects.|array([array|string $args=array()],[string $output=&#039;names&#039;],[string $operator=&#039;and&#039;])|
get_post_status|Retrieve the post status based on the Post ID.|string|bool([int $ID=&#039;&#039;])|
get_post_status_object|Retrieve a post status object by name|objectget_post_status_object(string $post_status)|
get_post_statuses|Retrieve all of the WordPress supported post statuses.|array()|
get_post_taxonomies|Retrieve all taxonomies of a post with just the names.|array([int $post=0])|
get_post_thumbnail_id|Retrieve Post Thumbnail ID.|int([int $post_id=null])|
get_post_time|Retrieve the time at which the post was written.|string([string $d=&#039;U&#039;],[bool $gmt=false],[int|object $post=null],[bool $translate=false])|
get_post_to_edit|Get an existing post and format it for editing.|unknown(unknown_type $id)|
get_post_type|Retrieve the post type of the current post or of a given post.|bool|string([mixed $the_post=false])|
get_post_type_archive_feed_link|Retrieve the permalink for a post type archive feed.|string(string $post_type,[string $feed=&#039;&#039;])|
get_post_type_archive_link|Retrieve the permalink for a post type archive.|string(string $post_type)|
get_post_type_capabilities|Builds an object with all post type capabilities out of a post type object|objectget_post_type_capabilities(object $args)|
get_post_type_labels|Builds an object with all post type labels out of a post type object|objectget_post_type_labels(object $post_type_object)|
get_post_type_object|Retrieve a post type object by name|objectget_post_type_object(string $post_type)|
get_post_types|Get a list of all registered post type objects.|array([array|string $args=array()],[string $output=&#039;names&#039;],[string $operator=&#039;and&#039;])|
get_postdata|Entire Post data.|array(int $postid)|
get_posts|Retrieve list of latest posts or posts matching criteria.|array([array $args=null])|
get_posts_by_author_sql|Retrieve the post SQL based on capability, author, and type.|string(string $post_type,[bool $full=true],[int $post_author=null])|
get_posts_nav_link|Return post pages link navigation for previous and next pages.|string([string|array $args=array()])|
get_preferred_from_update_core|Selects the first update version from the update_core option|objectget_preferred_from_update_core()|
get_previous_comments_link|Return the previous comments page link.|string|null([string $label=&#039;&#039;])|
get_previous_post|Retrieve previous post that is adjacent to current post.|mixed([bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
get_previous_posts_link|Return the previous posts pages link.|string|null([string $label=null])|
get_previous_posts_page_link|Retrieve previous post pages link.|string|null()|
get_private_posts_cap_sql|Retrieve the private post SQL based on capability.|string(string $post_type)|
get_profile|Retrieve user data based on field.|void( $field,[ $user=false])|
get_pung|Retrieve URLs already pinged for a post.|array(int $post_id)|
get_queried_object|Retrieve the currently-queried object.  Wrapper for $wp_query-&gt;get_queried_object()|object()|
get_queried_object_id|Retrieve ID of the current queried object. Wrapper for $wp_query-&gt;get_queried_object_id()|int()|
get_query_template|Retrieve path to a template|string(string $type,[array $templates=array()])|
get_query_var|Retrieve variable in the WP_Query class.|mixed(string $var)|
get_random_header_image|Get random header image from registered images in theme.|string()|
get_raw_theme_root|Get the raw theme root relative to the content directory with no filters applied.|string(string $stylesheet_or_template,[ $no_cache=false])|
get_real_file_to_edit|Get the real file system path to a file to edit within the admin|string(string $file)|
get_registered_nav_menus|Returns an array of all registered navigation menus in a theme|array()|
get_role|Retrieve role object.|object(string $role)|
get_sample_permalink||array(int|object $id,[string $title=null],[string $name=null])|
get_sample_permalink_html|sample permalink html|string(int|object $id,[string $new_title=null],[string $new_slug=null])|
get_screen_icon||void([ $screen=&#039;&#039;])|
get_search_comments_feed_link|Retrieve the permalink for the comments feed of the search results.|string([string $search_query=&#039;&#039;],[string $feed=&#039;&#039;])|
get_search_feed_link|Retrieve the permalink for the feed of the search results.|string([string $search_query=&#039;&#039;],[string $feed=&#039;&#039;])|
get_search_form|Display search form.|void([boolean $echo=true])|
get_search_link|Retrieve permalink for search.|string([string $query=&#039;&#039;])|
get_search_query|Retrieve the contents of the search WordPress query variable.|string([bool $escaped=true])|
get_search_template|Retrieve path of search template in current or parent template.|string()|
get_settings|Get value based on option.|string(string $option)|
get_settings_errors|Fetch settings errors registered by add_settings_error()|array([string $setting=&#039;&#039;],[boolean $sanitize=FALSE])|
get_shortcode_regex|Retrieve the shortcode regular expression for searching.|string()|
get_shortcut_link|Retrieve shortcut link.|string()|
get_sidebar|Load sidebar template.|void([string $name=null])|
get_single_template|Retrieve path of single template in current or parent template.|string()|
get_site_allowed_themes||void()|
get_site_option|Retrieve site option value based on name of option.|mixed(string $option,[mixed $default=false],[bool $use_cache=true])|
get_site_transient|Get the value of a site transient|mixed(string $transient)|
get_site_url|Retrieve the site url for a given site.|string([int $blog_id=null],[string $path=&#039;&#039;],[string $scheme=null])|
get_sitestats|Gets the network's site and user counts.|array()|
get_space_allowed|Returns the upload quota for the current blog.|int()|
get_status_header_desc|Retrieve the description for the HTTP status.|string(int $code)|
get_stylesheet|Retrieve name of the current stylesheet.|string()|
get_stylesheet_directory|Retrieve stylesheet directory path for current theme.|string()|
get_stylesheet_directory_uri|Retrieve stylesheet directory URI.|string()|
get_stylesheet_uri|Retrieve URI of current theme stylesheet.|string()|
get_submit_button|Returns a submit button, with provided text and appropriate class|void([string $text=NULL],[string $type=&#039;primary&#039;],[string $name=&#039;submit&#039;],[bool $wrap=true],[array|string $other_attributes=NULL])|
get_super_admins|Retrieve a list of super admins.|array()|
get_tag|Retrieve post tag by tag ID or tag object.|object|array(int|object $tag,[string $output=OBJECT],[string $filter=&#039;raw&#039;])|
get_tag_feed_link|Retrieve permalink for feed of tag.|string(int $tag_id,[string $feed=&#039;&#039;])|
get_tag_link|Retrieve the link to the tag.|string(int|object $tag)|
get_tag_template|Retrieve path of tag template in current or parent template.|string()|
get_tags|Retrieves all post tags.|array([string|array $args=&#039;&#039;])|
get_tags_to_edit||unknown(unknown_type $post_id,[ $taxonomy=&#039;post_tag&#039;])|
get_tax_sql|Given a taxonomy query, generates SQL to be appended to a main query.|array(array $tax_query,string $primary_table,string $primary_id_column)|
get_taxonomies|Get a list of registered taxonomy objects.|array([array $args=array()],[string $output=&#039;names&#039;],[string $operator=&#039;and&#039;])|
get_taxonomy|Retrieves the taxonomy object of $taxonomy.|object|bool(string $taxonomy)|
get_taxonomy_labels|Builds an object with all taxonomy labels out of a taxonomy object|objectget_taxonomy_labels(object $tax)|
get_taxonomy_template|Retrieve path of taxonomy template in current or parent template.|string()|
get_temp_dir|Determines a writable directory for temporary files.|string()|
get_template|Retrieve name of the current theme.|string()|
get_template_directory|Retrieve current theme directory.|string()|
get_template_directory_uri|Retrieve theme directory URI.|string()|
get_template_part|Load a template part into a template|void(string $slug,[string $name=null])|
get_term|Get all Term data from database by Term ID.|mixed|null|WP_Error(int|object $term,string $taxonomy,[string $output=OBJECT],[string $filter=&#039;raw&#039;])|
get_term_by|Get all Term data from database by Term field and data.|mixed(string $field,string|int $value,string $taxonomy,[string $output=OBJECT],[string $filter=&#039;raw&#039;])|
get_term_children|Merge all term children into a single array of their IDs.|array|WP_Error(string $term_id,string $taxonomy)|
get_term_feed_link|Retrieve the feed link for a taxonomy.|string(int $term_id,[string $taxonomy=&#039;category&#039;],[string $feed=&#039;&#039;])|
get_term_field|Get sanitized Term field.|mixed(string $field,int $term,string $taxonomy,[string $context=&#039;display&#039;])|
get_term_link|Generates a permalink for a taxonomy term archive.|string|WP_Error(object|int|string $term,[string $taxonomy=&#039;&#039;])|
get_term_to_edit|Sanitizes Term for editing.|mixed|null|WP_Error(int|object $id,string $taxonomy)|
get_terms|Retrieve the terms in a given taxonomy or list of taxonomies.|array|WP_Error(string|array $taxonomies,[string|array $args=&#039;&#039;])|
get_terms_to_edit||unknown(unknown_type $post_id,[ $taxonomy=&#039;post_tag&#039;])|
get_the_ID|Retrieve the ID of the current item in the WordPress Loop.|int()|
get_the_attachment_link|Retrieve HTML content of attachment image with link.|string([int $id=0],[bool $fullsize=false],[array $max_dims=false],[bool $permalink=false])|
get_the_author|Retrieve the author of the current post.|string([string $deprecated=&#039;&#039;])|
get_the_author_ID|Retrieve the ID of the author of the current post.|int()|
get_the_author_aim|Retrieve the AIM address of the author of the current post.|string()|
get_the_author_description|Retrieve the description of the author of the current post.|string()|
get_the_author_email|Retrieve the email of the author of the current post.|string()|
get_the_author_firstname|Retrieve the first name of the author of the current post.|string()|
get_the_author_icq|Retrieve the ICQ number of the author of the current post.|string()|
get_the_author_lastname|Retrieve the last name of the author of the current post.|string()|
get_the_author_link|Retrieve either author's link or author's name.|void()|
get_the_author_login|Retrieve the login name of the author of the current post.|string()|
get_the_author_meta|Retrieve the requested data of the author of the current post.|string([string $field=&#039;&#039;],[int $user_id=false])|
get_the_author_msn|Retrieve the MSN address of the author of the current post.|string()|
get_the_author_nickname|Retrieve the nickname of the author of the current post.|string()|
get_the_author_posts|Retrieve the number of posts by the author of the current post.|int()|
get_the_author_url|Retrieve the URL to the home page of the author of the current post.|string()|
get_the_author_yim|Retrieve the Yahoo! IM name of the author of the current post.|string()|
get_the_category|Retrieve post categories.|array([int $id=false])|
get_the_category_by_ID|Retrieve category name based on category ID.|string(int $cat_ID)|
get_the_category_list|Retrieve category list in either HTML list or custom format.|string([string $separator=&#039;&#039;],[string $parents=&#039;&#039;],[int $post_id=false])|
get_the_category_rss|Retrieve all of the post categories, formatted for use in feeds.|string([string $type=null])|
get_the_content|Retrieve the post content.|string([string $more_link_text=null],[string $stripteaser=0])|
get_the_content_feed|Retrieve the post content for feeds.|void([string $feed_type=null])|
get_the_date|Retrieve the date the current $post was written.|string|null([string $d=&#039;&#039;])|
get_the_excerpt|Retrieve the post excerpt.|string([mixed $deprecated=&#039;&#039;])|
get_the_generator|Creates the generator XML or Comment for RSS, ATOM, etc.|string([string $type=&#039;&#039;])|
get_the_guid|Retrieve the Post Global Unique Identifier (guid).|string([int $id=0])|
get_the_modified_author|Retrieve the author who last edited the current post.|string()|
get_the_modified_date|Retrieve the date on which the post was last modified.|string([string $d=&#039;&#039;])|
get_the_modified_time|Retrieve the time at which the post was last modified.|string([string $d=&#039;&#039;])|
get_the_password_form|Retrieve protected post password form content.|string()|
get_the_post_thumbnail|Retrieve Post Thumbnail.|void([int $post_id=null],[string $size=&#039;post-thumbnail&#039;],[string|array $attr=&#039;&#039;])|
get_the_tag_list|Retrieve the tags for a post formatted as a string.|string([string $before=&#039;&#039;],[string $sep=&#039;&#039;],[string $after=&#039;&#039;])|
get_the_tags|Retrieve the tags for a post.|array([int $id=0])|
get_the_taxonomies|Retrieve all taxonomies associated with a post.|array([int $post=0],[array $args=array()])|
get_the_term_list|Retrieve a post's terms as a list with specified format.|string([int $id=0],string $taxonomy,[string $before=&#039;&#039;],[string $sep=&#039;&#039;],[string $after=&#039;&#039;])|
get_the_terms|Retrieve the terms of the taxonomy that are attached to the post.|array|bool([int $id=0],string $taxonomy)|
get_the_time|Retrieve the time at which the post was written.|string([string $d=&#039;&#039;],[int|object $post=null])|
get_the_title|Retrieve post title.|string([int $id=0])|
get_the_title_rss|Retrieve the current post title for the feed.|string()|
get_theme|Retrieve theme data.|array|null(string $theme)|
get_theme_data|Retrieve theme data from parsed theme file.|array(string $theme_file)|
get_theme_feature_list|Retrieve list of WordPress theme features (aka theme tags)|array()|
get_theme_mod|Retrieve theme modification value for the current theme.|string(string $name,[bool|string $default=false])|
get_theme_mods|Retrieve all theme modifications.|array()|
get_theme_root|Retrieve path to themes directory.|string([string $stylesheet_or_template=false])|
get_theme_root_uri|Retrieve URI for themes directory.|string([string $stylesheet_or_template=false])|
get_theme_roots|Retrieve theme roots.|array|string()|
get_theme_support|Gets the theme support arguments passed when registering that support|array(string $feature)|
get_theme_updates||void()|
get_themes|Retrieve list of themes with theme data in theme directory.|array()|
get_to_ping|Retrieve URLs that need to be pinged.|array(int $post_id)|
get_trackback_url|Retrieve The current post's trackback URL.|string()|
get_transient|Get the value of a transient|mixed(string $transient)|
get_translations_for_domain|Returns the Translations instance for a domain. If there isn't one,  returns empty Translations instance.|object&get_translations_for_domain(string $domain)|
get_udims|Calculated the new dimentions for a downsampled image.|mixed(int $width,int $height)|
get_upload_iframe_src||void( $type)|
get_upload_space_available|Determines if there is any upload space left in the current blog's quota.|int()|
get_uploaded_header_images|Get the header images uploaded for the current theme.|array()|
get_user_by|Retrieve user info by a given field|bool|objectget_user_by(string $field,int|string $value)|
get_user_by_email|Retrieve user info by email.|bool|objectget_user_by_email(string $email)|
get_user_count|The number of active users in your installation.|int()|
get_user_details||void( $username)|
get_user_id_from_string|Get a numeric user ID from either an email address or a login.|int(string $string)|
get_user_meta|Retrieve user meta field for a user.|mixed(int $user_id,string $key,[bool $single=false])|
get_user_metavalues|Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users|array(array $ids)|
get_user_option|Retrieve user option that can be either per Site or per Network.|mixed(string $option,[int $user=0],[bool $deprecated=&#039;&#039;])|
get_user_setting|Retrieve user interface setting value based on setting name.|mixed(string $name,[string $default=false])|
get_user_to_edit|Retrieve user data and filter it.|objectget_user_to_edit(int $user_id)|
get_userdata|Retrieve user info by user ID.|bool|objectget_userdata(int $user_id)|
get_userdatabylogin|Retrieve user info by login name.|bool|objectget_userdatabylogin(string $user_login)|
get_usermeta|Retrieve user metadata.|mixed(int $user_id,[string $meta_key=&#039;&#039;])|
get_usernumposts|Number of posts user has written.|void( $userid)|
get_users|Retrieve list of users matching criteria.|array([array $args=array()])|
get_users_drafts|Retrieve the user's drafts.|array(int $user_id)|
get_users_of_blog|Get users for the blog.|array([int $id=&#039;&#039;])|
get_weekstartend|Get the week start and end from the datetime or date string from mysql.|array(string $mysqlstring,[int $start_of_week=&#039;&#039;])|
get_wp_title_rss|Retrieve the blog title for the feed title.|string([string $sep=&#039;&amp;#187;&#039;])|
get_year_link|Retrieve the permalink for the year archives.|string(int|bool $year)|
global_terms|Maintains a canonical list of terms by syncing terms created for each blog with the global terms table.|int(int $term_id,[ $deprecated=&#039;&#039;])|
global_terms_enabled|Whether global terms are enabled.|bool()|
got_mod_rewrite||unknown()|
graceful_fail||void( $message)|
grant_super_admin|Grants super admin privileges.|void(int $user_id)|
gzip_compression|Unused function.|void()|
has_action|Check if any action has been registered for a hook.|int|boolean(string $tag,[callback $function_to_check=false])|
has_category|Check if the current post has any of given category.|bool([ $category=&#039;&#039;],[int|object $post=null],string|int|array $tag)|
has_excerpt|Whether post has excerpt.|bool([int $id=0])|
has_filter|Check if any filter has been registered for a hook.|int|boolean(string $tag,[callback $function_to_check=false])|
has_meta||unknown(unknown_type $postid)|
has_nav_menu|Whether a registered nav menu location has a menu assigned to it.|bool(string $location)|
has_post_format|Check if a post has a particular format|bool(string $format,[object|id $post=null])|
has_post_thumbnail|Check if post has an image attached.|bool([int $post_id=null])|
has_tag|Check if the current post has any of given tags.|bool([string|int|array $tag=&#039;&#039;],[int|object $post=null])|
has_term|Check if the current post has any of given terms.|bool([string|int|array $term=&#039;&#039;],[string $taxonomy=&#039;&#039;],[int|object $post=null])|
have_comments|Whether there are comments to loop over.|bool()|
have_posts|Whether current WordPress query has results to loop over.|bool()|
header_image|Display header image path.|void()|
header_textcolor|Display text color for custom header.|void()|
home_url|Retrieve the home url for the current site.|string([string $path=&#039;&#039;],[string $scheme=null])|
html_type_rss|Display the HTML type based on the blog setting.|void()|
htmlentities2|Convert entities, while preserving already-encoded entities.|string(string $myHTML)|
human_time_diff|Determines the difference between two timestamps.|string(int $from,[int $to=&#039;&#039;])|
iframe_footer|Generic Iframe footer for use with Thickbox|void()|
iframe_header|Generic Iframe header for use with Thickbox|void([string $title=&#039;&#039;],[bool $limit_styles=false])|
iis7_add_rewrite_rule|Add WordPress rewrite rule to the IIS 7 configuration file.|bool(string $filename,string $rewrite_rule)|
iis7_delete_rewrite_rule|Delete WordPress rewrite rule from web.config file if it exists there|bool(string $filename)|
iis7_rewrite_rule_exists|Check if rewrite rule for WordPress already exists in the IIS 7 configuration file|bool(string $filename)|
iis7_save_url_rewrite_rules|Updates the IIS web.config file with the current rules if it is writable.|bool()|
iis7_supports_permalinks|Check if IIS 7 supports pretty permalinks|bool()|
image_add_caption||unknown(unknown_type $html,unknown_type $id, $caption,unknown_type $title,unknown_type $align,unknown_type $url,unknown_type $size,[unknown_type $alt=&#039;&#039;])|
image_align_input_fields|Retrieve HTML for the image alignment radio buttons with the specified one checked.|unknown(unknown_type $post,[unknown_type $checked=&#039;&#039;])|
image_attachment_fields_to_edit||unknown(unknown_type $form_fields,unknown_type $post)|
image_attachment_fields_to_save||unknown(unknown_type $post,unknown_type $attachment)|
image_constrain_size_for_editor|Scale down the default size of an image.|array(int $width,int $height,[string|array $size=&#039;medium&#039;])|
image_downsize|Scale an image to fit a particular size (such as 'thumb' or 'medium').|bool|array(int $id,[array|string $size=&#039;medium&#039;])|
image_edit_apply_changes||void( $img, $changes)|
image_get_intermediate_size|Retrieve the image's intermediate size (resized) path, width, and height.|bool|array(int $post_id,[array|string $size=&#039;thumbnail&#039;])|
image_hwstring|Retrieve width and height attributes using given width and height values.|string(int|string $width,int|string $height)|
image_link_input_fields|Retrieve HTML for the Link URL buttons with the default link type as specified.|unknown(unknown_type $post,[unknown_type $url_type=&#039;&#039;])|
image_make_intermediate_size|Resize an image to make a thumbnail or intermediate size.|bool|array(string $file,int $width,int $height,[bool $crop=false])|
image_media_send_to_editor||unknown(unknown_type $html,unknown_type $attachment_id,unknown_type $attachment)|
image_resize|Scale down an image to fit a particular size and save a new copy of the image.|mixed(string $file,int $max_w,int $max_h,[bool $crop=false],[string $suffix=null],[string $dest_path=null],[int $jpeg_quality=90])|
image_resize_dimensions|Retrieve calculated resized dimensions for use in imagecopyresampled().|bool|array(int $orig_w,int $orig_h,int $dest_w,int $dest_h,[bool $crop=false])|
image_size_input_fields|Retrieve HTML for the size radio buttons with the specified one checked.|unknown(unknown_type $post,[unknown_type $check=&#039;&#039;])|
img_caption_shortcode|The Caption shortcode.|string(array $attr,[string $content=null])|
in_category|Check if the current post in within any of the given categories.|bool(int|string|array $category,[ $post=null],int|object $_post)|
in_the_loop|Whether the caller is in the Loop.|bool()|
includes_url|Retrieve the url to the includes directory.|string([string $path=&#039;&#039;])|
index_rel_link|Display relational link for the site index.|void()|
insert_blog|Store basic site info in the blogs table.|int(string $domain,string $path,int $site_id)|
insert_with_markers||bool(unknown_type $filename,unknown_type $marker,unknown_type $insertion)|
install_blog|Install an empty blog.|void(int $blog_id,[string $blog_title=&#039;&#039;])|
install_blog_defaults|Set blog defaults.|void(int $blog_id,int $user_id)|
install_dashboard||void()|
install_global_terms|Install global terms.|void()|
install_network|Install Network.|void()|
install_plugin_information|Display plugin information in dialog box form.|void()|
install_plugin_install_status|Determine the status we can perform on a plugin.|void( $api,[ $loop=false])|
install_plugins_upload|Upload from zip|void([string $page=1])|
install_popular_tags|Retrieve popular WordPress plugin tags.|array([array $args=array()])|
install_search_form|Display search form for searching plugins.|void()|
install_theme_information|Display theme information in dialog box form.|void()|
install_theme_search_form|Display search form for searching themes.|void()|
install_themes_dashboard|Display tags filter for themes.|void()|
install_themes_feature_list|Retrieve list of WordPress theme features (aka theme tags)|array()|
install_themes_upload||void([ $page=1])|
is_404|Is the query a 404 (returns no results)?|bool()|
is_active_sidebar|Whether a sidebar is in use.|bool(mixed $index)|
is_active_widget|Whether widget is displayed on the front-end.|mixed([string $callback=false],[int $widget_id=false],[string $id_base=false],[bool $skip_inactive=true])|
is_admin|Whether the current request is for a network or blog admin page|bool()|
is_admin_bar_showing|Determine whether the admin bar should be showing.|bool()|
is_archive|Is the query for an archive page?|bool()|
is_archived|Check if a particular blog is archived.|string(int $id)|
is_attachment|Is the query for an attachment page?|bool()|
is_author|Is the query for an author archive page?|bool([mixed $author=&#039;&#039;])|
is_blog_admin|Whether the current request is for a blog admin screen /wp-admin/|bool()|
is_blog_installed|Test whether blog is already installed.|bool()|
is_blog_user|Checks if the current user belong to a given blog.|bool([int $blog_id=0])|
is_category|Is the query for a category archive page?|bool([mixed $category=&#039;&#039;])|
is_child_theme|Whether a child theme is in use.|bool()|
is_comment_feed|Is the query for a comments feed?|bool()|
is_comments_popup|Whether the current URL is within the comments popup window.|bool()|
is_date|Is the query for a date archive?|bool()|
is_day|Is the query for a day archive?|bool()|
is_dynamic_sidebar|Whether the dynamic sidebar is enabled and used by theme.|bool()|
is_email|Verifies that an email is valid.|string|bool(string $email,[boolean $deprecated=false])|
is_email_address_unsafe|Checks an email address against a list of banned domains.|bool(string $user_email)|
is_feed|Is the query for a feed?|bool([string|array $feeds=&#039;&#039;])|
is_front_page|Is the query for the front page of the site?|bool()|
is_home|Is the query for the blog homepage?|bool()|
is_lighttpd_before_150|Is the server running earlier than 1.5.0 version of lighttpd|bool()|
is_local_attachment|Check if the attachment URI is local one and is really an attachment.|bool(string $url)|
is_main_blog||void()|
is_main_site|is main site|bool([int $blog_id=&#039;&#039;])|
is_month|Is the query for a month archive?|bool()|
is_multi_author|Does this site have more than one author|bool()|
is_multisite|Whether Multisite support is enabled|bool()|
is_nav_menu|Check if the given ID is a navigation menu.|bool(int|string $menu)|
is_nav_menu_item|Determine whether the given ID is a nav menu item.|bool([int $menu_item_id=0])|
is_network_admin|Whether the current request is for a network admin screen /wp-admin/network/|bool()|
is_network_only_plugin|Checks for &quot;Network: true&quot; in the plugin header to see if this should  be activated only as a network wide plugin. The plugin would also work  when Multisite is not enabled.|bool(string $plugin)|
is_new_day|Whether today is a new day.|int()|
is_object_in_taxonomy|Determine if the given object type is associated with the given taxonomy.|bool(string $object_type,string $taxonomy)|
is_object_in_term|Determine if the given object is associated with any of the given terms.|bool|WP_Error.(int $object_id,string $taxonomy,[int|string|array $terms=null])|
is_page|Is the query for a single page?|bool([mixed $page=&#039;&#039;])|
is_page_template|Whether currently in a page template.|bool([string $template=&#039;&#039;])|
is_paged|Is the query for paged result and not for the first page?|bool()|
is_plugin_active|Check whether the plugin is active by checking the active_plugins list.|bool(string $plugin)|
is_plugin_active_for_network|Check whether the plugin is active for the entire network.|bool(string $plugin)|
is_plugin_inactive|Check whether the plugin is inactive.|bool(string $plugin)|
is_plugin_page|Is the current admin page generated by a plugin?|bool()|
is_post_type_archive|Is the query for a post type archive page?|bool([mixed $post_types=&#039;&#039;])|
is_post_type_hierarchical|Whether the post type is hierarchical.|bool(string $post_type)|
is_preview|Is the query for a post or page preview?|bool()|
is_protected_meta|Determine whether a meta key is protected|bool(string $meta_key,[ $meta_type=null])|
is_random_header_image|Check if random header image is in use.|boolean([string $type=&#039;any&#039;])|
is_robots|Is the query for the robots file?|bool()|
is_rtl|Checks if current locale is RTL.|bool()|
is_search|Is the query for a search?|bool()|
is_serialized|Check value to find if it was serialized.|bool(mixed $data)|
is_serialized_string|Check whether serialized data is of string type.|bool(mixed $data)|
is_single|Is the query for a single post?|bool([mixed $post=&#039;&#039;])|
is_singular|Is the query for a single post of any post type (post, attachment, page, ... )?|bool([mixed $post_types=&#039;&#039;])|
is_site_admin|Determine if user is a site admin.|void([ $user_login=&#039;&#039;])|
is_ssl|Determine if SSL is used.|bool()|
is_sticky|Check if post is sticky.|bool([int $post_id=0])|
is_subdomain_install|Whether a subdomain configuration is enabled.|bool()|
is_super_admin|Determine if user is a site admin.|bool([int $user_id=false])|
is_tag|Is the query for a tag archive page?|bool([mixed $slug=&#039;&#039;])|
is_tax|Is the query for a taxonomy archive page?|bool([mixed $taxonomy=&#039;&#039;],[mixed $term=&#039;&#039;])|
is_taxonomy|Checks that the taxonomy name exists.|bool(string $taxonomy)|
is_taxonomy_hierarchical|Whether the taxonomy object is hierarchical.|bool(string $taxonomy)|
is_term|Check if Term exists.|mixed(int|string $term,[string $taxonomy=&#039;&#039;],[int $parent=0])|
is_textdomain_loaded|Whether there are translations for the domain|bool(string $domain)|
is_time|Is the query for a specific time?|bool()|
is_trackback|Is the query for a trackback endpoint call?|bool()|
is_uninstallable_plugin|Whether the plugin can be uninstalled.|bool(string $plugin)|
is_upload_space_available|Determines if there is any upload space left in the current blog's quota.|bool()|
is_user_admin|Whether the current request is for a user admin screen /wp-admin/user/|bool()|
is_user_logged_in|Checks if the current visitor is a logged in user.|bool()|
is_user_member_of_blog|Find out whether a user is a member of a given blog.|bool(int $user_id,[ $blog_id=0],int $blog)|
is_user_option_local|Check whether a usermeta key has to do with the current blog.|bool(string $key,[int $user_id=0],[int $blog_id=0])|
is_user_spammy|Check to see whether a user is marked as a spammer, based on username|bool([string $username=0])|
is_wp_error|Check whether variable is a WordPress Error.|bool(mixed $thing)|
is_wpmu_sitewide_plugin||void( $file)|
is_year|Is the query for a specific year?|bool()|
iso8601_timezone_to_offset|Computes an offset in seconds from an iso8601 timezone.|int|float(string $timezone)|
iso8601_to_datetime|Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].|string(string $date_string,[string $timezone=&#039;user&#039;])|
js_escape|Escape single quotes, specialchar double quotes, and fix line endings.|string(string $text)|
language_attributes|Display the language attributes for the html tag.|void([string $doctype=&#039;html&#039;])|
like_escape|Escapes text for SQL LIKE special characters % and _.|string(string $text)|
link_advanced_meta_box|Display advanced link options form fields.|void(object $link)|
link_categories_meta_box|Display link categories form fields.|void(object $link)|
link_pages|Print list of pages based on arguments.|string([string $before=&#039;&lt;br/&gt;&#039;],[string $after=&#039;&lt;br/&gt;&#039;],[string $next_or_number=&#039;number&#039;],[string $nextpagelink=&#039;nextpage&#039;],[string $previouspagelink=&#039;previouspage&#039;],[string $pagelink=&#039;%&#039;],[string $more_file=&#039;&#039;])|
link_submit_meta_box|Display link create form fields.|void(object $link)|
link_target_meta_box|Display form fields for changing link target.|void(object $link)|
link_xfn_meta_box|Display xfn form fields.|void(object $link)|
links_add_base_url|Add a Base url to relative links in passed content.|string(string $content,string $base,[array $attrs=array(&#039;src&#039;,&#039;href&#039;)])|
links_add_target|Adds a Target attribute to all links in passed content.|string(string $content,[string $target=&#039;_blank&#039;],[array $tags=array(&#039;a&#039;)])|
links_popup_script|Show the link to the links popup and the number of links.|void([string $text=&#039;Links&#039;],[int $width=400],[int $height=400],[string $file=&#039;links.all.php&#039;],[bool $count=true])|
list_authors||unknown([bool $optioncount=false],[bool $exclude_admin=true],[bool $show_fullname=false],[bool $hide_empty=true],[string $feed=&#039;&#039;],[string $feed_image=&#039;&#039;])|
list_cats||unknown([int $optionall=1],[string $all=&#039;All&#039;],[string $sort_column=&#039;ID&#039;],[string $sort_order=&#039;asc&#039;],[string $file=&#039;&#039;],[bool $list=true],[int $optiondates=0],[int $optioncount=0],[int $hide_empty=1],[int $use_desc_for_title=1],[bool $children=false],[int $child_of=0],[int $categories=0],[int $recurse=0],[string $feed=&#039;&#039;],[string $feed_image=&#039;&#039;],[string $exclude=&#039;&#039;],[bool $hierarchical=false])|
list_core_update||void( $update)|
list_files|Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.|bool|array([string $folder=&#039;&#039;],[int $levels=100])|
list_meta||void(unknown_type $meta)|
list_plugin_updates||void()|
list_theme_updates||void()|
load_child_theme_textdomain|Loads the child themes translated strings.|void(string $domain,[ $path=false])|
load_default_textdomain|Loads default translated strings based on locale.|void()|
load_image_to_edit||void( $post_id, $mime_type,[ $size=&#039;full&#039;])|
load_muplugin_textdomain|Load the translated strings for a plugin residing in the mu-plugins dir.|void(string $domain,[strings $mu_plugin_rel_path=&#039;&#039;])|
load_plugin_textdomain|Loads the plugin's translated strings.|void(string $domain,[string $abs_rel_path=false],[string $plugin_rel_path=false])|
load_template|Require the template file with WordPress environment.|void(string $_template_file,[bool $require_once=true])|
load_textdomain|Loads a MO file into the domain $domain.|bool(string $domain,string $mofile)|
load_theme_textdomain|Loads the theme's translated strings.|void(string $domain,[ $path=false])|
locale_stylesheet|Display localized stylesheet link element.|void()|
locate_template|Retrieve the name of the highest priority template file that exists.|string(string|array $template_names,[bool $load=false],[bool $require_once=true])|
logIO|logIO() - Writes logging info to a file.|bool(string $io,string $msg)|
log_app|Writes logging info to a file.|void(string $label,string $msg)|
login_footer|Outputs the footer for the login page.|void([string $input_id=&#039;&#039;])|
login_header|Outputs the header for the login page.|void([string $title=&#039;LogIn&#039;],[string $message=&#039;&#039;],[WP_Error $wp_error=&#039;&#039;])|
maintenance_nag||void()|
make_clickable|Convert plaintext URI to HTML links.|string(string $ret)|
make_db_current||void()|
make_db_current_silent||void()|
make_site_theme||unknown()|
make_site_theme_from_default||unknown(unknown_type $theme_name,unknown_type $template)|
make_site_theme_from_oldschool||unknown(unknown_type $theme_name,unknown_type $template)|
make_url_footnote|Strip HTML and put links at the bottom of stripped content.|string(string $content)|
map_meta_cap|Map meta capabilities to primitive capabilities.|array(string $cap,int $user_id)|
maybe_add_column|Add column to database table, if column doesn't already exist in table.|bool(string $table_name,string $column_name,string $create_ddl)|
maybe_add_existing_user_to_blog|Add a new user to a blog by visiting /newbloguser/username/.|void()|
maybe_create_table|Create database table, if it doesn't already exist.|bool(string $table_name,string $create_ddl)|
maybe_disable_automattic_widgets||void()|
maybe_drop_column|Drop column from database table, if it exists.|bool(string $table_name,string $column_name,string $drop_ddl)|
maybe_redirect_404|Correct 404 redirects when NOBLOGREDIRECT is defined.|void()|
maybe_serialize|Serialize data, if needed.|mixed(mixed $data)|
maybe_unserialize|Unserialize value only if it was serialized.|mixed(string $original)|
mce_escape||void( $text)|
media_buttons||void()|
media_handle_sideload|This handles a sideloaded file in the same way as an uploaded file is handled by <a href="../../WordPress/Administration/_wp-admin---includes---media.php.html#functionmedia_handle_upload">media_handle_upload()</a>|int|objectmedia_handle_sideload(array $file_array,int $post_id,[string $desc=null],[array $post_data=array()])|
media_handle_upload||int(string $file_id,int $post_id,[array $post_data=array()],[array $overrides=array(&#039;test_form&#039;=&gt;false)])|
media_post_single_attachment_fields_to_edit||unknown(unknown_type $form_fields,unknown_type $post)|
media_send_to_editor||void(unknown_type $html)|
media_sideload_image|Download an image from the specified URL and attach it to a post.|string|WP_Error(string $file,int $post_id,[string $desc=null])|
media_single_attachment_fields_to_edit||unknown(unknown_type $form_fields,unknown_type $post)|
media_upload_audio||unknown()|
media_upload_bypass_url||unknown(unknown_type $url)|
media_upload_file||unknown()|
media_upload_flash_bypass||void()|
media_upload_form||void([unknown_type $errors=null])|
media_upload_form_handler||unknown()|
media_upload_gallery||unknown()|
media_upload_gallery_form||void(unknown_type $errors)|
media_upload_header||void()|
media_upload_html_bypass||void([ $flash=true])|
media_upload_image||unknown()|
media_upload_library||unknown()|
media_upload_library_form||void(unknown_type $errors)|
media_upload_tabs||unknown()|
media_upload_type_form||void([unknown_type $type=&#039;file&#039;],[unknown_type $errors=null],[unknown_type $id=null])|
media_upload_type_url_form||void([unknown_type $type=&#039;file&#039;],[unknown_type $errors=null],[unknown_type $id=null])|
media_upload_use_flash||unknown(unknown_type $flash)|
media_upload_video||unknown()|
menu_page_url|Get the url to access a particular menu page based on the slug it was registered with.|string(string $menu_slug,[bool $echo=true])|
meta_box_prefs||void(unknown_type $screen)|
meta_form||void()|
ms_cookie_constants|Defines Multisite cookie constants.|void()|
ms_deprecated_blogs_file||void()|
ms_file_constants|Defines Multisite file constants.|void()|
ms_site_check|Checks status of current blog.|bool|string()|
ms_subdomain_constants|Defines Multisite subdomain constants and handles warnings and notices.|void()|
ms_upload_constants|Defines Multisite upload constants.|void()|
mu_dropdown_languages||void([ $lang_files=array()],[ $current=&#039;&#039;])|
mu_options||void( $options)|
mysql2date|Converts MySQL DATETIME field to user specified date format.|string(string $dateformatstring,string $mysqlstring,[bool $translate=true])|
network_admin_url|Retrieve the url to the admin area for the network.|string([string $path=&#039;&#039;],[string $scheme=&#039;admin&#039;])|
network_domain_check|Check for an existing network.|Whether()|
network_home_url|Retrieve the home url for the current network.|string([string $path=&#039;&#039;],[string $scheme=null])|
network_site_url|Retrieve the site url for the current network.|string([string $path=&#039;&#039;],[string $scheme=null])|
network_step1|Prints step 1 for Network installation process.|void([ $errors=false])|
network_step2|Prints step 2 for Network installation process.|void([ $errors=false])|
new_user_email_admin_notice||void()|
newblog_notify_siteadmin|Notifies the network admin that a new site has been activated.|bool(int $blog_id,[ $deprecated=&#039;&#039;])|
newuser_notify_siteadmin|Notifies the network admin that a new user has been activated.|bool(int $user_id)|
next_comments_link|Display the link to next comments pages.|void([string $label=&#039;&#039;],[int $max_page=0])|
next_image_link|Display next image link that has the same post parent.|string([string $size=&#039;thumbnail&#039;],[string $text=false])|
next_post|Prints link to the next post.|void([string $format=&#039;%&#039;],[string $next=&#039;nextpost:&#039;],[string $title=&#039;yes&#039;],[string $in_same_cat=&#039;no&#039;],[int $limitnext=1],[string $excluded_categories=&#039;&#039;])|
next_post_link|Display next post link that is adjacent to the current post.|void([string $format=&#039;%link&amp;raquo;&#039;],[string $link=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
next_post_rel_link|Display relational link for the next post adjacent to the current post.|void([string $title=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
next_posts|Display or return the next posts pages link.|void([int $max_page=0],[boolean $echo=true])|
next_posts_link|Display the next posts pages link.|void([string $label=null],[int $max_page=0])|
next_widget_id_number||void( $id_base)|
no_update_actions||void( $actions)|
nocache_headers|Sets the headers to prevent caching for the different browsers.|void()|
noindex|Display a noindex meta tag if required by the blog configuration.|void()|
normalize_whitespace||void( $str)|
number_format_i18n|Convert integer number to format based on the locale.|string(int $number,[int $decimals=0])|
option_update_filter||unknown(unknown_type $options)|
page_attributes_meta_box|Display page attributes form fields.|void(object $post)|
page_template_dropdown||void([unknown_type $default=&#039;&#039;])|
paginate_comments_links|Create pagination links for the comments on the current post.|string([string|array $args=array()])|
paginate_links|Retrieve paginated link for archive post pages.|array|string([string|array $args=&#039;&#039;])|
parent_dropdown||unknown([unknown_type $default=0],[unknown_type $parent=0],[unknown_type $level=0])|
parent_post_rel_link|Display relational link for parent item|void([ $title=&#039;%title&#039;])|
path_is_absolute|Test if a give filesystem path is absolute ('/foo/bar', 'c:\windows').|bool(string $path)|
path_join|Join two filesystem paths together (e.g. 'give me $path relative to $base').|string(string $base,string $path)|
permalink_anchor|Display permalink anchor for current post.|void([string $mode=&#039;id&#039;])|
permalink_link|Print the permalink of the current post in the loop.|void()|
permalink_single_rss|Print the permalink to the RSS feed.|void([string $deprecated=&#039;&#039;])|
pingback|Pings back the links found in a post.|void(string $content,int $post_ID)|
pings_open|Whether the current post is open for pings.|bool([int $post_id=NULL])|
plugin_dir_path|Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in|string(string $file)|
plugin_dir_url|Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in|string(string $file)|
plugin_sandbox_scrape||void( $plugin)|
plugins_api|Retrieve plugin installer pages from WordPress Plugins API.|objectplugins_api(string $action,[array|object $args=null])|
plugins_url|Retrieve the url to the plugins directory or to a specific file within that directory.|string([string $path=&#039;&#039;],[string $plugin=&#039;&#039;])|
populate_network|populate network settings|bool|WP_Error([int $network_id=1],[ $domain=&#039;&#039;],[ $email=&#039;&#039;],[ $site_name=&#039;&#039;],[ $path=&#039;/&#039;],[ $subdomain_install=false])|
populate_options|Create WordPress options and set the default values.|void()|
populate_roles|Execute WordPress role creation for the various WordPress versions.|void()|
populate_roles_160|Create the roles for WordPress 2.0|void()|
populate_roles_210|Create and modify WordPress roles for WordPress 2.1.|void()|
populate_roles_230|Create and modify WordPress roles for WordPress 2.3.|void()|
populate_roles_250|Create and modify WordPress roles for WordPress 2.5.|void()|
populate_roles_260|Create and modify WordPress roles for WordPress 2.6.|void()|
populate_roles_270|Create and modify WordPress roles for WordPress 2.7.|void()|
populate_roles_280|Create and modify WordPress roles for WordPress 2.8.|void()|
populate_roles_300|Create and modify WordPress roles for WordPress 3.0.|void()|
popuplinks|Adds a element attributes to open links in new windows.|string(string $text)|
post_author_meta_box|Display form field with list of authors.|void(object $post)|
post_categories_meta_box|Display post categories form fields.|void(object $post, $box)|
post_class|Display the classes for the post div.|void([string|array $class=&#039;&#039;],[int $post_id=null])|
post_comment_meta_box|Display comments for post.|void(object $post)|
post_comment_meta_box_thead|Display comments for post table header|array(array $result)|
post_comment_status_meta_box|Display comments status form fields.|void(object $post)|
post_comments_feed_link|Display the comment feed link for a post.|string([string $link_text=&#039;&#039;],[int $post_id=&#039;&#039;],[string $feed=&#039;&#039;])|
post_custom|Retrieve post custom meta data field.|bool|string|array([string $key=&#039;&#039;])|
post_custom_meta_box|Display custom fields form fields.|void(object $post)|
post_excerpt_meta_box|Display post excerpt form fields.|void(object $post)|
post_exists|Determine if a post exists based on title, content, and date|int(string $title,[string $content=&#039;&#039;],[string $date=&#039;&#039;])|
post_format_meta_box|Display post format form elements.|void(object $post, $box)|
post_password_required|Whether post requires password and correct password has been provided.|bool([int|object $post=null])|
post_permalink|Retrieve permalink from post ID.|string([int $post_id=0],[mixed $deprecated=&#039;&#039;])|
post_preview|Save draft or manually autosave for showing preview.|str()|
post_reply_link|Displays the HTML content for reply to post link.|string|bool|null([array $args=array()],[int|object $post=null])|
post_revisions_meta_box|Display list of revisions.|void(object $post)|
post_slug_meta_box|Display slug form fields.|void(object $post)|
post_submit_meta_box|Display post submit form fields.|void(object $post)|
post_tags_meta_box|Display post tags form fields.|void(object $post, $box)|
post_thumbnail_meta_box|Display post thumbnail meta box.|void()|
post_trackback_meta_box|Display trackback links form fields.|void(object $post)|
post_type_archive_title|Display or retrieve title for a post type archive.|string|null([string $prefix=&#039;&#039;],[bool $display=true])|
post_type_exists|Checks if a post type is registered.|bool(string $post_type)|
post_type_supports|Checks a post type's support for a given feature|boolean(string $post_type,string $feature)|
postbox_classes|Returns the list of classes to be used by a metabox|unknown(unknown_type $id,unknown_type $page)|
posts_nav_link|Display post pages link navigation for previous and next pages.|void([string $sep=&#039;&#039;],[string $prelabel=&#039;&#039;],[string $nxtlabel=&#039;&#039;])|
pre_schema_upgrade|Runs before the schema is upgraded.|void()|
prep_atom_text_construct|Determine the type of a string of data with the data formatted.|array(string $data)|
prepend_attachment|Wrap attachment in &lt;p&gt; element before content.|string(string $content)|
press_it|Press It form handler.|int()|
prev_post_rel_link|Display relational link for the previous post adjacent to the current post.|void([string $title=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
preview_theme|Start preview theme output buffer.|void()|
previous_comments_link|Display the previous comments page link.|void([string $label=&#039;&#039;])|
previous_image_link|Display previous image link that has the same post parent.|string([string $size=&#039;thumbnail&#039;],[string $text=false])|
previous_post|Prints link to the previous post.|void([string $format=&#039;%&#039;],[string $previous=&#039;previouspost:&#039;],[string $title=&#039;yes&#039;],[string $in_same_cat=&#039;no&#039;],[int $limitprev=1],[string $excluded_categories=&#039;&#039;])|
previous_post_link|Display previous post link that is adjacent to the current post.|void([string $format=&#039;&amp;laquo;%link&#039;],[string $link=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
previous_posts|Display or return the previous posts pages link.|void([boolean $echo=true])|
previous_posts_link|Display the previous posts page link.|void([string $label=null])|
print_admin_styles||void()|
print_column_headers|Prints column headers for a particular screen.|void( $screen,[ $id=true])|
print_footer_scripts|Prints the scripts that were queued for the footer on admin pages.|void()|
print_head_scripts|Prints the script queue in the HTML head on admin pages.|void()|
privacy_ping_filter|Check whether blog is public before returning sites.|mixed(mixed $sites)|
query_posts|Set up The Loop with query parameters.|array(string $query)|
recurse_dirsize|Get the size of a directory recursively.|int(string $directory)|
redirect_canonical|Redirects incoming links to the proper URL based on the site url.|null|false|string([string $requested_url=null],[bool $do_redirect=true])|
redirect_guess_404_permalink|Attempts to guess correct post based on query vars.|bool|string()|
redirect_post|Redirect to previous page.|void([int $post_id=&#039;&#039;])|
redirect_this_site|Ensure that the current site's domain is listed in the allowed redirect host list.|array([ $deprecated=&#039;&#039;])|
refresh_blog_details|Clear the blog details cache.|void(int $blog_id)|
refresh_user_details||void( $id)|
register_activation_hook|Set the activation hook for a plugin.|void(string $file,callback $function)|
register_admin_color_schemes|Registers the default Admin color schemes|void()|
register_column_headers|Register column headers for a particular screen.|void(string $screen,array $columns)|
register_deactivation_hook|Set the deactivation hook for a plugin.|void(string $file,callback $function)|
register_default_headers|Register a selection of default headers to be displayed by the custom header admin UI.|void(array $headers)|
register_importer|Register importer for WordPress.|WP_Error(string $id,string $name,string $description,callback $callback)|
register_nav_menu|Register a navigation menu for a theme.|void(string $location,string $description)|
register_nav_menus|Register navigation menus for a theme.|void([array $locations=array()])|
register_new_user|Handles registering a new user.|int|WP_Error(string $user_login,string $user_email)|
register_post_status|Register a post type. Do not use before init.|void(string $post_status,[array|string $args=array()])|
register_post_type|Register a post type. Do not use before init.|object|WP_Error(string $post_type,[array|string $args=array()])|
register_setting|Register a setting and its sanitization callback|unknown(string $option_group,string $option_name,[unknown_type $sanitize_callback=&#039;&#039;])|
register_sidebar|Builds the definition for a single sidebar and returns the ID.|string([string|array $args=array()])|
register_sidebar_widget|Register widget for sidebar with backwards compatibility.|void(string|int $name,callback $output_callback,[string $classname=&#039;&#039;],mixed $params,...)|
register_sidebars|Creates multiple sidebars.|void([int $number=1],[string|array $args=array()])|
register_taxonomy|Create or modify a taxonomy object. Do not use before init.|void(string $taxonomy,array|string $object_type,[array|string $args=array()])|
register_taxonomy_for_object_type|Add an already registered taxonomy to an object type.|bool(string $taxonomy,array|string $object_type)|
register_theme_directory|Register a directory that contains themes.|bool(string $directory)|
register_uninstall_hook|Set the uninstallation hook for a plugin.|void(string $file,callback $callback)|
register_widget|Register a widget|void(string $widget_class)|
register_widget_control|Registers widget control callback for customizing options.|void(int|string $name,callback $control_callback,[int $width=&#039;&#039;],[int $height=&#039;&#039;])|
rel_canonical|Output rel=canonical for singular queries|void()|
remove_accents|Converts all accent characters to ASCII characters.|string(string $string)|
remove_action|Removes a function from a specified action hook.|boolean(string $tag,callback $function_to_remove,[int $priority=10],[int $accepted_args=1])|
remove_all_actions|Remove all of the hooks from an action.|bool(string $tag,[int $priority=false])|
remove_all_filters|Remove all of the hooks from a filter.|bool(string $tag,[int $priority=false])|
remove_all_shortcodes|Clear all shortcodes.|void()|
remove_custom_background|Remove custom background support.|bool()|
remove_custom_image_header|Remove image header support.|bool()|
remove_editor_styles|Removes all visual editor stylesheets.|bool()|
remove_filter|Removes a function from a specified filter hook.|boolean(string $tag,callback $function_to_remove,[int $priority=10],[int $accepted_args=1])|
remove_menu_page|Remove a top level admin menu|array|bool(string $menu_slug)|
remove_meta_box|Remove a meta box from an edit form.|void(string $id,string $page,string $context)|
remove_option_update_handler|Unregister a setting|unknown(unknown_type $option_group,unknown_type $option_name,[unknown_type $sanitize_callback=&#039;&#039;])|
remove_option_whitelist||unknown(unknown_type $del_options,[unknown_type $options=&#039;&#039;])|
remove_post_type_support|Remove support for a feature from a post type.|void(string $post_type,string $feature)|
remove_query_arg|Removes an item or list from the query string.|string(string|array $key,[bool $query=false])|
remove_role|Remove role, if it exists.|null(string $role)|
remove_shortcode|Removes hook for shortcode.|void(string $tag)|
remove_submenu_page|Remove an admin submenu|array|bool(string $menu_slug,string $submenu_slug)|
remove_theme_mod|Remove theme modification name from current theme list.|null(string $name)|
remove_theme_mods|Remove theme modifications option for current theme.|void()|
remove_theme_support|Allows a theme to de-register its support of a certain feature|bool(string $feature)|
remove_user_from_blog|Remove a user from a blog.|bool(int $user_id,[int $blog_id=&#039;&#039;],[string $reassign=&#039;&#039;])|
request_filesystem_credentials|Displays a form to the user to request for their FTP/SSH details in order to  connect to the filesystem.|boolean(string $form_post,[string $type=&#039;&#039;],[boolean $error=false],[string $context=false],[string $extra_fields=null])|
require_if_theme_supports|Checks a theme's support for a given feature before loading the functions which implement it.|void(string $feature,string $include)|
require_wp_db|Load the correct database class file.|void()|
reset_password|Handles resetting the user's password.|void( $user, $new_pass,string $key)|
restore_current_blog|Restore the current blog, after calling switch_to_blog()|bool()|
retrieve_password|Handles sending password retrieval email to user.|bool|WP_Error()|
retrieve_widgets||void()|
revoke_super_admin|Revokes super admin privileges.|void(int $user_id)|
rewind_posts|Rewind the loop posts.|null()|
rich_edit_exists|Determine if TinyMCE is available.|bool()|
rsd_link|Display the link to the Really Simple Discovery service endpoint.|void()|
rss_enclosure|Display the rss enclosure for the current post.|void()|
sanitize_bookmark|Sanitizes all bookmark fields|object|array(object|array $bookmark,[string $context=&#039;display&#039;])|
sanitize_bookmark_field|Sanitizes a bookmark field|mixed(string $field,mixed $value,int $bookmark_id,string $context)|
sanitize_category|Sanitizes category data based on context.|object|array(object|array $category,[string $context=&#039;display&#039;])|
sanitize_category_field|Sanitizes data in single category key field.|mixed(string $field,mixed $value,int $cat_id,string $context)|
sanitize_comment_cookies|Sanitizes the cookies sent to the user already.|void()|
sanitize_email|Strips out all characters that are not allowable in an email.|string(string $email)|
sanitize_file_name|Sanitizes a filename replacing whitespace with dashes|string(string $filename)|
sanitize_html_class|Santizes a html classname to ensure it only contains valid characters|string(string $class,[string $fallback=&#039;&#039;])|
sanitize_key|Sanitize a string key.|string(string $key)|
sanitize_meta|Sanitize meta value|mixed(string $meta_key,mixed $meta_value,[string $meta_type=null])|
sanitize_mime_type|Sanitize a mime type|string(string $mime_type)|
sanitize_option|Sanitises various option values based on the nature of the option.|string(string $option,string $value)|
sanitize_post|Sanitize every post field.|object|array(object|array $post,[string $context=&#039;display&#039;])|
sanitize_post_field|Sanitize post field based on context.|mixed(string $field,mixed $value,int $post_id,string $context)|
sanitize_sql_orderby|Ensures a string is a valid SQL order by clause.|string|false(string $orderby)|
sanitize_term|Sanitize Term all fields.|array|objectsanitize_term(array|object $term,string $taxonomy,[string $context=&#039;display&#039;])|
sanitize_term_field|Cleanse the field value in the term based on the context.|mixed(string $field,string $value,int $term_id,string $taxonomy,string $context)|
sanitize_text_field|Sanitize a string from user input or from the db|string(string $str)|
sanitize_title|Sanitizes title or use fallback title.|string(string $title,[string $fallback_title=&#039;&#039;],[string $context=&#039;save&#039;])|
sanitize_title_for_query||void( $title)|
sanitize_title_with_dashes|Sanitizes title, replacing whitespace with dashes.|string(string $title)|
sanitize_url|Performs esc_url() for database or redirect usage.|string(string $url,[array $protocols=null])|
sanitize_user|Sanitize username stripping out unsafe characters.|string(string $username,[bool $strict=false])|
sanitize_user_field|Sanitize user field based on context.|mixed(string $field,mixed $value,int $user_id,string $context)|
sanitize_user_object|Sanitize every user field.|object|array(object|array $user,[string $context=&#039;display&#039;])|
saveDomDocument|Saves the XML document into a file|void(DOMDocument $doc,string $filename)|
save_mod_rewrite_rules|Updates the htaccess file with the current rules if it is writable.|void()|
screen_icon||void([ $screen=&#039;&#039;])|
screen_layout||void( $screen)|
screen_meta||void( $screen)|
screen_options||void( $screen)|
script_concat_settings||void()|
search_theme_directories|Search all registered theme directories for complete and valid themes.|array()|
secret_salt_warning||void()|
seems_utf8|Checks to see if a string is utf8 encoded.|bool(string $str)|
selected|Outputs the html selected attribute.|string(mixed $selected,[mixed $current=true],[bool $echo=true])|
self_admin_url|Retrieve the url to the admin area for either the current blog or the network depending on context.|string([string $path=&#039;&#039;],[string $scheme=&#039;admin&#039;])|
self_link|Display the link for the currently displayed feed in a XSS safe way.|void()|
send_confirmation_on_profile_email||void()|
send_frame_options_header|Send a HTTP header to limit rendering of pages to same origin iframes.|none()|
send_nosniff_header|Send a HTTP header to disable content type sniffing in browsers which support it.|none()|
separate_comments|Separates an array of comments into an array keyed by comment_type.|array( &$comments,array $comments)|
set_current_screen|Set the current screen object|void([string $id=&#039;&#039;])|
set_current_user|Changes the current user by ID or name.|objectset_current_user(int|null $id,[string $name=&#039;&#039;])|
set_post_format|Assign a format to a post|mixed(int|object $post,string $format)|
set_post_thumbnail|Sets a post thumbnail.|bool(int|object $post,int $thumbnail_id)|
set_post_thumbnail_size|Registers an image size for the post thumbnail|void([ $width=0],[ $height=0],[ $crop=false])|
set_post_type|Updates the post type for the post ID.|int([int $post_id=0],[string $post_type=&#039;post&#039;])|
set_query_var|Set query variable.|null(string $var,mixed $value)|
set_screen_options|Saves option for number of rows when listing posts, pages, comments, etc.|void()|
set_site_transient|Set/update the value of a site transient|bool(string $transient,mixed $value,[int $expiration=0])|
set_theme_mod|Update theme modification value for the current theme.|void(string $name,string $value)|
set_transient|Set/update the value of a transient|bool(string $transient,mixed $value,[int $expiration=0])|
set_user_setting|Add or update user interface setting.|bool(string $name,string $value)|
settings_errors|Display settings errors registered by add_settings_error()|void([string $setting=&#039;&#039;],[boolean $sanitize=FALSE],[boolean $hide_on_update=FALSE])|
settings_fields|Output nonce, action, and option_page fields for a settings page.|void(string $option_group)|
setup_postdata|Set up global post data.|bool(object $post)|
setup_userdata|Set up global user vars.|void([int $for_user_id=&#039;&#039;])|
shortcode_atts|Combine user attributes with known attributes and fill in defaults when needed.|array(array $pairs,array $atts)|
shortcode_parse_atts|Retrieve all attributes from the shortcodes tag.|array(string $text)|
shortcode_unautop|Don't auto-p wrap shortcodes that stand alone|string(string $pee)|
show_admin_bar|Set the display status of the admin bar.|void(bool $show)|
show_blog_form||void([ $blogname=&#039;&#039;],[ $blog_title=&#039;&#039;],[ $errors=&#039;&#039;])|
show_message||void(unknown_type $message)|
show_user_form||void([ $user_name=&#039;&#039;],[ $user_email=&#039;&#039;],[ $errors=&#039;&#039;])|
signup_another_blog||void([ $blogname=&#039;&#039;],[ $blog_title=&#039;&#039;],[ $errors=&#039;&#039;])|
signup_blog||void([ $user_name=&#039;&#039;],[ $user_email=&#039;&#039;],[ $blogname=&#039;&#039;],[ $blog_title=&#039;&#039;],[ $errors=&#039;&#039;])|
signup_nonce_check|Process the signup nonce created in signup_nonce_fields().|array(array $result)|
signup_nonce_fields|Add a nonce field to the signup page.|void()|
signup_user||void([ $user_name=&#039;&#039;],[ $user_email=&#039;&#039;],[ $errors=&#039;&#039;])|
signuppageheaders||void()|
single_cat_title|Display or retrieve page title for category archive.|string|null([string $prefix=&#039;&#039;],[bool $display=true])|
single_month_title|Display or retrieve page title for post archive based on date.|string|null([string $prefix=&#039;&#039;],[bool $display=true])|
single_post_title|Display or retrieve page title for post.|string|null([string $prefix=&#039;&#039;],[bool $display=true])|
single_tag_title|Display or retrieve page title for tag post archive.|string|null([string $prefix=&#039;&#039;],[bool $display=true])|
single_term_title|Display or retrieve page title for taxonomy term archive.|string|null([string $prefix=&#039;&#039;],[bool $display=true])|
site_admin_notice||void()|
site_url|Retrieve the site url for the current site.|string([string $path=&#039;&#039;],[string $scheme=null])|
size_format|Convert number of bytes largest unit bytes will fit into.|bool|string(int|string $bytes,[int $decimals=0])|
smilies_init|Convert smiley code to the icon graphic file equivalent.|void()|
sort_menu||void( $a, $b)|
spawn_cron|Send request to run cron through HTTP request that doesn't halt page loading.|null([ $local_time=0])|
start_post_rel_link|Display relational link for the first post.|void([string $title=&#039;%title&#039;],[bool $in_same_cat=false],[string $excluded_categories=&#039;&#039;])|
start_wp|Sets up the WordPress Loop.|void()|
status_header|Set HTTP status header.|unknown(int $header)|
stick_post|Make a post sticky.|void(int $post_id)|
sticky_class|Display &quot;sticky&quot; CSS class, if a post is sticky.|void([int $post_id=null])|
stream_preview_image||void( $post_id)|
strip_shortcodes|Remove all shortcode tags from the given content.|string(string $content)|
stripslashes_deep|Navigates through an array and removes slashes from the values.|array|string(array|string $value)|
submit_button|Echos a submit button, with provided text and appropriate class|void([string $text=NULL],[string $type=&#039;primary&#039;],[string $name=&#039;submit&#039;],[bool $wrap=true],[array|string $other_attributes=NULL])|
switch_theme|Switches current theme to new template and stylesheet names.|void(string $template,string $stylesheet)|
switch_to_blog|Switch the current blog.|bool(int $new_blog,[bool $validate=false])|
sync_category_tag_slugs||void( $term, $taxonomy)|
tag_description|Retrieve tag description.|string([int $tag=0])|
tag_escape|Escape a HTML tag name.|string(string $tag_name)|
tag_exists||unknown(unknown_type $tag_name)|
taxonomy_exists|Checks that the taxonomy name exists.|bool(string $taxonomy)|
term_description|Retrieve term description.|string([int $term=0],[ $taxonomy=&#039;post_tag&#039;])|
term_exists|Check if Term exists.|mixed(int|string $term,[string $taxonomy=&#039;&#039;],[int $parent=0])|
the_ID|Display the ID of the current item in the WordPress Loop.|void()|
the_attachment_link|Display an attachment page link using an image or icon.|void([int $id=0],[bool $fullsize=false],[bool $deprecated=false],[bool $permalink=false])|
the_attachment_links||unknown([unknown_type $id=false])|
the_author|Display the name of the author of the current post.|string([string $deprecated=&#039;&#039;],[string $deprecated_echo=true])|
the_author_ID|Display the ID of the author of the current post.|void()|
the_author_aim|Display the AIM address of the author of the current post.|void()|
the_author_description|Display the description of the author of the current post.|void()|
the_author_email|Display the email of the author of the current post.|void()|
the_author_firstname|Display the first name of the author of the current post.|void()|
the_author_icq|Display the ICQ number of the author of the current post.|void()|
the_author_lastname|Display the last name of the author of the current post.|void()|
the_author_link|Display either author's link or author's name.|void()|
the_author_login|Display the login name of the author of the current post.|void()|
the_author_meta|Retrieve the requested data of the author of the current post.|void([string $field=&#039;&#039;],[int $user_id=false])|
the_author_msn|Display the MSN address of the author of the current post.|void()|
the_author_nickname|Display the nickname of the author of the current post.|void()|
the_author_posts|Display the number of posts by the author of the current post.|void()|
the_author_posts_link|Display an HTML link to the author page of the author of the current post.|void([string $deprecated=&#039;&#039;])|
the_author_url|Display the URL to the home page of the author of the current post.|void()|
the_author_yim|Display the Yahoo! IM name of the author of the current post.|void()|
the_category|Display the category list for the post.|void([string $separator=&#039;&#039;],[string $parents=&#039;&#039;],[int $post_id=false])|
the_category_ID|Return or Print Category ID.|null|int([bool $echo=true])|
the_category_head|Print category with optional text before and after.|void([string $before=&#039;&#039;],[string $after=&#039;&#039;])|
the_category_rss|Display the post categories in the feed.|void([string $type=null])|
the_comment|Iterate comment index in the comment loop.|object()|
the_content|Display the post content.|void([string $more_link_text=null],[string $stripteaser=0])|
the_content_feed|Display the post content for feeds.|void([string $feed_type=null])|
the_content_rss|Display the post content for the feed.|void([string $more_link_text=&#039;(more...)&#039;],[int|bool $stripteaser=0],[string $more_file=&#039;&#039;],[int $cut=0],[int $encode_html=0])|
the_date|Display or Retrieve the date the current $post was written (once per date)|string|null([string $d=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[bool $echo=true])|
the_date_xml|Outputs the date in iso8601 format for xml files.|void()|
the_editor|Display visual editor forms: TinyMCE, or HTML, or both.|void(string $content,[string $id=&#039;content&#039;],[string $prev_id=&#039;title&#039;],[bool $media_buttons=true],[int $tab_index=2],[ $extended=true])|
the_excerpt|Display the post excerpt.|void()|
the_excerpt_rss|Display the post excerpt for the feed.|void()|
the_feed_link|Display the permalink for the feed type.|void(string $anchor,[string $feed=&#039;&#039;])|
the_generator|Display the generator XML or Comment for RSS, ATOM, etc.|void(string $type)|
the_guid|Display the Post Global Unique Identifier (guid).|void([int $id=0])|
the_media_upload_tabs||void()|
the_meta|Display list of post custom fields.|void()|
the_modified_author|Display the name of the author who last edited the current post.|string()|
the_modified_date|Display the date on which the post was last modified.|string|null([string $d=&#039;&#039;],[string $before=&#039;&#039;],[string $after=&#039;&#039;],[bool $echo=true])|
the_modified_time|Display the time at which the post was last modified.|void([string $d=&#039;&#039;])|
the_permalink|Display the permalink for the current post.|void()|
the_permalink_rss|Display the permalink to the post for use in feeds.|void()|
the_post|Iterate the post index in the loop.|void()|
the_post_password|Display the post password.|void()|
the_post_thumbnail|Display Post Thumbnail.|void([int $size=&#039;post-thumbnail&#039;],[string|array $attr=&#039;&#039;])|
the_search_query|Display the contents of the search query variable.|void()|
the_shortlink|Display the Short Link for a Post|void([string $text=&#039;&#039;],[string $title=&#039;&#039;],[string $before=&#039;&#039;],[ $after=&#039;&#039;])|
the_tags|Retrieve the tags for a post.|string([string $before=null],[string $sep=&#039;,&#039;],[string $after=&#039;&#039;])|
the_taxonomies|Display the taxonomies of a post with available options.|void([array $args=array()])|
the_terms|Display the terms in a list.|null|bool([int $id=0],string $taxonomy,[string $before=&#039;&#039;],[string $sep=&#039;,&#039;],[string $after=&#039;&#039;])|
the_time|Display the time at which the post was written.|void([string $d=&#039;&#039;])|
the_title|Display or retrieve the current post title with optional content.|null|string([string $before=&#039;&#039;],[string $after=&#039;&#039;],[bool $echo=true])|
the_title_attribute|Sanitize the current title when retrieving or displaying.|string|null([string|array $args=&#039;&#039;])|
the_title_rss|Display the post title in the feed.|void()|
the_weekday|Display the weekday on which the post was written.|void()|
the_weekday_date|Display the weekday on which the post was written.|void([string $before=&#039;&#039;],[string $after=&#039;&#039;])|
the_widget|Output an arbitrary widget as a template tag|void(string $widget,[array $instance=array()],[array $args=array()])|
theme_update_available|Check if there is an update for a theme available.|bool(object $theme)|
themes_api|Retrieve theme installer pages from WordPress Themes API.|mixed(string $action,[array|object $args=null])|
timer_stop|Return and/or display the time from the page start to when function is called.|float([int $display=0],[int $precision=3])|
tinymce_include||void()|
touch_time||void([unknown_type $edit=1],[unknown_type $for_post=1],[unknown_type $tab_index=0],[unknown_type $multi=0])|
trackback|Send a Trackback.|mixed(string $trackback_url,string $title,string $excerpt,int $ID)|
trackback_rdf|Generates and displays the RDF for the trackback information of current post.|void([int $deprecated=&#039;&#039;])|
trackback_response|trackback_response() - Respond with error or success XML message|void([int|bool $error=0],[string $error_message=&#039;&#039;])|
trackback_url|Displays the current post's trackback URL.|void|string([bool $deprecated_echo=true])|
trackback_url_list|Do trackbacks for a list of URLs.|void(string $tb_list,int $post_id)|
trailingslashit|Appends a trailing slash.|string(string $string)|
translate|Retrieves the translation of $text. If there is no translation, or  the domain isn't loaded the original text is returned.|string(string $text,[string $domain=&#039;default&#039;])|
translate_level_to_role|Translate user level to user role name.|string(int $level)|
translate_nooped_plural|Translate the result of _n_noop() or _nx_noop()|void(array $nooped_plural,int $count,[string $domain=&#039;default&#039;])|
translate_smiley|Convert one smiley code to the icon graphic file equivalent.|string(string $smiley)|
translate_user_role|Translates role name. Since the role names are in the database and  not in the source there are dummy gettext calls to get them into the POT  file and this function properly translates them back.|void( $name)|
translate_with_context|Translates $text like translate(), but assumes that the text  contains a context after its last vertical bar.|string(string $text,[string $domain=&#039;default&#039;])|
translate_with_gettext_context||void( $text, $context,[ $domain=&#039;default&#039;])|
type_url_form_audio||unknown()|
type_url_form_file||unknown()|
type_url_form_image||unknown()|
type_url_form_video||unknown()|
undismiss_core_update||void( $version, $locale)|
uninstall_plugin|Uninstall a single plugin.|void(string $plugin)|
unload_textdomain|Unloads translations for a domain|bool(string $domain)|
unregister_default_headers|Unregister default headers.|True(string|array $header)|
unregister_nav_menu|Unregisters a navigation menu for a theme.|bool(array $location)|
unregister_setting|Unregister a setting|unknown(unknown_type $option_group,unknown_type $option_name,[unknown_type $sanitize_callback=&#039;&#039;])|
unregister_sidebar|Removes a sidebar from the list.|void(string $name)|
unregister_sidebar_widget|Alias of <a href="../../WordPress/Widgets/_wp-includes---widgets.php.html#functionwp_unregister_sidebar_widget">wp_unregister_sidebar_widget()</a>.|void(int|string $id)|
unregister_widget|Unregister a widget|void(string $widget_class)|
unregister_widget_control|Alias of <a href="../../WordPress/Widgets/_wp-includes---widgets.php.html#functionwp_unregister_widget_control">wp_unregister_widget_control()</a>.|void(int|string $id)|
unstick_post|Unstick a post.|void(int $post_id)|
untrailingslashit|Removes trailing slash if it exists.|string(string $string)|
unzip_file|Unzip's a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction.|mixed(string $file,string $to)|
update_archived|Update the 'archived' status of a particular blog.|string(int $id,string $archived)|
update_attached_file|Update attachment file path based on attachment ID.|bool(int $attachment_id,string $file)|
update_blog_details|Update the details for a blog. Updates the blogs table for a given blog id.|bool(int $blog_id,[array $details=array()])|
update_blog_option|Update an option for a particular blog.|void(int $id,string $key,mixed $value,[ $deprecated=null])|
update_blog_public|Update this blog's 'public' setting in the global blogs table.|bool(int $old_value,int $value)|
update_blog_status|Update a blog details field.|string(int $blog_id,string $pref,string $value,[ $deprecated=null])|
update_category_cache|Update the categories cache.|bool()|
update_comment_cache|Updates the comment cache of given comments.|void(array $comments)|
update_comment_meta|Update comment meta field based on comment ID.|bool(int $comment_id,string $meta_key,mixed $meta_value,[mixed $prev_value=&#039;&#039;])|
update_core|Upgrade the core of WordPress.|WP_Error|null(string $from,string $to)|
update_gallery_tab||unknown(unknown_type $tabs)|
update_home_siteurl|If siteurl or home changed, flush rewrite rules.|void(unknown_type $old_value,unknown_type $value)|
update_meta||unknown(unknown_type $meta_id,unknown_type $meta_key,unknown_type $meta_value)|
update_meta_cache|Update the metadata cache for the specified objects.|mixed(string $meta_type,int|array $object_ids)|
update_metadata|Update metadata for the specified object.  If no value already exists for the specified object  ID and metadata key, the metadata will be added.|bool(string $meta_type,int $object_id,string $meta_key,string $meta_value,[string $prev_value=&#039;&#039;])|
update_nag||void()|
update_object_term_cache|Updates the cache for Term ID(s).|null|bool(string|array $object_ids,array|string $object_type)|
update_option|Update the value of an option that was already added.|bool(string $option,mixed $newvalue)|
update_option_new_admin_email||void( $old_value, $value)|
update_page_cache|Alias of update_post_cache().|void( &$pages,array $pages)|
update_post_cache|Updates posts in cache.|void( &$posts,array $posts)|
update_post_caches|Call major cache updating functions for list of Post objects.|void( &$posts,[string $post_type=&#039;post&#039;],[bool $update_term_cache=true],[bool $update_meta_cache=true],array $posts)|
update_post_meta|Update post meta field based on post ID.|bool(int $post_id,string $meta_key,mixed $meta_value,[mixed $prev_value=&#039;&#039;])|
update_post_thumbnail_cache|Update cache for thumbnails in the current loop|void()|
update_postmeta_cache|Updates metadata cache for list of post IDs.|bool|array(array $post_ids)|
update_posts_count|Update a blog's post count.|void([ $deprecated=&#039;&#039;])|
update_recently_edited||void(unknown_type $file)|
update_right_now_message||void()|
update_site_option|Update the value of a site option that was already added.|bool(string $option,mixed $value)|
update_term_cache|Updates Terms to Taxonomy in cache.|void(array $terms,[string $taxonomy=&#039;&#039;])|
update_user_caches|Update all user caches|void( &$user,object $user)|
update_user_meta|Update user meta field based on user ID.|bool(int $user_id,string $meta_key,mixed $meta_value,[mixed $prev_value=&#039;&#039;])|
update_user_option|Update user option with global blog capability.|unknown(int $user_id,string $option_name,mixed $newvalue,[bool $global=false])|
update_user_status||void( $id, $pref, $value,[ $deprecated=null])|
update_usermeta|Update metadata of user.|bool(int $user_id,string $meta_key,mixed $meta_value)|
upgrade_100|Execute changes made in WordPress 1.0.|void()|
upgrade_101|Execute changes made in WordPress 1.0.1.|void()|
upgrade_110|Execute changes made in WordPress 1.2.|void()|
upgrade_130|Execute changes made in WordPress 1.5.|void()|
upgrade_160|Execute changes made in WordPress 2.0.|void()|
upgrade_210|Execute changes made in WordPress 2.1.|void()|
upgrade_230|Execute changes made in WordPress 2.3.|void()|
upgrade_230_old_tables|Remove old categories, link2cat, and post2cat database tables.|void()|
upgrade_230_options_table|Remove old options from the database.|void()|
upgrade_250|Execute changes made in WordPress 2.5.0.|void()|
upgrade_252|Execute changes made in WordPress 2.5.2.|void()|
upgrade_260|Execute changes made in WordPress 2.6.|void()|
upgrade_270|Execute changes made in WordPress 2.7.|void()|
upgrade_280|Execute changes made in WordPress 2.8.|void()|
upgrade_290|Execute changes made in WordPress 2.9.|void()|
upgrade_300|Execute changes made in WordPress 3.0.|void()|
upgrade_all|Functions to be called in install and upgrade scripts.|void()|
upgrade_network|Execute network level changes|void()|
upgrade_old_slugs|Upgrade old slugs made in version 2.2.|void()|
upload_is_file_too_big|Check whether an upload is too big.|mixed(array $upload)|
upload_is_user_over_quota|Check whether a blog has used its allotted upload space.|int([bool $echo=true])|
upload_size_limit_filter||int( $size)|
upload_space_setting||void( $id)|
url_is_accessable_via_ssl|Determines if the blog can be accessed over SSL.|bool(string $url)|
url_shorten|Shorten an URL, to be used as link text|string(string $url)|
url_to_postid|Examine a url and try to determine the post ID it represents.|int(string $url)|
urlencode_deep|Navigates through an array and encodes the values to be used in a URL.|array|string(array|string $value)|
use_codepress|Determine whether to use CodePress.|void()|
use_ssl_preference|Optional SSL preference that can be turned on by hooking to the 'personal_options' action.|void(object $user)|
user_admin_url|Retrieve the url to the admin area for the current user.|string([string $path=&#039;&#039;],[string $scheme=&#039;admin&#039;])|
user_can|Whether a particular user has capability or role.|bool(int|object $user,string $capability)|
user_can_access_admin_page||void()|
user_can_create_draft|Whether user can create a post.|bool(int $user_id,[int $blog_id=1],[int $category_id=&#039;None&#039;])|
user_can_create_post|Whether user can create a post.|bool(int $user_id,[int $blog_id=1],[int $category_id=&#039;None&#039;])|
user_can_delete_post|Whether user can delete a post.|bool(int $user_id,int $post_id,[int $blog_id=1])|
user_can_delete_post_comments|Whether user can delete a post.|bool(int $user_id,int $post_id,[int $blog_id=1])|
user_can_edit_post|Whether user can edit a post.|bool(int $user_id,int $post_id,[int $blog_id=1])|
user_can_edit_post_comments|Whether user can delete a post.|bool(int $user_id,int $post_id,[int $blog_id=1])|
user_can_edit_post_date|Whether user can delete a post.|bool(int $user_id,int $post_id,[int $blog_id=1])|
user_can_edit_user|Can user can edit other user.|bool(int $user_id,int $other_user)|
user_can_richedit|Whether the user should have a WYSIWIG editor.|bool()|
user_can_set_post_date|Whether user can set new posts' dates.|bool(int $user_id,[int $blog_id=1],[int $category_id=&#039;None&#039;])|
user_pass_ok|Check that the user login name and password is correct.|bool(string $user_login,string $user_pass)|
user_trailingslashit|Retrieve trailing slash string, if blog set for adding trailing slashes.|string(string $string,[string $type_of_url=&#039;&#039;])|
username_exists|Checks whether the given username exists.|null|int(string $username)|
users_can_register_signup_filter|Check whether users can self-register, based on Network settings.|bool()|
utf8_uri_encode|Encode the Unicode values to be used in the URI.|string(string $utf8_string,[int $length=0])|
validate_active_plugins|Validate active plugins|array()|
validate_another_blog_signup||void()|
validate_blog_form||void()|
validate_blog_signup||void()|
validate_current_theme|Checks that current theme files 'index.php' and 'style.css' exists.|bool()|
validate_email||void( $email,[ $check_domain=true])|
validate_file|File validates against allowed set of defined rules.|int(string $file,[array $allowed_files=&#039;&#039;])|
validate_file_to_edit|Make sure that the file that was requested to edit, is allowed to be edited|null(string $file,[array $allowed_files=&#039;&#039;])|
validate_plugin|Validate the plugin path.|WP_Error|int(string $plugin)|
validate_user_form||void()|
validate_user_signup||void()|
validate_username|Checks whether an username is valid.|bool(string $username)|
wa_posts_where_include_drafts_filter|Filter to add more post statuses.|string(string $where)|
walk_category_dropdown_tree|Retrieve HTML dropdown (select) content for category list.|void()|
walk_category_tree|Retrieve HTML list content for category list.|void()|
walk_nav_menu_tree|Retrieve the HTML list content for nav menu items.|void( $items, $depth, $r)|
walk_page_dropdown_tree|Retrieve HTML dropdown (select) content for page list.|void()|
walk_page_tree|Retrieve HTML list content for page list.|void( $pages, $depth, $current_page, $r)|
weblog_ping|Send a pingback.|void([string $server=&#039;&#039;],[string $path=&#039;&#039;])|
welcome_user_msg_filter|Ensure that the welcome message is not empty. Currently unused.|string(string $text)|
win_is_writable|Workaround for Windows bug in is_writable() function|bool(string $path)|
wlwmanifest_link|Display the link to the Windows Live Writer manifest file.|void()|
wp|Set up the WordPress query.|void([string $query_vars=&#039;&#039;])|
wp_add_dashboard_widget||void( $widget_id, $widget_name, $callback,[ $control_callback=null])|
wp_add_post_tags|Adds tags to a post.|bool|null([int $post_id=0],[string $tags=&#039;&#039;])|
wp_admin_bar_appearance_menu|Add &quot;Appearance&quot; menu with widget and nav menu submenu.|void( $wp_admin_bar)|
wp_admin_bar_comments_menu|Add edit comments link with awaiting moderation count bubble.|void( $wp_admin_bar)|
wp_admin_bar_dashboard_view_site_menu|Add the &quot;Dashboard&quot;/&quot;Visit Site&quot; menu.|void( $wp_admin_bar)|
wp_admin_bar_edit_menu|Provide an edit link for posts and terms.|void( $wp_admin_bar)|
wp_admin_bar_header|Style and scripts for the admin bar.|void()|
wp_admin_bar_my_account_menu|Add the &quot;My Account&quot; menu and all submenus.|void( $wp_admin_bar)|
wp_admin_bar_my_sites_menu|Add the &quot;My Sites/[Site Name]&quot; menu and all submenus.|void( $wp_admin_bar)|
wp_admin_bar_new_content_menu|Add &quot;Add New&quot; menu.|void( $wp_admin_bar)|
wp_admin_bar_render|Render the admin bar to the page based on the $wp_admin_bar-&gt;menu member var.|void()|
wp_admin_bar_shortlink_menu|Provide a shortlink.|void( $wp_admin_bar)|
wp_admin_bar_updates_menu|Provide an update link if theme/plugin/core updates are available.|void( $wp_admin_bar)|
wp_admin_css|Enqueues or directly prints a stylesheet link to the specified CSS file.|void([string $file=&#039;wp-admin&#039;],[bool $force_echo=false])|
wp_admin_css_color|Registers an admin colour scheme css file.|void(string $key,string $name,string $url,[array $colors=array()])|
wp_admin_css_uri|Display the URL of a WordPress admin CSS file.|void([string $file=&#039;wp-admin&#039;])|
wp_allow_comment|Validates whether this comment is allowed to be made.|mixed(array $commentdata)|
wp_array_slice_assoc|Extract a slice of an array, given a list of keys|array(array $array,array $keys)|
wp_attachment_is_image|Check if the attachment is an image.|bool([int $post_id=0])|
wp_authenticate|Checks a user's login information and logs them in if it checks out.|WP_Error|WP_User(string $username,string $password)|
wp_authenticate_cookie|Authenticate the user using the WordPress auth cookie.|void( $user, $username, $password)|
wp_authenticate_username_password|Authenticate the user using the username and password.|void( $user, $username, $password)|
wp_basename|i18n friendly version of basename()|string(string $path,[string $suffix=&#039;&#039;])|
wp_blacklist_check|Does comment contain blacklisted characters or words.|bool(string $author,string $email,string $url,string $comment,string $user_ip,string $user_agent)|
wp_cache_add|Adds data to the cache, if the cache key doesn't aleady exist.|unknown(int|string $key,mixed $data,[string $flag=&#039;&#039;],[int $expire=0])|
wp_cache_add_global_groups|Adds a group or set of groups to the list of global groups.|void(string|array $groups)|
wp_cache_add_non_persistent_groups|Adds a group or set of groups to the list of non-persistent groups.|void(string|array $groups)|
wp_cache_close|Closes the cache.|bool()|
wp_cache_delete|Removes the cache contents matching ID and flag.|bool(int|string $id,[string $flag=&#039;&#039;])|
wp_cache_flush|Removes all cache items.|bool()|
wp_cache_get|Retrieves the cache contents from the cache by ID and flag.|bool|mixed(int|string $id,[string $flag=&#039;&#039;])|
wp_cache_init|Sets up Object Cache Global and assigns it.|void()|
wp_cache_replace|Replaces the contents of the cache with new data.|bool(int|string $key,mixed $data,[string $flag=&#039;&#039;],[int $expire=0])|
wp_cache_reset|Reset internal cache keys and structures.  If the cache backend uses global blog or site IDs as part of its cache keys,  this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init.|void()|
wp_cache_set|Saves the data to the cache.|bool(int|string $key,mixed $data,[string $flag=&#039;&#039;],[int $expire=0])|
wp_category_checklist||void([unknown_type $post_id=0],[unknown_type $descendants_and_self=0],[unknown_type $selected_cats=false],[unknown_type $popular_cats=false],[ $walker=null],[ $checked_ontop=true])|
wp_check_browser_version|Check if the user needs a browser update|array|bool()|
wp_check_filetype|Retrieve the file type from the file name.|array(string $filename,[array $mimes=null])|
wp_check_filetype_and_ext|Attempt to determine the real file type of a file.|array(string $file,string $filename,[array $mimes=null])|
wp_check_for_changed_slugs|Checked for changed slugs for published post objects and save the old slug.|int(int $post_id,object $post,object $post_before)|
wp_check_invalid_utf8|Checks for invalid UTF8 in a string.|string(string $string,[boolean $strip=false])|
wp_check_mysql_version||void()|
wp_check_password|Checks the plaintext password against the encrypted Password.|bool(string $password,string $hash,[ $user_id=&#039;&#039;])|
wp_check_post_hierarchy_for_loops|Checks the given subset of the post hierarchy for hierarchy loops.|int(int $post_parent, $post_ID)|
wp_check_post_lock|Check to see if the post is currently being edited by another user.|bool|int(int $post_id)|
wp_check_term_hierarchy_for_loops|Checks the given subset of the term hierarchy for hierarchy loops.|int(int $parent,int $term_id,string $taxonomy)|
wp_clear_auth_cookie|Removes all of the cookies associated with authentication.|void()|
wp_clear_scheduled_hook|Unschedule all cron jobs attached to a specific hook.|void(string $hook,[array $args=array()])|
wp_clearcookie|Clears the authentication cookie, logging the user out. This function is deprecated.|void()|
wp_clone|Copy an object.|objectwp_clone(object $object)|
wp_comment_form_unfiltered_html_nonce|Displays form token for unfiltered comments.|void()|
wp_comment_reply||void([unknown_type $position=&#039;1&#039;],[unknown_type $checkbox=false],[unknown_type $mode=&#039;single&#039;],[ $table_row=true])|
wp_comment_trashnotice|Output 'undo move to trash' text for comments|void()|
wp_constrain_dimensions|Calculates the new dimentions for a downsampled image.|array(int $current_width,int $current_height,[int $max_width=0],[int $max_height=0])|
wp_convert_bytes_to_hr||unknown(unknown_type $bytes)|
wp_convert_hr_to_bytes||unknown(unknown_type $size)|
wp_convert_widget_settings|Convert the widget settings from single to multi-widget format.|array( $base_name, $option_name, $settings)|
wp_cookie_constants|Defines cookie related WordPress constants|void()|
wp_count_attachments|Count number of attachments for the mime type(s).|array([string|array $mime_type=&#039;&#039;])|
wp_count_comments|Retrieve total comments for blog or single post.|objectwp_count_comments([int $post_id=0])|
wp_count_posts|Count number of posts of a post type and is user has permissions to view.|objectwp_count_posts([string $type=&#039;post&#039;],[string $perm=&#039;&#039;])|
wp_count_terms|Count how many terms are in Taxonomy.|int(string $taxonomy,[array|string $args=array()])|
wp_create_categories||unknown(unknown_type $categories,[unknown_type $post_id=&#039;&#039;])|
wp_create_category||unknown(unknown_type $cat_name,[unknown_type $parent=0])|
wp_create_nav_menu|Create a Navigation Menu.|mixed(string $menu_name)|
wp_create_nonce|Creates a random, one time use token.|string([string|int $action=-1])|
wp_create_post_autosave|Creates autosave data for the specified post from $_POST data.|unknown( $post_id)|
wp_create_tag||unknown(unknown_type $tag_name)|
wp_create_term||unknown(unknown_type $tag_name,[ $taxonomy=&#039;post_tag&#039;])|
wp_create_thumbnail|Create a thumbnail from an Image given a maximum side size.|string(mixed $file,int $max_side,[mixed $deprecated=&#039;&#039;])|
wp_create_user|A simpler way of inserting an user into the database.|int(string $username,string $password,[string $email=&#039;&#039;])|
wp_credits||void()|
wp_cron|Run scheduled callbacks or spawn cron for all scheduled events.|null()|
wp_crop_image|Crop an Image to a given size.|string|WP_Error|false(string|int $src_file,int $src_x,int $src_y,int $src_w,int $src_h,int $dst_w,int $dst_h,[int $src_abs=false],[string $dst_file=false])|
wp_dashboard|Displays the dashboard.|void()|
wp_dashboard_browser_nag||void()|
wp_dashboard_cached_rss_widget|Checks to see if all of the feed url in $check_urls are cached.|bool(string $widget_id,callback $callback,[array $check_urls=array()])|
wp_dashboard_empty|Empty function usable by plugins to output empty dashboard widget (to be populated later by JS).|void()|
wp_dashboard_incoming_links||void()|
wp_dashboard_incoming_links_control||void()|
wp_dashboard_incoming_links_output|Display incoming links dashboard widget content.|void()|
wp_dashboard_plugins||void()|
wp_dashboard_plugins_output|Display plugins most popular, newest plugins, and recently updated widget text.|void()|
wp_dashboard_primary||void()|
wp_dashboard_primary_control||void()|
wp_dashboard_quick_press||void()|
wp_dashboard_quick_press_output|Output the QuickPress dashboard widget.|void()|
wp_dashboard_quota||void()|
wp_dashboard_recent_comments|Display recent comments dashboard widget content.|void()|
wp_dashboard_recent_comments_control|The recent comments dashboard widget control.|void()|
wp_dashboard_recent_drafts||void([ $drafts=false])|
wp_dashboard_right_now||void()|
wp_dashboard_rss_control|The RSS dashboard widget control.|void(string $widget_id,[array $form_inputs=array()])|
wp_dashboard_rss_output||void(string $widget_id)|
wp_dashboard_secondary||void()|
wp_dashboard_secondary_control||void()|
wp_dashboard_secondary_output|Display secondary dashboard RSS widget feed.|unknown()|
wp_dashboard_setup|Registers dashboard widgets.|void()|
wp_dashboard_trigger_widget_control|Calls widget control callback.|void([int $widget_control_id=false])|
wp_default_editor|Find out which editor should be displayed by default.|string()|
wp_default_scripts|Set up WordPress scripts to load by default for Administration Screen.|void( &$scripts,object $scripts)|
wp_default_styles|Assign default styles to $styles object.|void( &$styles,object $styles)|
wp_defer_comment_counting|Whether to defer comment counting.|unknown([bool $defer=null])|
wp_defer_term_counting|Enable or disable term counting.|bool([bool $defer=null])|
wp_delete_attachment|Trashes or deletes an attachment.|mixed(int $post_id,[bool $force_delete=false])|
wp_delete_category|Deletes one existing category.|mixed(int $cat_ID)|
wp_delete_comment|Trashes or deletes a comment.|bool(int $comment_id,[bool $force_delete=false])|
wp_delete_link|Delete link specified from database|bool(int $link_id)|
wp_delete_nav_menu|Delete a Navigation Menu.|mixed(string $menu)|
wp_delete_object_term_relationships|Will unlink the object from the taxonomy or taxonomies.|void(int $object_id,string|array $taxonomies)|
wp_delete_post|Trashes or deletes a post or page.|mixed([int $postid=0],[bool $force_delete=false])|
wp_delete_post_revision|Deletes a revision.|mixed(int|object $revision_id)|
wp_delete_term|Removes a term from the database.|bool|WP_Error(int $term,string $taxonomy,[array|string $args=array()])|
wp_delete_user|Remove user and optionally reassign posts and links to another user.|bool(int $id,[int $reassign=&#039;novalue&#039;])|
wp_die|Kill WordPress execution and display HTML message with error message.|void(string $message,[string $title=&#039;&#039;],[string|array $args=array()])|
wp_doc_link_parse||void( $content)|
wp_dropdown_categories|Display or retrieve the HTML dropdown list of categories.|string([string|array $args=&#039;&#039;])|
wp_dropdown_cats||unknown([unknown_type $currentcat=0],[unknown_type $currentparent=0],[unknown_type $parent=0],[unknown_type $level=0],[unknown_type $categories=0])|
wp_dropdown_pages|Retrieve or display list of pages as a dropdown (select list).|string([array|string $args=&#039;&#039;])|
wp_dropdown_roles|Print out &lt;option&gt; html elements for role selectors|void([string $selected=false])|
wp_dropdown_users|Create dropdown HTML content of users.|string|null([string|array $args=&#039;&#039;])|
wp_edit_attachments_query||unknown([unknown_type $q=false])|
wp_edit_posts_query|Run the wp query to fetch the posts for listing on the edit posts page|array([array|bool $q=false])|
wp_embed_defaults|Create default array of embed parameters.|array()|
wp_embed_handler_googlevideo|The Google Video embed handler callback. Google Video does not support oEmbed.|string(array $matches,array $attr,string $url,array $rawattr)|
wp_embed_register_handler|Register an embed handler. This function should probably only be used for sites that do not support oEmbed.|void( $id, $regex, $callback,[ $priority=10])|
wp_embed_unregister_handler|Unregister a previously registered embed handler.|void( $id,[ $priority=10])|
wp_enqueue_scripts|Wrapper for do_action('wp_enqueue_scripts')|void()|
wp_exif_date2ts|Convert the exif date format to a unix timestamp.|int(string $str)|
wp_exif_frac2dec|Convert a fraction string to a decimal.|int|float(string $str)|
wp_expand_dimensions|Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height.|array(int $example_width,int $example_height,int $max_width,int $max_height)|
wp_explain_nonce|Retrieve nonce action &quot;Are you sure&quot; message.|string(string $action)|
wp_ext2type|Retrieve the file type based on the extension name.|string|null(string $ext)|
wp_favicon_request|Don't load all of WordPress when handling a favicon.ico request.|void()|
wp_filter_comment|Filters and sanitizes comment data.|array(array $commentdata)|
wp_filter_object_list|Filters a list of objects, based on a set of key =&gt; value arguments|array(array $list,[array $args=array()],[string $operator=&#039;and&#039;],[bool|string $field=false])|
wp_footer|Fire the wp_footer action|void()|
wp_fullscreen_html||void()|
wp_functionality_constants|Defines functionality related WordPress constants|void()|
wp_generate_attachment_metadata|Generate post thumbnail attachment meta data.|mixed(int $attachment_id,string $file)|
wp_generate_auth_cookie|Generate authentication cookie contents.|string(int $user_id,int $expiration,[string $scheme=&#039;auth&#039;])|
wp_generate_password|Generates a random password drawn from the defined set of characters.|string([int $length=12],[bool $special_chars=true],[bool $extra_special_chars=false])|
wp_generate_tag_cloud|Generates a tag cloud (heatmap) from provided data.|string(array $tags,[string|array $args=&#039;&#039;])|
wp_generator|Display the XHTML generator that is generated on the wp_head hook.|void()|
wp_get_archives|Display archive links based on type and format.|void([string|array $args=&#039;&#039;])|
wp_get_associated_nav_menu_items|Get the menu items associated with a particular object.|array([int $object_id=0],[string $object_type=&#039;post_type&#039;])|
wp_get_attachment_image|Get an HTML img element representing an image attachment|string(int $attachment_id,[string $size=&#039;thumbnail&#039;],[bool $icon=false],[ $attr=&#039;&#039;])|
wp_get_attachment_image_src|Retrieve an image to represent an attachment.|bool|array(int $attachment_id,[string $size=&#039;thumbnail&#039;],[bool $icon=false])|
wp_get_attachment_link|Retrieve an attachment page link using an image or icon, if possible.|string([int $id=0],[string $size=&#039;thumbnail&#039;],[bool $permalink=false],[bool $icon=false],[string $text=false])|
wp_get_attachment_metadata|Retrieve attachment meta field for attachment ID.|string|bool([int $post_id=0],[bool $unfiltered=false])|
wp_get_attachment_thumb_file|Retrieve thumbnail for an attachment.|mixed([int $post_id=0])|
wp_get_attachment_thumb_url|Retrieve URL for an attachment thumbnail.|string|bool([int $post_id=0])|
wp_get_attachment_url|Retrieve the URL for an attachment.|string([int $post_id=0])|
wp_get_comment_status|The status of a comment by ID.|string|bool(int $comment_id)|
wp_get_cookie_login|Gets the user cookie login. This function is deprecated.|bool()|
wp_get_current_commenter|Get current commenter's name, email, and URL.|array()|
wp_get_current_user|Retrieve the current user object.|WP_User()|
wp_get_http|Perform a HTTP HEAD or GET request.|bool|string(string $url,[string|bool $file_path=false],[int $red=1])|
wp_get_http_headers|Retrieve HTTP Headers from URL.|bool|string(string $url,[bool $deprecated=false])|
wp_get_link_cats|Retrieves the link categories associated with the link specified.|array([int $link_id=0])|
wp_get_links|Gets the links associated with category.|null|string([string $args=&#039;&#039;])|
wp_get_linksbyname|Gets the links associated with the named category.|bool|null(string $category,[string $args=&#039;&#039;])|
wp_get_nav_menu_items|Returns all menu items of a navigation menu.|mixed(string $menu,[string $args=array()])|
wp_get_nav_menu_object|Returns a navigation menu object.|mixed(string $menu)|
wp_get_nav_menu_to_edit|Returns the menu formatted to edit.|string|WP_Error([string $menu_id=0])|
wp_get_nav_menus|Returns all navigation menu objects.|array([array $args=array()])|
wp_get_nocache_headers|Gets the header information to prevent caching.|array()|
wp_get_object_terms|Retrieves the terms associated with the given object(s), in the supplied taxonomies.|array|WP_Error(int|array $object_ids,string|array $taxonomies,[array|string $args=array()])|
wp_get_original_referer|Retrieve original referer that was posted, if it exists.|string|bool()|
wp_get_post_autosave|Retrieve the autosaved data of the specified post.|object|bool(int $post_id)|
wp_get_post_categories|Retrieve the list of categories for a post.|array([int $post_id=0],[array $args=array()])|
wp_get_post_cats||unknown([int $blogid=&#039;1&#039;],[int $post_ID=0])|
wp_get_post_parent_id|Returns the post's parent's post_ID|int|bool( $post_ID,int $post_id)|
wp_get_post_revision|Gets a post revision.|mixed( &$post,[string $output=OBJECT],[string $filter=&#039;raw&#039;],int|object $post)|
wp_get_post_revisions|Returns all revisions of specified post.|array([int|object $post_id=0],[ $args=null])|
wp_get_post_tags|Retrieve the tags for a post.|array([int $post_id=0],[array $args=array()])|
wp_get_post_terms|Retrieve the terms for a post.|array([int $post_id=0],[string $taxonomy=&#039;post_tag&#039;],[array $args=array()])|
wp_get_recent_posts|Retrieve number of recent posts.|unknown.([array $args=array()],[string $output=ARRAY_A],string $deprecated)|
wp_get_referer|Retrieve referer from '_wp_http_referer', HTTP referer, or current page respectively.|string|bool()|
wp_get_schedule|Retrieve Cron schedule for hook with arguments.|string|bool(string $hook,[array $args=array()])|
wp_get_schedules|Retrieve supported and filtered Cron recurrences.|array()|
wp_get_shortlink|Return a shortlink for a post, page, attachment, or blog.|string([int $id=0],[string $context=&#039;post&#039;],[bool $allow_slugs=true])|
wp_get_single_post|Retrieve a single post, based on post ID.|object|array([int $postid=0],[string $mode=OBJECT])|
wp_get_term_taxonomy_parent_id|Returns the term's parent's term_ID|int|bool(int $term_id,string $taxonomy)|
wp_guess_url|Guess the URL for the site.|string()|
wp_handle_sideload|Handle sideloads, which is the process of retriving a media item from another server instead of  a traditional media upload.  This process involves sanitizing the filename, checking extensions  for mime type, and moving the file to the appropriate directory within the uploads directory.|array( &$file,[array $overrides=false],array $file)|
wp_handle_upload|Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type,  and moving the file to the appropriate directory within the uploads directory.|array( &$file,[array $overrides=false],[ $time=null],array $file)|
wp_hash|Get hash of given string.|string(string $data,[ $scheme=&#039;auth&#039;])|
wp_hash_password|Create a hash (encrypt) of a plain text password.|string(string $password)|
wp_head|Fire the wp_head action|void()|
wp_html_excerpt|Safely extracts not more than the first $count characters from html string.|string(integer $str,integer $count)|
wp_htmledit_pre|Formats text for the HTML editor.|string(string $output)|
wp_http_supports|Determines if there is an HTTP Transport that can process this request.|bool([array $capabilities=array()],[string $url=null])|
wp_iframe||void(unknown_type $content_func)|
wp_image_editor|WordPress Image Editor|void( $post_id,[ $msg=false])|
wp_imagecreatetruecolor|Create new GD image resource with transparency support|image(int $width,int $height)|
wp_import_cleanup|Cleanup importer.|void(string $id)|
wp_import_handle_upload|Handle importer uploading and add attachment.|array()|
wp_import_upload_form|Outputs the form used by the importers to accept the data to be imported|void(string $action)|
wp_initial_constants|Defines initial WordPress constants|void()|
wp_initial_nav_menu_meta_boxes|Limit the amount of meta boxes to just links, pages and cats for first time users.|void()|
wp_insert_attachment|Insert an attachment.|int(string|array $object,[string $file=false],[int $parent=0])|
wp_insert_category|Updates an existing Category or creates a new Category.|int|objectwp_insert_category(mixed $catarr,[bool $wp_error=false])|
wp_insert_comment|Inserts a comment to the database.|int(array $commentdata)|
wp_insert_link|This function inserts/updates links into/in the database.|int|WP_Error(array $linkdata,[bool $wp_error=false])|
wp_insert_post|Insert a post.|int|WP_Error(array $postarr,[bool $wp_error=false])|
wp_insert_term|Adds a new term to the database. Optionally marks it as an alias of an existing term.|array|WP_Error(string $term,string $taxonomy,[array|string $args=array()])|
wp_insert_user|Insert an user into the database.|int|WP_Error(array $userdata)|
wp_install|Installs the blog|array(string $blog_title,string $user_name,string $user_email,bool $public,[null $deprecated=&#039;&#039;],[string $user_password=&#039;&#039;])|
wp_install_defaults||void(int $user_id)|
wp_is_post_autosave|Determines if the specified post is an autosave.|bool|int(int|object $post)|
wp_is_post_revision|Determines if the specified post is a revision.|bool|int(int|object $post)|
wp_iso_descrambler|Convert to ASCII from email subjects.|string(string $string)|
wp_just_in_time_script_localization|Load localized data on print rather than initialization.|void()|
wp_link_category_checklist||void([unknown_type $link_id=0])|
wp_link_dialog|Dialog for internal linking.|void()|
wp_link_query|Performs post queries for internal linking.|array([array $args=array()])|
wp_list_authors|List all the authors of the blog, with several options available.|null|string([array $args=&#039;&#039;])|
wp_list_bookmarks|Retrieve or echo all of the bookmarks.|string|null([string|array $args=&#039;&#039;])|
wp_list_categories|Display or retrieve the HTML list of categories.|string([string|array $args=&#039;&#039;])|
wp_list_cats||unknown([string|array $args=&#039;&#039;])|
wp_list_comments|List comments|void([string|array $args=array()],[array $comments=null])|
wp_list_filter|Filters a list of objects, based on a set of key =&gt; value arguments|array(array $list,[array $args=array()],[string $operator=&#039;AND&#039;])|
wp_list_pages|Retrieve or display list of pages in list (li) format.|string([array|string $args=&#039;&#039;])|
wp_list_pluck|Pluck a certain field out of each object in a list|array(array $list,int|string $field)|
wp_list_post_revisions|Display list of a post's revisions.|null([int|object $post_id=0],[string|array $args=null])|
wp_list_widget_controls|Show the widgets and their settings for a sidebar.|void(string $sidebar)|
wp_list_widget_controls_dynamic_sidebar||array(array $params)|
wp_list_widgets|Display list of the available widgets.|void()|
wp_load_alloptions|Loads and caches all autoloaded options, if available or all options.|array()|
wp_load_core_site_options|Loads and caches certain often requested site options if is_multisite() and a peristent cache is not being used.|void([int $site_id=null])|
wp_load_image|Load an image from a string, if PHP supports it.|resource(string $file)|
wp_login|Checks a users login information and logs them in if it checks out. This function is deprecated.|bool(string $username,string $password,[bool $deprecated=&#039;&#039;])|
wp_login_form|Provides a simple login form for use anywhere within WordPress. By default, it echoes  the HTML immediately. Pass array('echo'=&gt;false) to return the string instead.|Void,([array $args=array()])|
wp_login_url|Returns the Log In URL.|string([string $redirect=&#039;&#039;],[bool $force_reauth=false])|
wp_loginout|Display the Log In/Out link.|void([string $redirect=&#039;&#039;],[boolean $echo=true])|
wp_logout|Log the current user out.|void()|
wp_logout_url|Returns the Log Out URL.|void([string $redirect=&#039;&#039;])|
wp_lostpassword_url|Returns the Lost Password URL.|void([string $redirect=&#039;&#039;])|
wp_mail|Send mail, similar to PHP's mail|bool(string|array $to,string $subject,string $message,[string|array $headers=&#039;&#039;],[string|array $attachments=array()])|
wp_make_link_relative|Convert full URL paths to absolute paths.|string(string $link)|
wp_match_mime_types|Check a MIME-Type against a list.|array(string|array $wildcard_mime_types,string|array $real_mime_types)|
wp_max_upload_size||unknown()|
wp_maybe_load_embeds|Determines if default embed handlers should be loaded.|void()|
wp_maybe_load_widgets|Determines if Widgets library should be loaded.|void()|
wp_meta|Theme container function for the 'wp_meta' action.|void()|
wp_mime_type_icon|Retrieve the icon for a MIME type.|string|bool([string $mime=0])|
wp_mkdir_p|Recursive directory creation based on full path.|bool(string $target)|
wp_nav_menu|Displays a navigation menu.|void([array $args=array()])|
wp_nav_menu_item_link_meta_box|Displays a metabox for the custom links menu item.|void()|
wp_nav_menu_item_post_type_meta_box|Displays a metabox for a post type menu item.|void(string $object,string $post_type)|
wp_nav_menu_item_taxonomy_meta_box|Displays a metabox for a taxonomy menu item.|void(string $object,string $taxonomy)|
wp_nav_menu_locations_meta_box|Displays a metabox for the nav menu theme locations.|void()|
wp_nav_menu_manage_columns|Returns the columns for the nav menus page.|string|WP_Error()|
wp_nav_menu_max_depth||void()|
wp_nav_menu_post_type_meta_boxes|Creates metaboxes for any post type menu item.|void()|
wp_nav_menu_setup|Register nav menu metaboxes and advanced menu items|void()|
wp_nav_menu_taxonomy_meta_boxes|Creates metaboxes for any taxonomy menu item.|void()|
wp_network_dashboard_right_now||void()|
wp_new_blog_notification||void(string $blog_title,string $blog_url,int $user_id,string $password)|
wp_new_comment|Adds a new comment to the database.|int(array $commentdata)|
wp_new_user_notification|Notify the blog admin of a new user, normally via email.|void(int $user_id,[string $plaintext_pass=&#039;&#039;])|
wp_next_scheduled|Retrieve the next timestamp for a cron event.|bool|int(string $hook,[array $args=array()])|
wp_nonce_ays|Display &quot;Are You Sure&quot; message to confirm the action being taken.|void(string $action)|
wp_nonce_field|Retrieve or display nonce hidden field for forms.|string([string $action=-1],[string $name=&quot;_wpnonce&quot;],[bool $referer=true],[bool $echo=true])|
wp_nonce_tick|Get the time-dependent variable for nonce creation.|int()|
wp_nonce_url|Retrieve URL with nonce added to URL query.|string(string $actionurl,[string $action=-1])|
wp_notify_moderator|Notifies the moderator of the blog about a new comment that is awaiting approval.|bool(int $comment_id)|
wp_notify_postauthor|Notify an author of a comment/trackback/pingback to one of their posts.|bool(int $comment_id,[string $comment_type=&#039;&#039;])|
wp_ob_end_flush_all|Flush all output buffers for PHP 5.2.|void()|
wp_oembed_add_provider|Adds a URL format and oEmbed provider URL pair.|void(string $format,string $provider,[boolean $regex=false])|
wp_oembed_get|Attempts to fetch the embed HTML for a provided URL using oEmbed.|string(string $url,[array $args=&#039;&#039;])|
wp_old_slug_redirect|Redirect old slugs to the correct permalink.|null()|
wp_original_referer_field|Retrieve or display original referer hidden field for forms.|string([bool $echo=true],[string $jump_back_to=&#039;current&#039;])|
wp_page_menu|Display or retrieve list of pages with optional home link.|void([array|string $args=array()])|
wp_parse_args|Merge user defined arguments into defaults array.|array(string|array $args,[array $defaults=&#039;&#039;])|
wp_parse_auth_cookie|Parse a cookie into its components|array([string $cookie=&#039;&#039;],[string $scheme=&#039;&#039;])|
wp_parse_id_list|Clean up an array, comma- or space-separated list of IDs|array(array|string $list)|
wp_parse_str|Parses a string into variables to be stored in an array.|void(string $string, &$array,array $array)|
wp_password_change_notification|Notify the blog admin of a user changing password, normally via email.|void( &$user,object $user)|
wp_plugin_directory_constants|Defines plugin directory WordPress constants|void()|
wp_plugin_update_row||void( $file, $plugin_data)|
wp_plugin_update_rows||void()|
wp_popular_terms_checklist||unknown(unknown_type $taxonomy,[unknown_type $default=0],[unknown_type $number=10],[unknown_type $echo=true])|
wp_post_mime_type_where|Convert MIME types into SQL.|string(string|array $post_mime_types,[string $table_alias=&#039;&#039;])|
wp_post_revision_title|Retrieve formatted date timestamp of a revision (linked to that revisions's page).|string(int|object $revision,[bool $link=true])|
wp_pre_kses_less_than|Convert lone less than signs.|string(string $text)|
wp_pre_kses_less_than_callback|Callback function used by preg_replace.|string(array $matches)|
wp_preload_dialogs||void( $init)|
wp_print_editor_js||void()|
wp_print_footer_scripts|Prints the scripts that were queued for the footer on the front end.|void()|
wp_print_head_scripts|Prints the script queue in the HTML head on the front end.|void()|
wp_protect_special_option|Protect WordPress special option from being modified.|void(string $option)|
wp_prototype_before_jquery|Reorder JavaScript scripts array to place prototype before jQuery.|array(array $js_array)|
wp_publish_post|Publish a post by transitioning the post status.|null(int $post_id)|
wp_quicktags||void()|
wp_rand|Generates a random number|int([int $min=0],[int $max=0])|
wp_read_image_metadata|Get extended image metadata, exif or iptc as available.|bool|array(string $file)|
wp_redirect|Redirects to another page.|bool(string $location,[int $status=302])|
wp_referer_field|Retrieve or display referer hidden field for forms.|string([bool $echo=true])|
wp_register|Display the Registration or Admin link.|void([string $before=&#039;&lt;li&gt;&#039;],[string $after=&#039;&lt;/li&gt;&#039;],[boolean $echo=true])|
wp_register_sidebar_widget|Register widget for use in sidebars.|null(int|string $id,string $name,callback $output_callback,[array|string $options=array()],mixed $params,...)|
wp_register_widget_control|Registers widget control callback for customizing options.|void(int|string $id,string $name,callback $control_callback,[array|string $options=array()],mixed $params,...)|
wp_rel_nofollow|Adds rel nofollow string to all HTML A elements in content.|string(string $text)|
wp_rel_nofollow_callback|Callback to used to add rel=nofollow string to HTML A element.|string(array $matches)|
wp_remote_fopen|HTTP request for URI to retrieve content.|bool|string(string $uri)|
wp_remote_get|Retrieve the raw response from the HTTP request using the GET method.|WP_Error|array(string $url,[array $args=array()])|
wp_remote_head|Retrieve the raw response from the HTTP request using the HEAD method.|WP_Error|array(string $url,[array $args=array()])|
wp_remote_post|Retrieve the raw response from the HTTP request using the POST method.|WP_Error|array(string $url,[array $args=array()])|
wp_remote_request|Retrieve the raw response from the HTTP request.|WP_Error|array(string $url,[array $args=array()])|
wp_remote_retrieve_body|Retrieve only the body from the raw response.|string( &$response,array $response)|
wp_remote_retrieve_header|Retrieve a single header by name from the raw response.|string( &$response,string $header,array $response)|
wp_remote_retrieve_headers|Retrieve only the headers from the raw response.|array( &$response,array $response)|
wp_remote_retrieve_response_code|Retrieve only the response code from the raw response.|string( &$response,array $response)|
wp_remote_retrieve_response_message|Retrieve only the response message from the raw response.|string( &$response,array $response)|
wp_reschedule_event|Reschedule a recurring event.|bool|null(int $timestamp,string $recurrence,string $hook,[array $args=array()])|
wp_reset_postdata|After looping through a separate query, this function restores  the $post global to the current post in the main query|void()|
wp_reset_query|Destroy the previous query and set up a new query.|void()|
wp_reset_vars|Resets global variables based on $_GET and $_POST|void(array $vars)|
wp_restore_image||void( $post_id)|
wp_restore_post_revision|Restores a post to the specified revision.|mixed(int|object $revision_id,[array $fields=null])|
wp_revoke_user|Remove all capabilities from user.|void(int $id)|
wp_richedit_pre|Formats text for the rich text editor.|string(string $text)|
wp_safe_redirect|Performs a safe (local) redirect, using wp_redirect().|void( $location,[ $status=302])|
wp_salt|Get salt to add to hashes to help prevent attacks.|string([string $scheme=&#039;auth&#039;])|
wp_sanitize_redirect|Sanitizes a URL for use in a redirect.|string( $location)|
wp_save_image||void( $post_id)|
wp_save_image_file||void( $filename, $image, $mime_type, $post_id)|
wp_save_nav_menu_items|Save posted nav menu item data.|array([int $menu_id=0],[array $menu_data=array()])|
wp_save_post_revision|Saves an already existing post as a post revision.|mixed(int $post_id)|
wp_schedule_event|Schedule a periodic event.|bool|null(int $timestamp,string $recurrence,string $hook,[array $args=array()])|
wp_schedule_single_event|Schedules a hook to run only once.|void(int $timestamp,string $hook,[array $args=array()])|
wp_schedule_update_checks|Schedule core, theme, and plugin update checks.|void()|
wp_schedule_update_network_counts|Schedule update of the network-wide counts for the current network.|void()|
wp_scheduled_delete|Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS.|void()|
wp_set_all_user_settings|Private. Set all user interface settings.|bool(unknown $all)|
wp_set_auth_cookie|Sets the authentication cookies based User ID.|void(int $user_id,[bool $remember=false],[ $secure=&#039;&#039;])|
wp_set_comment_status|Sets the status of a comment.|bool(int $comment_id,string $comment_status,[bool $wp_error=false])|
wp_set_current_user|Changes the current user by ID or name.|WP_User(int $id,[string $name=&#039;&#039;])|
wp_set_link_cats|Update link with the specified link categories.|void([int $link_id=0],[array $link_categories=array()])|
wp_set_object_terms|Create Term and Taxonomy Relationships.|array|WP_Error(int $object_id,array|int|string $terms,array|string $taxonomy,[bool $append=false])|
wp_set_password|Updates the user's password with a new encrypted one.|void(string $password,int $user_id)|
wp_set_post_categories|Set categories for a post.|bool|mixed([int $post_ID=0],[array $post_categories=array()])|
wp_set_post_cats|Sets the categories that the post id belongs to.|unknown([int $blogid=&#039;1&#039;],[int $post_ID=0],[array $post_categories=array()])|
wp_set_post_lock|Mark the post as currently being edited by the current user|bool(int $post_id)|
wp_set_post_tags|Set the tags for a post.|mixed([int $post_id=0],[string $tags=&#039;&#039;],[bool $append=false])|
wp_set_post_terms|Set the terms for a post.|mixed([int $post_id=0],[string $tags=&#039;&#039;],[ $taxonomy=&#039;post_tag&#039;],[bool $append=false])|
wp_setcookie|Sets a cookie for a user who just logged in. This function is deprecated.|void(string $username,[string $password=&#039;&#039;],[bool $already_md5=false],[string $home=&#039;&#039;],[string $siteurl=&#039;&#039;],[bool $remember=false])|
wp_setup_nav_menu_item|Decorates a menu item object with the shared navigation menu item properties.|object(object $menu_item)|
wp_shake_js||void()|
wp_shortlink_header|Send a Link: rel=shortlink header if a shortlink is defined for the current page.|void()|
wp_shortlink_wp_head|Inject rel=sortlink into head if a shortlink is defined for the current page.|void()|
wp_shrink_dimensions|Calculates the new dimentions for a downsampled image.|mixed(int $width,int $height,[int $wmax=128],[int $hmax=96])|
wp_sidebar_description|Retrieve description for a sidebar.|string(int|string $id)|
wp_signon|Authenticate user with remember capability.|objectwp_signon([array $credentials=&#039;&#039;],[bool $secure_cookie=&#039;&#039;])|
wp_spam_comment|Marks a comment as Spam|mixed(int $comment_id)|
wp_specialchars|Escaping for HTML blocks.|void( $string,[ $quote_style=ENT_NOQUOTES],[ $charset=false],[ $double_encode=false])|
wp_specialchars_decode|Converts a number of HTML entities into their special characters.|string(string $string,[mixed $quote_style=ENT_NOQUOTES])|
wp_sprintf|WordPress implementation of PHP sprintf() with filters.|string(string $pattern,mixed $args,...)|
wp_sprintf_l|Localize list items before the rest of the content.|string(string $pattern,array $args)|
wp_ssl_constants|Defines cookie related WordPress constants|void()|
wp_stream_image||void( $image, $mime_type, $post_id)|
wp_strip_all_tags|Properly strip all HTML tags including script and style|string(string $string,[bool $remove_breaks=false])|
wp_style_loader_src|Administration Screen CSS for changing the styles.|string(string $src,string $handle)|
wp_suspend_cache_invalidation|Suspend cache invalidation.|bool([bool $suspend=true])|
wp_tag_cloud|Display tag cloud.|array([array|string $args=&#039;&#039;])|
wp_templating_constants|Defines templating related WordPress constants|void()|
wp_tempnam|Returns a filename of a Temporary unique file.|string([string $filename=&#039;&#039;],[string $dir=&#039;&#039;])|
wp_terms_checklist|Taxonomy independent version of wp_category_checklist|void([int $post_id=0],[array $args=array()])|
wp_text_diff|Displays a human readable HTML representation of the difference between two strings.|string(string $left_string,string $right_string,[string|array $args=null])|
wp_theme_update_row||void( $theme_key, $theme)|
wp_theme_update_rows||void()|
wp_throttle_comment_flood|Whether comment should be blocked because of comment flood.|bool(bool $block,int $time_lastcomment,int $time_newcomment)|
wp_timezone_choice|Gives a nicely formatted list of timezone strings // temporary! Not in final|string(string $selected_zone)|
wp_timezone_override_offset|gmt_offset modification for smart timezone handling|float|bool()|
wp_timezone_supported|Check for PHP timezone support|bool()|
wp_tiny_mce|Adds the TinyMCE editor used on the Write and Edit screens.|void([bool $teeny=false],[mixed $settings=false])|
wp_title|Display or retrieve page title for all areas of blog.|string|null([string $sep=&#039;&amp;raquo;&#039;],[bool $display=true],[string $seplocation=&#039;&#039;])|
wp_title_rss|Display the blog title for display of the feed title.|void([string $sep=&#039;&amp;#187;&#039;])|
wp_transition_comment_status|Call hooks for when a comment status transition occurs.|void(string $new_status,string $old_status,object $comment)|
wp_transition_post_status|Transition the post status of a post.|void(string $new_status,string $old_status,object $post)|
wp_trash_comment|Moves a comment to the Trash|mixed(int $comment_id)|
wp_trash_post|Moves a post or page to the Trash|mixed([int $post_id=0])|
wp_trash_post_comments|Moves comments for a post to the trash|mixed([int $post=null])|
wp_trim_excerpt|Generates an excerpt from the content, if needed.|string(string $text)|
wp_unique_filename|Get a filename that is sanitized and unique for the given directory.|string(string $dir,string $filename,[mixed $unique_filename_callback=null])|
wp_unique_post_slug|Computes a unique slug for the post, when given the desired slug and some post details.|string(string $slug,integer $post_ID,string $post_status,string $post_type,integer $post_parent)|
wp_unique_term_slug|Will make slug unique, if it isn't already.|string(string $slug,object $term)|
wp_unregister_sidebar_widget|Remove widget from sidebar.|void(int|string $id)|
wp_unregister_widget_control|Remove control callback for widget.|void(int|string $id)|
wp_unschedule_event|Unschedule a previously scheduled cron job.|void(int $timestamp,string $hook,[array $args=array()])|
wp_unspam_comment|Removes a comment from the Spam|mixed(int $comment_id)|
wp_untrash_comment|Removes a comment from the Trash|mixed(int $comment_id)|
wp_untrash_post|Restores a post or page from the Trash|mixed([int $post_id=0])|
wp_untrash_post_comments|Restore comments for a post from the trash|mixed([int $post=null])|
wp_update_attachment_metadata|Update metadata for an attachment.|int(int $post_id,array $data)|
wp_update_category|Aliases wp_insert_category() with minimal args.|int|bool(array $catarr)|
wp_update_comment|Updates an existing comment in the database.|int(array $commentarr)|
wp_update_comment_count|Updates the comment count for post(s).|bool(int $post_id,[bool $do_deferred=false])|
wp_update_comment_count_now|Updates the comment count for the post.|bool(int $post_id)|
wp_update_core||void( $current,[ $feedback=&#039;&#039;])|
wp_update_link|Update a link in the database.|int|WP_Error(array $linkdata)|
wp_update_nav_menu_item|Save the properties of a menu item or create a new one.|int([int $menu_id=0],[int $menu_item_db_id=0],[array $menu_item_data=array()])|
wp_update_nav_menu_object|Save the properties of a menu or create a new menu with those properties.|int|error([int $menu_id=0],[array $menu_data=array()])|
wp_update_network_counts|Update the network-wide counts for the current network.|void()|
wp_update_plugin||void( $plugin,[ $feedback=&#039;&#039;])|
wp_update_plugins|Check plugin versions against the latest versions hosted on WordPress.org.|mixed()|
wp_update_post|Update a post with new post data.|int([array|object $postarr=array()])|
wp_update_term|Update term based on arguments provided.|array|WP_Error(int $term_id,string $taxonomy,[array|string $args=array()])|
wp_update_term_count|Updates the amount of terms in taxonomy.|bool(int|array $terms,string $taxonomy,[ $do_deferred=false])|
wp_update_term_count_now|Perform term count update immediately.|bool(array $terms,string $taxonomy)|
wp_update_theme||void( $theme,[ $feedback=&#039;&#039;])|
wp_update_themes|Check theme versions against the latest versions hosted on WordPress.org.|mixed()|
wp_update_user|Update an user in the database.|int(array $userdata)|
wp_upgrade|Run WordPress Upgrade functions.|null()|
wp_upload_bits|Create a file in the upload folder with given content.|array(string $name,null $deprecated,mixed $bits,[string $time=null])|
wp_upload_dir|Get an array containing the current upload directory's path and url.|array([string $time=null])|
wp_user_settings|Saves and restores user interface settings stored in a cookie.|void()|
wp_validate_auth_cookie|Validates authentication cookie.|bool|int([string $cookie=&#039;&#039;],[string $scheme=&#039;&#039;])|
wp_validate_redirect|Validates a URL for use in a redirect.|string(string $location,[string $default=&#039;&#039;])|
wp_verify_nonce|Verify that correct nonce was used with time limit.|bool(string $nonce,[string|int $action=-1])|
wp_version_check|Check WordPress version against the newest version.|mixed()|
wp_widget_control|Meta widget used to display the control form for a widget.|array(array $sidebar_args)|
wp_widget_description|Retrieve description for widget.|string(int|string $id)|
wp_widget_rss_form|Display RSS widget options form.|void(array|string $args,[array $inputs=null])|
wp_widget_rss_output|Display the RSS entries in a list.|void(string|array|object $rss,[array $args=array()])|
wp_widget_rss_process|Process RSS feed widget data and optionally retrieve feed items.|array(array $widget_rss,[bool $check_feed=true])|
wp_widgets_add_menu|Append the Widgets menu to the themes main menu.|void()|
wp_widgets_init|Register all of the default WordPress widgets on startup.|void()|
wp_write_post|Creates a new post from the &quot;Write Post&quot; form using $_POST information.|unknown()|
wpautop|Replaces double line-breaks with paragraph elements.|string(string $pee,[int|bool $br=1])|
wpmu_activate_signup|Activate a signup.|array(string $key)|
wpmu_activate_stylesheet||void()|
wpmu_admin_do_redirect|Redirect a user based on $_GET or $_POST arguments.|void([string $url=&#039;&#039;])|
wpmu_admin_redirect_add_updated_param|Adds an 'updated=true' argument to a URL.|string([string $url=&#039;&#039;])|
wpmu_checkAvailableSpace|Determines if the available space defined by the admin has been exceeded by the user.|void()|
wpmu_create_blog|Create a site.|mixed(string $domain,string $path,string $title,int $user_id,[array $meta=&#039;&#039;],[int $site_id=1])|
wpmu_create_user|Create a user.|mixed(string $user_name,string $password,string $email)|
wpmu_delete_blog|Delete a blog|void(int $blog_id,[bool $drop=false])|
wpmu_delete_user||void( $id)|
wpmu_get_blog_allowedthemes||void([ $blog_id=0])|
wpmu_log_new_registrations|Logs user registrations.|void(int $blog_id,int $user_id)|
wpmu_menu||void()|
wpmu_signup_blog|Record site signup information for future activation.|void(string $domain,string $path,string $title,string $user,string $user_email,[array $meta=&#039;&#039;])|
wpmu_signup_blog_notification|Notify user of signup success.|bool(string $domain,string $path,string $title,string $user,string $user_email,string $key,[array $meta=&#039;&#039;])|
wpmu_signup_stylesheet||void()|
wpmu_signup_user|Record user signup information for future activation.|void(string $user,string $user_email,[array $meta=&#039;&#039;])|
wpmu_signup_user_notification|Notify user of signup success.|bool(string $user,string $user_email,string $key,[array $meta=&#039;&#039;])|
wpmu_update_blogs_date|Update the last_updated field for the current blog.|void()|
wpmu_validate_blog_signup|Processes new site registrations.|array(string $blogname,string $blog_title,[ $user=&#039;&#039;])|
wpmu_validate_user_signup|Processes new user registrations.|array(string $user_name,string $user_email)|
wpmu_welcome_notification|Notify a user that her blog activation has been successful.|bool(int $blog_id,int $user_id,string $password,string $title,[array $meta=&#039;&#039;])|
wpmu_welcome_user_notification|Notify a user that her account activation has been successful.|bool(int $user_id,string $password,[array $meta=&#039;&#039;])|
wptexturize|Replaces common plain text characters into formatted entities|string(string $text)|
write_post|Calls wp_write_post() and handles the errors.|unknown()|
xfn_check|Display checked checkboxes attribute for xfn microformat options.|void(string $class,[string $value=&#039;&#039;],[mixed $deprecated=&#039;&#039;])|
xmlrpc_getpostcategory|Retrieve the post category or categories from XMLRPC XML.|string|array(string $content)|
xmlrpc_getposttitle|Retrieve post title from XMLRPC XML.|string(string $content)|
xmlrpc_removepostdata|XMLRPC XML content without title and category elements.|string(string $content)|
zeroise|Add leading zeros when necessary.|string(mixed $number,int $threshold)|
